(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("___AGENCIA_AMIGA___"));
	else if(typeof define === 'function' && define.amd)
		define(["___AGENCIA_AMIGA___"], factory);
	else if(typeof exports === 'object')
		exports["AgenciaAmiga"] = factory(require("___AGENCIA_AMIGA___"));
	else
		root["AgenciaAmiga"] = factory(root["___AGENCIA_AMIGA___"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdateAgenciaAmiga"];
/******/ 	this["webpackHotUpdateAgenciaAmiga"] = function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}
/******/
/******/
/******/ 	// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
/******/ 	var canDefineProperty = false;
/******/ 	try {
/******/ 		Object.defineProperty({}, "x", {
/******/ 			get: function() {}
/******/ 		});
/******/ 		canDefineProperty = true;
/******/ 	} catch(x) {
/******/ 		// IE will fail on defineProperty
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "929bfe8bb3e62c2d9624"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				if(canDefineProperty) {
/******/ 					Object.defineProperty(fn, name, (function(name) {
/******/ 						return {
/******/ 							configurable: true,
/******/ 							enumerable: true,
/******/ 							get: function() {
/******/ 								return __webpack_require__[name];
/******/ 							},
/******/ 							set: function(value) {
/******/ 								__webpack_require__[name] = value;
/******/ 							}
/******/ 						};
/******/ 					}(name)));
/******/ 				} else {
/******/ 					fn[name] = __webpack_require__[name];
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		function ensure(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		}
/******/ 		if(canDefineProperty) {
/******/ 			Object.defineProperty(fn, "e", {
/******/ 				enumerable: true,
/******/ 				value: ensure
/******/ 			});
/******/ 		} else {
/******/ 			fn.e = ensure;
/******/ 		}
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:4000/js/";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__("./node_modules/react-hot-loader/patch.js");
	__webpack_require__("./node_modules/webpack-dev-server/client/index.js?http:/localhost:4000");
	__webpack_require__("./node_modules/webpack/hot/only-dev-server.js");
	__webpack_require__("./src/overrides.scss");
	module.exports = __webpack_require__("./src/index.jsx");


/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/main.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".main__wrapper__3_tfFMj2MP {\n  background: #f0f0f0;\n  position: absolute;\n  overflow: hidden;\n  font-size: 1rem;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0; }\n\n.main__content__1uha_4FTuL {\n  overflow: auto;\n  padding: .8em; }\n", "", {"version":3,"sources":["/./src/views/containers/src/views/containers/main.scss"],"names":[],"mappings":"AAAA;EACE,oBAAoB;EACpB,mBAAmB;EACnB,iBAAiB;EACjB,gBAAgB;EAChB,OAAO;EACP,QAAQ;EACR,SAAS;EACT,UAAU,EACX;;AAED;EACE,eAAe;EACf,cAAc,EACf","file":"main.scss","sourcesContent":[".wrapper {\n  background: #f0f0f0;\n  position: absolute;\n  overflow: hidden;\n  font-size: 1rem;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\n.content {\n  overflow: auto;\n  padding: .8em;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "main__wrapper__3_tfFMj2MP",
		"content": "main__content__1uha_4FTuL"
	};

/***/ },

/***/ "./node_modules/react-hot-loader/lib/patch.js":
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable global-require */
	
	'use strict';
	
	if (false) {
	  module.exports = require('./patch.prod');
	} else {
	  module.exports = __webpack_require__("./node_modules/react-hot-loader/lib/patch.dev.js");
	}

/***/ },

/***/ "./node_modules/react-hot-loader/lib/patch.dev.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var React = __webpack_require__(1);
	var createProxy = __webpack_require__("./node_modules/react-proxy/modules/index.js").default;
	var global = __webpack_require__("./node_modules/global/window.js");
	
	var ComponentMap = function () {
	  function ComponentMap(useWeakMap) {
	    _classCallCheck(this, ComponentMap);
	
	    if (useWeakMap) {
	      this.wm = new WeakMap();
	    } else {
	      this.slots = {};
	    }
	  }
	
	  _createClass(ComponentMap, [{
	    key: 'getSlot',
	    value: function getSlot(type) {
	      var key = type.displayName || type.name || 'Unknown';
	      if (!this.slots[key]) {
	        this.slots[key] = [];
	      }
	      return this.slots[key];
	    }
	  }, {
	    key: 'get',
	    value: function get(type) {
	      if (this.wm) {
	        return this.wm.get(type);
	      }
	
	      var slot = this.getSlot(type);
	      for (var i = 0; i < slot.length; i++) {
	        if (slot[i].key === type) {
	          return slot[i].value;
	        }
	      }
	
	      return undefined;
	    }
	  }, {
	    key: 'set',
	    value: function set(type, value) {
	      if (this.wm) {
	        this.wm.set(type, value);
	      } else {
	        var slot = this.getSlot(type);
	        for (var i = 0; i < slot.length; i++) {
	          if (slot[i].key === type) {
	            slot[i].value = value;
	            return;
	          }
	        }
	        slot.push({ key: type, value: value });
	      }
	    }
	  }, {
	    key: 'has',
	    value: function has(type) {
	      if (this.wm) {
	        return this.wm.has(type);
	      }
	
	      var slot = this.getSlot(type);
	      for (var i = 0; i < slot.length; i++) {
	        if (slot[i].key === type) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }]);
	
	  return ComponentMap;
	}();
	
	var proxiesByID = void 0;
	var didWarnAboutID = void 0;
	var hasCreatedElementsByType = void 0;
	var idsByType = void 0;
	
	var hooks = {
	  register: function register(type, uniqueLocalName, fileName) {
	    if (typeof type !== 'function') {
	      return;
	    }
	    if (!uniqueLocalName || !fileName) {
	      return;
	    }
	    if (typeof uniqueLocalName !== 'string' || typeof fileName !== 'string') {
	      return;
	    }
	    var id = fileName + '#' + uniqueLocalName; // eslint-disable-line prefer-template
	    if (!idsByType.has(type) && hasCreatedElementsByType.has(type)) {
	      if (!didWarnAboutID[id]) {
	        didWarnAboutID[id] = true;
	        var baseName = fileName.replace(/^.*[\\\/]/, '');
	        console.error('React Hot Loader: ' + uniqueLocalName + ' in ' + fileName + ' will not hot reload ' + ('correctly because ' + baseName + ' uses <' + uniqueLocalName + ' /> during ') + ('module definition. For hot reloading to work, move ' + uniqueLocalName + ' ') + ('into a separate file and import it from ' + baseName + '.'));
	      }
	      return;
	    }
	
	    // Remember the ID.
	    idsByType.set(type, id);
	
	    // We use React Proxy to generate classes that behave almost
	    // the same way as the original classes but are updatable with
	    // new versions without destroying original instances.
	    if (!proxiesByID[id]) {
	      proxiesByID[id] = createProxy(type);
	    } else {
	      proxiesByID[id].update(type);
	    }
	  },
	  reset: function reset(useWeakMap) {
	    proxiesByID = {};
	    didWarnAboutID = {};
	    hasCreatedElementsByType = new ComponentMap(useWeakMap);
	    idsByType = new ComponentMap(useWeakMap);
	  }
	};
	
	hooks.reset(typeof WeakMap === 'function');
	
	function resolveType(type) {
	  // We only care about composite components
	  if (typeof type !== 'function') {
	    return type;
	  }
	
	  hasCreatedElementsByType.set(type, true);
	
	  // When available, give proxy class to React instead of the real class.
	  var id = idsByType.get(type);
	  if (!id) {
	    return type;
	  }
	
	  var proxy = proxiesByID[id];
	  if (!proxy) {
	    return type;
	  }
	
	  return proxy.get();
	}
	
	var createElement = React.createElement;
	function patchedCreateElement(type) {
	  // Trick React into rendering a proxy so that
	  // its state is preserved when the class changes.
	  // This will update the proxy if it's for a known type.
	  var resolvedType = resolveType(type);
	
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	
	  return createElement.apply(undefined, [resolvedType].concat(args));
	}
	patchedCreateElement.isPatchedByReactHotLoader = true;
	
	function patchedCreateFactory(type) {
	  // Patch React.createFactory to use patched createElement
	  // because the original implementation uses the internal,
	  // unpatched ReactElement.createElement
	  var factory = patchedCreateElement.bind(null, type);
	  factory.type = type;
	  return factory;
	}
	patchedCreateFactory.isPatchedByReactHotLoader = true;
	
	if (typeof global.__REACT_HOT_LOADER__ === 'undefined') {
	  React.createElement = patchedCreateElement;
	  React.createFactory = patchedCreateFactory;
	  global.__REACT_HOT_LOADER__ = hooks;
	}

/***/ },

/***/ 1:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(964);

/***/ },

/***/ 2:
/***/ function(module, exports) {

	module.exports = ___AGENCIA_AMIGA___;

/***/ },

/***/ "./node_modules/react-proxy/modules/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _supportsProtoAssignment = __webpack_require__("./node_modules/react-proxy/modules/supportsProtoAssignment.js");
	
	var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);
	
	var _createClassProxy = __webpack_require__("./node_modules/react-proxy/modules/createClassProxy.js");
	
	var _createClassProxy2 = _interopRequireDefault(_createClassProxy);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	if (!(0, _supportsProtoAssignment2.default)()) {
	  console.warn('This JavaScript environment does not support __proto__. ' + 'This means that react-proxy is unable to proxy React components. ' + 'Features that rely on react-proxy, such as react-transform-hmr, ' + 'will not function as expected.');
	}
	
	exports.default = _createClassProxy2.default;

/***/ },

/***/ "./node_modules/react-proxy/modules/supportsProtoAssignment.js":
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = supportsProtoAssignment;
	var x = {};
	var y = { supports: true };
	try {
	  x.__proto__ = y;
	} catch (err) {}
	
	function supportsProtoAssignment() {
	  return x.supports || false;
	};

/***/ },

/***/ "./node_modules/react-proxy/modules/createClassProxy.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	exports.default = createClassProxy;
	
	var _find = __webpack_require__(3);
	
	var _find2 = _interopRequireDefault(_find);
	
	var _createPrototypeProxy = __webpack_require__("./node_modules/react-proxy/modules/createPrototypeProxy.js");
	
	var _createPrototypeProxy2 = _interopRequireDefault(_createPrototypeProxy);
	
	var _bindAutoBindMethods = __webpack_require__("./node_modules/react-proxy/modules/bindAutoBindMethods.js");
	
	var _bindAutoBindMethods2 = _interopRequireDefault(_bindAutoBindMethods);
	
	var _deleteUnknownAutoBindMethods = __webpack_require__("./node_modules/react-proxy/modules/deleteUnknownAutoBindMethods.js");
	
	var _deleteUnknownAutoBindMethods2 = _interopRequireDefault(_deleteUnknownAutoBindMethods);
	
	var _supportsProtoAssignment = __webpack_require__("./node_modules/react-proxy/modules/supportsProtoAssignment.js");
	
	var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var RESERVED_STATICS = ['length', 'displayName', 'name', 'arguments', 'caller', 'prototype', 'toString'];
	
	function isEqualDescriptor(a, b) {
	  if (!a && !b) {
	    return true;
	  }
	  if (!a || !b) {
	    return false;
	  }
	  for (var key in a) {
	    if (a[key] !== b[key]) {
	      return false;
	    }
	  }
	  return true;
	}
	
	function getDisplayName(Component) {
	  var displayName = Component.displayName || Component.name;
	  return displayName && displayName !== 'ReactComponent' ? displayName : 'Unknown';
	}
	
	// This was originally a WeakMap but we had issues with React Native:
	// https://github.com/gaearon/react-proxy/issues/50#issuecomment-192928066
	var allProxies = [];
	function findProxy(Component) {
	  var pair = (0, _find2.default)(allProxies, function (_ref) {
	    var _ref2 = _slicedToArray(_ref, 1);
	
	    var key = _ref2[0];
	    return key === Component;
	  });
	  return pair ? pair[1] : null;
	}
	function addProxy(Component, proxy) {
	  allProxies.push([Component, proxy]);
	}
	
	function proxyClass(InitialComponent) {
	  // Prevent double wrapping.
	  // Given a proxy class, return the existing proxy managing it.
	  var existingProxy = findProxy(InitialComponent);
	  if (existingProxy) {
	    return existingProxy;
	  }
	
	  var CurrentComponent = undefined;
	  var ProxyComponent = undefined;
	  var savedDescriptors = {};
	
	  function instantiate(factory, context, params) {
	    var component = factory();
	
	    try {
	      return component.apply(context, params);
	    } catch (err) {
	      (function () {
	        // Native ES6 class instantiation
	        var instance = new (Function.prototype.bind.apply(component, [null].concat(_toConsumableArray(params))))();
	
	        Object.keys(instance).forEach(function (key) {
	          if (RESERVED_STATICS.indexOf(key) > -1) {
	            return;
	          }
	          context[key] = instance[key];
	        });
	      })();
	    }
	  }
	
	  var displayName = getDisplayName(InitialComponent);
	  try {
	    // Create a proxy constructor with matching name
	    ProxyComponent = new Function('factory', 'instantiate', 'return function ' + displayName + '() {\n         return instantiate(factory, this, arguments);\n      }')(function () {
	      return CurrentComponent;
	    }, instantiate);
	  } catch (err) {
	    // Some environments may forbid dynamic evaluation
	    ProxyComponent = function ProxyComponent() {
	      return instantiate(function () {
	        return CurrentComponent;
	      }, this, arguments);
	    };
	  }
	  try {
	    Object.defineProperty(ProxyComponent, 'name', {
	      value: displayName
	    });
	  } catch (err) {}
	
	  // Proxy toString() to the current constructor
	  ProxyComponent.toString = function toString() {
	    return CurrentComponent.toString();
	  };
	
	  var prototypeProxy = undefined;
	  if (InitialComponent.prototype && InitialComponent.prototype.isReactComponent) {
	    // Point proxy constructor to the proxy prototype
	    prototypeProxy = (0, _createPrototypeProxy2.default)();
	    ProxyComponent.prototype = prototypeProxy.get();
	  }
	
	  function update(NextComponent) {
	    if (typeof NextComponent !== 'function') {
	      throw new Error('Expected a constructor.');
	    }
	    if (NextComponent === CurrentComponent) {
	      return;
	    }
	
	    // Prevent proxy cycles
	    var existingProxy = findProxy(NextComponent);
	    if (existingProxy) {
	      return update(existingProxy.__getCurrent());
	    }
	
	    // Save the next constructor so we call it
	    var PreviousComponent = CurrentComponent;
	    CurrentComponent = NextComponent;
	
	    // Try to infer displayName
	    displayName = getDisplayName(NextComponent);
	    ProxyComponent.displayName = displayName;
	    try {
	      Object.defineProperty(ProxyComponent, 'name', {
	        value: displayName
	      });
	    } catch (err) {}
	
	    // Set up the same prototype for inherited statics
	    ProxyComponent.__proto__ = NextComponent.__proto__;
	
	    // Copy over static methods and properties added at runtime
	    if (PreviousComponent) {
	      Object.getOwnPropertyNames(PreviousComponent).forEach(function (key) {
	        if (RESERVED_STATICS.indexOf(key) > -1) {
	          return;
	        }
	
	        var prevDescriptor = Object.getOwnPropertyDescriptor(PreviousComponent, key);
	        var savedDescriptor = savedDescriptors[key];
	
	        if (!isEqualDescriptor(prevDescriptor, savedDescriptor)) {
	          Object.defineProperty(NextComponent, key, prevDescriptor);
	        }
	      });
	    }
	
	    // Copy newly defined static methods and properties
	    Object.getOwnPropertyNames(NextComponent).forEach(function (key) {
	      if (RESERVED_STATICS.indexOf(key) > -1) {
	        return;
	      }
	
	      var prevDescriptor = PreviousComponent && Object.getOwnPropertyDescriptor(PreviousComponent, key);
	      var savedDescriptor = savedDescriptors[key];
	
	      // Skip redefined descriptors
	      if (prevDescriptor && savedDescriptor && !isEqualDescriptor(savedDescriptor, prevDescriptor)) {
	        Object.defineProperty(NextComponent, key, prevDescriptor);
	        Object.defineProperty(ProxyComponent, key, prevDescriptor);
	        return;
	      }
	
	      if (prevDescriptor && !savedDescriptor) {
	        Object.defineProperty(ProxyComponent, key, prevDescriptor);
	        return;
	      }
	
	      var nextDescriptor = _extends({}, Object.getOwnPropertyDescriptor(NextComponent, key), {
	        configurable: true
	      });
	      savedDescriptors[key] = nextDescriptor;
	      Object.defineProperty(ProxyComponent, key, nextDescriptor);
	    });
	
	    // Remove static methods and properties that are no longer defined
	    Object.getOwnPropertyNames(ProxyComponent).forEach(function (key) {
	      if (RESERVED_STATICS.indexOf(key) > -1) {
	        return;
	      }
	      // Skip statics that exist on the next class
	      if (NextComponent.hasOwnProperty(key)) {
	        return;
	      }
	      // Skip non-configurable statics
	      var proxyDescriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
	      if (proxyDescriptor && !proxyDescriptor.configurable) {
	        return;
	      }
	
	      var prevDescriptor = PreviousComponent && Object.getOwnPropertyDescriptor(PreviousComponent, key);
	      var savedDescriptor = savedDescriptors[key];
	
	      // Skip redefined descriptors
	      if (prevDescriptor && savedDescriptor && !isEqualDescriptor(savedDescriptor, prevDescriptor)) {
	        return;
	      }
	
	      delete ProxyComponent[key];
	    });
	
	    if (prototypeProxy) {
	      // Update the prototype proxy with new methods
	      var mountedInstances = prototypeProxy.update(NextComponent.prototype);
	
	      // Set up the constructor property so accessing the statics work
	      ProxyComponent.prototype.constructor = NextComponent;
	
	      // We might have added new methods that need to be auto-bound
	      mountedInstances.forEach(_bindAutoBindMethods2.default);
	      mountedInstances.forEach(_deleteUnknownAutoBindMethods2.default);
	    }
	  };
	
	  function get() {
	    return ProxyComponent;
	  }
	
	  function getCurrent() {
	    return CurrentComponent;
	  }
	
	  update(InitialComponent);
	
	  var proxy = { get: get, update: update };
	  addProxy(ProxyComponent, proxy);
	
	  Object.defineProperty(proxy, '__getCurrent', {
	    configurable: false,
	    writable: false,
	    enumerable: false,
	    value: getCurrent
	  });
	
	  return proxy;
	}
	
	function createFallback(Component) {
	  var CurrentComponent = Component;
	
	  return {
	    get: function get() {
	      return CurrentComponent;
	    },
	    update: function update(NextComponent) {
	      CurrentComponent = NextComponent;
	    }
	  };
	}
	
	function createClassProxy(Component) {
	  return Component.__proto__ && (0, _supportsProtoAssignment2.default)() ? proxyClass(Component) : createFallback(Component);
	}

/***/ },

/***/ 3:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1895);

/***/ },

/***/ "./node_modules/react-proxy/modules/createPrototypeProxy.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createPrototypeProxy;
	
	var _assign = __webpack_require__(4);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _difference = __webpack_require__(5);
	
	var _difference2 = _interopRequireDefault(_difference);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function createPrototypeProxy() {
	  var proxy = {};
	  var current = null;
	  var mountedInstances = [];
	
	  /**
	   * Creates a proxied toString() method pointing to the current version's toString().
	   */
	  function proxyToString(name) {
	    // Wrap to always call the current version
	    return function toString() {
	      if (typeof current[name] === 'function') {
	        return current[name].toString();
	      } else {
	        return '<method was deleted>';
	      }
	    };
	  }
	
	  /**
	   * Creates a proxied method that calls the current version, whenever available.
	   */
	  function proxyMethod(name) {
	    // Wrap to always call the current version
	    var proxiedMethod = function proxiedMethod() {
	      if (typeof current[name] === 'function') {
	        return current[name].apply(this, arguments);
	      }
	    };
	
	    // Copy properties of the original function, if any
	    (0, _assign2.default)(proxiedMethod, current[name]);
	    proxiedMethod.toString = proxyToString(name);
	    try {
	      Object.defineProperty(proxiedMethod, 'name', {
	        value: name
	      });
	    } catch (err) {}
	
	    return proxiedMethod;
	  }
	
	  /**
	   * Augments the original componentDidMount with instance tracking.
	   */
	  function proxiedComponentDidMount() {
	    mountedInstances.push(this);
	    if (typeof current.componentDidMount === 'function') {
	      return current.componentDidMount.apply(this, arguments);
	    }
	  }
	  proxiedComponentDidMount.toString = proxyToString('componentDidMount');
	
	  /**
	   * Augments the original componentWillUnmount with instance tracking.
	   */
	  function proxiedComponentWillUnmount() {
	    var index = mountedInstances.indexOf(this);
	    // Unless we're in a weird environment without componentDidMount
	    if (index !== -1) {
	      mountedInstances.splice(index, 1);
	    }
	    if (typeof current.componentWillUnmount === 'function') {
	      return current.componentWillUnmount.apply(this, arguments);
	    }
	  }
	  proxiedComponentWillUnmount.toString = proxyToString('componentWillUnmount');
	
	  /**
	   * Defines a property on the proxy.
	   */
	  function defineProxyProperty(name, descriptor) {
	    Object.defineProperty(proxy, name, descriptor);
	  }
	
	  /**
	   * Defines a property, attempting to keep the original descriptor configuration.
	   */
	  function defineProxyPropertyWithValue(name, value) {
	    var _ref = Object.getOwnPropertyDescriptor(current, name) || {};
	
	    var _ref$enumerable = _ref.enumerable;
	    var enumerable = _ref$enumerable === undefined ? false : _ref$enumerable;
	    var _ref$writable = _ref.writable;
	    var writable = _ref$writable === undefined ? true : _ref$writable;
	
	
	    defineProxyProperty(name, {
	      configurable: true,
	      enumerable: enumerable,
	      writable: writable,
	      value: value
	    });
	  }
	
	  /**
	   * Creates an auto-bind map mimicking the original map, but directed at proxy.
	   */
	  function createAutoBindMap() {
	    if (!current.__reactAutoBindMap) {
	      return;
	    }
	
	    var __reactAutoBindMap = {};
	    for (var name in current.__reactAutoBindMap) {
	      if (typeof proxy[name] === 'function' && current.__reactAutoBindMap.hasOwnProperty(name)) {
	        __reactAutoBindMap[name] = proxy[name];
	      }
	    }
	
	    return __reactAutoBindMap;
	  }
	
	  /**
	   * Creates an auto-bind map mimicking the original map, but directed at proxy.
	   */
	  function createAutoBindPairs() {
	    var __reactAutoBindPairs = [];
	
	    for (var i = 0; i < current.__reactAutoBindPairs.length; i += 2) {
	      var name = current.__reactAutoBindPairs[i];
	      var method = proxy[name];
	
	      if (typeof method === 'function') {
	        __reactAutoBindPairs.push(name, method);
	      }
	    }
	
	    return __reactAutoBindPairs;
	  }
	
	  /**
	   * Applies the updated prototype.
	   */
	  function update(next) {
	    // Save current source of truth
	    current = next;
	
	    // Find changed property names
	    var currentNames = Object.getOwnPropertyNames(current);
	    var previousName = Object.getOwnPropertyNames(proxy);
	    var removedNames = (0, _difference2.default)(previousName, currentNames);
	
	    // Remove properties and methods that are no longer there
	    removedNames.forEach(function (name) {
	      delete proxy[name];
	    });
	
	    // Copy every descriptor
	    currentNames.forEach(function (name) {
	      var descriptor = Object.getOwnPropertyDescriptor(current, name);
	      if (typeof descriptor.value === 'function') {
	        // Functions require additional wrapping so they can be bound later
	        defineProxyPropertyWithValue(name, proxyMethod(name));
	      } else {
	        // Other values can be copied directly
	        defineProxyProperty(name, descriptor);
	      }
	    });
	
	    // Track mounting and unmounting
	    defineProxyPropertyWithValue('componentDidMount', proxiedComponentDidMount);
	    defineProxyPropertyWithValue('componentWillUnmount', proxiedComponentWillUnmount);
	
	    if (current.hasOwnProperty('__reactAutoBindMap')) {
	      defineProxyPropertyWithValue('__reactAutoBindMap', createAutoBindMap());
	    }
	
	    if (current.hasOwnProperty('__reactAutoBindPairs')) {
	      defineProxyPropertyWithValue('__reactAutoBindPairs', createAutoBindPairs());
	    }
	
	    // Set up the prototype chain
	    proxy.__proto__ = next;
	
	    return mountedInstances;
	  }
	
	  /**
	   * Returns the up-to-date proxy prototype.
	   */
	  function get() {
	    return proxy;
	  }
	
	  return {
	    update: update,
	    get: get
	  };
	};

/***/ },

/***/ 4:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(2106);

/***/ },

/***/ 5:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1565);

/***/ },

/***/ "./node_modules/react-proxy/modules/bindAutoBindMethods.js":
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = bindAutoBindMethods;
	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of React source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Original:
	 * https://github.com/facebook/react/blob/6508b1ad273a6f371e8d90ae676e5390199461b4/src/isomorphic/classic/class/ReactClass.js#L650-L713
	 */
	
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	
	  boundMethod.__reactBoundContext = component;
	  boundMethod.__reactBoundMethod = method;
	  boundMethod.__reactBoundArguments = null;
	
	  var componentName = component.constructor.displayName,
	      _bind = boundMethod.bind;
	
	  boundMethod.bind = function (newThis) {
	    var args = Array.prototype.slice.call(arguments, 1);
	    if (newThis !== component && newThis !== null) {
	      console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);
	    } else if (!args.length) {
	      console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);
	      return boundMethod;
	    }
	
	    var reboundMethod = _bind.apply(boundMethod, arguments);
	    reboundMethod.__reactBoundContext = component;
	    reboundMethod.__reactBoundMethod = method;
	    reboundMethod.__reactBoundArguments = args;
	
	    return reboundMethod;
	  };
	
	  return boundMethod;
	}
	
	function bindAutoBindMethodsFromMap(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (!component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      return;
	    }
	
	    // Tweak: skip methods that are already bound.
	    // This is to preserve method reference in case it is used
	    // as a subscription handler that needs to be detached later.
	    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
	      continue;
	    }
	
	    var method = component.__reactAutoBindMap[autoBindKey];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	function bindAutoBindMethods(component) {
	  if (component.__reactAutoBindPairs) {
	    bindAutoBindMethodsFromArray(component);
	  } else if (component.__reactAutoBindMap) {
	    bindAutoBindMethodsFromMap(component);
	  }
	}
	
	function bindAutoBindMethodsFromArray(component) {
	  var pairs = component.__reactAutoBindPairs;
	
	  if (!pairs) {
	    return;
	  }
	
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	
	    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
	      continue;
	    }
	
	    var method = pairs[i + 1];
	
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

/***/ },

/***/ "./node_modules/react-proxy/modules/deleteUnknownAutoBindMethods.js":
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = deleteUnknownAutoBindMethods;
	function shouldDeleteClassicInstanceMethod(component, name) {
	  if (component.__reactAutoBindMap && component.__reactAutoBindMap.hasOwnProperty(name)) {
	    // It's a known autobound function, keep it
	    return false;
	  }
	
	  if (component.__reactAutoBindPairs && component.__reactAutoBindPairs.indexOf(name) >= 0) {
	    // It's a known autobound function, keep it
	    return false;
	  }
	
	  if (component[name].__reactBoundArguments !== null) {
	    // It's a function bound to specific args, keep it
	    return false;
	  }
	
	  // It's a cached bound method for a function
	  // that was deleted by user, so we delete it from component.
	  return true;
	}
	
	function shouldDeleteModernInstanceMethod(component, name) {
	  var prototype = component.constructor.prototype;
	
	  var prototypeDescriptor = Object.getOwnPropertyDescriptor(prototype, name);
	
	  if (!prototypeDescriptor || !prototypeDescriptor.get) {
	    // This is definitely not an autobinding getter
	    return false;
	  }
	
	  if (prototypeDescriptor.get().length !== component[name].length) {
	    // The length doesn't match, bail out
	    return false;
	  }
	
	  // This seems like a method bound using an autobinding getter on the prototype
	  // Hopefully we won't run into too many false positives.
	  return true;
	}
	
	function shouldDeleteInstanceMethod(component, name) {
	  var descriptor = Object.getOwnPropertyDescriptor(component, name);
	  if (typeof descriptor.value !== 'function') {
	    // Not a function, or something fancy: bail out
	    return;
	  }
	
	  if (component.__reactAutoBindMap || component.__reactAutoBindPairs) {
	    // Classic
	    return shouldDeleteClassicInstanceMethod(component, name);
	  } else {
	    // Modern
	    return shouldDeleteModernInstanceMethod(component, name);
	  }
	}
	
	/**
	 * Deletes autobound methods from the instance.
	 *
	 * For classic React classes, we only delete the methods that no longer exist in map.
	 * This means the user actually deleted them in code.
	 *
	 * For modern classes, we delete methods that exist on prototype with the same length,
	 * and which have getters on prototype, but are normal values on the instance.
	 * This is usually an indication that an autobinding decorator is being used,
	 * and the getter will re-generate the memoized handler on next access.
	 */
	function deleteUnknownAutoBindMethods(component) {
	  var names = Object.getOwnPropertyNames(component);
	
	  names.forEach(function (name) {
	    if (shouldDeleteInstanceMethod(component, name)) {
	      delete component[name];
	    }
	  });
	}

/***/ },

/***/ "./node_modules/global/window.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {if (typeof window !== "undefined") {
	    module.exports = window;
	} else if (typeof global !== "undefined") {
	    module.exports = global;
	} else if (typeof self !== "undefined"){
	    module.exports = self;
	} else {
	    module.exports = {};
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/webpack-dev-server/client/index.js?http:/localhost:4000":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__resourceQuery) {var url = __webpack_require__("./node_modules/url/url.js");
	var stripAnsi = __webpack_require__("./node_modules/strip-ansi/index.js");
	var socket = __webpack_require__("./node_modules/webpack-dev-server/client/socket.js");
	
	function getCurrentScriptSource() {
		// `document.currentScript` is the most accurate way to find the current script,
		// but is not supported in all browsers.
		if(document.currentScript)
			return document.currentScript.getAttribute("src");
		// Fall back to getting all scripts in the document.
		var scriptElements = document.scripts || [];
		var currentScript = scriptElements[scriptElements.length - 1];
		if(currentScript)
			return currentScript.getAttribute("src");
		// Fail as there was no script to use.
		throw new Error("[WDS] Failed to get current script source");
	}
	
	var urlParts;
	if(true) {
		// If this bundle is inlined, use the resource query to get the correct url.
		urlParts = url.parse(__resourceQuery.substr(1));
	} else {
		// Else, get the url from the <script> this file was called with.
		var scriptHost = getCurrentScriptSource();
		scriptHost = scriptHost.replace(/\/[^\/]+$/, "");
		urlParts = url.parse((scriptHost ? scriptHost : "/"), false, true);
	}
	
	var hot = false;
	var initial = true;
	var currentHash = "";
	var logLevel = "info";
	
	function log(level, msg) {
		if(logLevel === "info" && level === "info")
			return console.log(msg);
		if(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning")
			return console.warn(msg);
		if(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error")
			return console.error(msg);
	}
	
	var onSocketMsg = {
		hot: function() {
			hot = true;
			log("info", "[WDS] Hot Module Replacement enabled.");
		},
		invalid: function() {
			log("info", "[WDS] App updated. Recompiling...");
		},
		hash: function(hash) {
			currentHash = hash;
		},
		"still-ok": function() {
			log("info", "[WDS] Nothing changed.")
		},
		"log-level": function(level) {
			logLevel = level;
		},
		ok: function() {
			if(initial) return initial = false;
			reloadApp();
		},
		warnings: function(warnings) {
			log("info", "[WDS] Warnings while compiling.");
			for(var i = 0; i < warnings.length; i++)
				console.warn(stripAnsi(warnings[i]));
			if(initial) return initial = false;
			reloadApp();
		},
		errors: function(errors) {
			log("info", "[WDS] Errors while compiling.");
			for(var i = 0; i < errors.length; i++)
				console.error(stripAnsi(errors[i]));
			if(initial) return initial = false;
			reloadApp();
		},
		"proxy-error": function(errors) {
			log("info", "[WDS] Proxy error.");
			for(var i = 0; i < errors.length; i++)
				log("error", stripAnsi(errors[i]));
			if(initial) return initial = false;
		},
		close: function() {
			log("error", "[WDS] Disconnected!");
		}
	};
	
	var hostname = urlParts.hostname;
	var protocol = urlParts.protocol;
	
	if(urlParts.hostname === '0.0.0.0') {
		// why do we need this check?
		// hostname n/a for file protocol (example, when using electron, ionic)
		// see: https://github.com/webpack/webpack-dev-server/pull/384
		if(window.location.hostname && !!~window.location.protocol.indexOf('http')) {
			hostname = window.location.hostname;
		}
	}
	
	// `hostname` can be empty when the script path is relative. In that case, specifying
	// a protocol would result in an invalid URL.
	// When https is used in the app, secure websockets are always necessary
	// because the browser doesn't accept non-secure websockets.
	if(hostname && (window.location.protocol === "https:" || urlParts.hostname === '0.0.0.0')) {
		protocol = window.location.protocol;
	}
	
	var socketUrl = url.format({
		protocol: protocol,
		auth: urlParts.auth,
		hostname: hostname,
		port: (urlParts.port === '0') ? window.location.port : urlParts.port,
		pathname: urlParts.path == null || urlParts.path === '/' ? "/sockjs-node" : urlParts.path
	});
	
	socket(socketUrl, onSocketMsg);
	
	function reloadApp() {
		if(hot) {
			log("info", "[WDS] App hot update...");
			window.postMessage("webpackHotUpdate" + currentHash, "*");
		} else {
			log("info", "[WDS] App updated. Reloading...");
			window.location.reload();
		}
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, "?http://localhost:4000"))

/***/ },

/***/ "./node_modules/url/url.js":
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var punycode = __webpack_require__("./node_modules/url/node_modules/punycode/punycode.js");
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__("./node_modules/querystring/index.js");
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	function isString(arg) {
	  return typeof arg === "string";
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },

/***/ "./node_modules/url/node_modules/punycode/punycode.js":
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module), (function() { return this; }())))

/***/ },

/***/ 6:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(3);

/***/ },

/***/ "./node_modules/querystring/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__("./node_modules/querystring/decode.js");
	exports.encode = exports.stringify = __webpack_require__("./node_modules/querystring/encode.js");


/***/ },

/***/ "./node_modules/querystring/decode.js":
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },

/***/ "./node_modules/querystring/encode.js":
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },

/***/ "./node_modules/strip-ansi/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ansiRegex = __webpack_require__("./node_modules/ansi-regex/index.js")();
	
	module.exports = function (str) {
		return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
	};


/***/ },

/***/ "./node_modules/ansi-regex/index.js":
/***/ function(module, exports) {

	'use strict';
	module.exports = function () {
		return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
	};


/***/ },

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/***/ function(module, exports, __webpack_require__) {

	var SockJS = __webpack_require__("./node_modules/sockjs-client/lib/entry.js");
	
	var retries = 0;
	var sock = null;
	
	function socket(url, handlers) {
		sock = new SockJS(url);
	
		sock.onopen = function() {
			retries = 0;
		}
	
		sock.onclose = function() {
			if(retries === 0)
				handlers.close();
	
			// Try to reconnect.
			sock = null;
	
			// After 10 retries stop trying, to prevent logspam.
			if(retries <= 10) {
				// Exponentially increase timeout to reconnect.
				// Respectfully copied from the package `got`.
				var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
				retries += 1;
	
				setTimeout(function() {
					socket(url, handlers);
				}, retryInMs);
			}
		};
	
		sock.onmessage = function(e) {
			// This assumes that all data sent via the websocket is JSON.
			var msg = JSON.parse(e.data);
			if(handlers[msg.type])
				handlers[msg.type](msg.data);
		};
	}
	
	module.exports = socket;


/***/ },

/***/ "./node_modules/sockjs-client/lib/entry.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var transportList = __webpack_require__("./node_modules/sockjs-client/lib/transport-list.js");
	
	module.exports = __webpack_require__("./node_modules/sockjs-client/lib/main.js")(transportList);
	
	// TODO can't get rid of this until all servers do
	if ('_sockjs_onload' in global) {
	  setTimeout(global._sockjs_onload, 1);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport-list.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = [
	  // streaming transports
	  __webpack_require__("./node_modules/sockjs-client/lib/transport/websocket.js")
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/xhr-streaming.js")
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/xdr-streaming.js")
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/eventsource.js")
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js")(__webpack_require__("./node_modules/sockjs-client/lib/transport/eventsource.js"))
	
	  // polling transports
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/htmlfile.js")
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js")(__webpack_require__("./node_modules/sockjs-client/lib/transport/htmlfile.js"))
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/xhr-polling.js")
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/xdr-polling.js")
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js")(__webpack_require__("./node_modules/sockjs-client/lib/transport/xhr-polling.js"))
	, __webpack_require__("./node_modules/sockjs-client/lib/transport/jsonp-polling.js")
	];


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/websocket.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , WebsocketDriver = __webpack_require__("./node_modules/sockjs-client/lib/transport/browser/websocket.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:websocket');
	}
	
	function WebSocketTransport(transUrl, ignore, options) {
	  if (!WebSocketTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	
	  EventEmitter.call(this);
	  debug('constructor', transUrl);
	
	  var self = this;
	  var url = urlUtils.addPath(transUrl, '/websocket');
	  if (url.slice(0, 5) === 'https') {
	    url = 'wss' + url.slice(5);
	  } else {
	    url = 'ws' + url.slice(4);
	  }
	  this.url = url;
	
	  this.ws = new WebsocketDriver(this.url, [], options);
	  this.ws.onmessage = function(e) {
	    debug('message event', e.data);
	    self.emit('message', e.data);
	  };
	  // Firefox has an interesting bug. If a websocket connection is
	  // created after onunload, it stays alive even when user
	  // navigates away from the page. In such situation let's lie -
	  // let's not open the ws connection at all. See:
	  // https://github.com/sockjs/sockjs-client/issues/28
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
	  this.unloadRef = utils.unloadAdd(function() {
	    debug('unload');
	    self.ws.close();
	  });
	  this.ws.onclose = function(e) {
	    debug('close event', e.code, e.reason);
	    self.emit('close', e.code, e.reason);
	    self._cleanup();
	  };
	  this.ws.onerror = function(e) {
	    debug('error event', e);
	    self.emit('close', 1006, 'WebSocket connection broken');
	    self._cleanup();
	  };
	}
	
	inherits(WebSocketTransport, EventEmitter);
	
	WebSocketTransport.prototype.send = function(data) {
	  var msg = '[' + data + ']';
	  debug('send', msg);
	  this.ws.send(msg);
	};
	
	WebSocketTransport.prototype.close = function() {
	  debug('close');
	  if (this.ws) {
	    this.ws.close();
	  }
	  this._cleanup();
	};
	
	WebSocketTransport.prototype._cleanup = function() {
	  debug('_cleanup');
	  var ws = this.ws;
	  if (ws) {
	    ws.onmessage = ws.onclose = ws.onerror = null;
	  }
	  utils.unloadDel(this.unloadRef);
	  this.unloadRef = this.ws = null;
	  this.removeAllListeners();
	};
	
	WebSocketTransport.enabled = function() {
	  debug('enabled');
	  return !!WebsocketDriver;
	};
	WebSocketTransport.transportName = 'websocket';
	
	// In theory, ws should require 1 round trip. But in chrome, this is
	// not very stable over SSL. Most likely a ws connection requires a
	// separate SSL connection, in which case 2 round trips are an
	// absolute minumum.
	WebSocketTransport.roundTrips = 2;
	
	module.exports = WebSocketTransport;


/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/event.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var random = __webpack_require__("./node_modules/sockjs-client/lib/utils/random.js");
	
	var onUnload = {}
	  , afterUnload = false
	    // detect google chrome packaged apps because they don't allow the 'unload' event
	  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
	  ;
	
	module.exports = {
	  attachEvent: function(event, listener) {
	    if (typeof global.addEventListener !== 'undefined') {
	      global.addEventListener(event, listener, false);
	    } else if (global.document && global.attachEvent) {
	      // IE quirks.
	      // According to: http://stevesouders.com/misc/test-postmessage.php
	      // the message gets delivered only to 'document', not 'window'.
	      global.document.attachEvent('on' + event, listener);
	      // I get 'window' for ie8.
	      global.attachEvent('on' + event, listener);
	    }
	  }
	
	, detachEvent: function(event, listener) {
	    if (typeof global.addEventListener !== 'undefined') {
	      global.removeEventListener(event, listener, false);
	    } else if (global.document && global.detachEvent) {
	      global.document.detachEvent('on' + event, listener);
	      global.detachEvent('on' + event, listener);
	    }
	  }
	
	, unloadAdd: function(listener) {
	    if (isChromePackagedApp) {
	      return null;
	    }
	
	    var ref = random.string(8);
	    onUnload[ref] = listener;
	    if (afterUnload) {
	      setTimeout(this.triggerUnloadCallbacks, 0);
	    }
	    return ref;
	  }
	
	, unloadDel: function(ref) {
	    if (ref in onUnload) {
	      delete onUnload[ref];
	    }
	  }
	
	, triggerUnloadCallbacks: function() {
	    for (var ref in onUnload) {
	      onUnload[ref]();
	      delete onUnload[ref];
	    }
	  }
	};
	
	var unloadTriggered = function() {
	  if (afterUnload) {
	    return;
	  }
	  afterUnload = true;
	  module.exports.triggerUnloadCallbacks();
	};
	
	// 'unload' alone is not reliable in opera within an iframe, but we
	// can't use `beforeunload` as IE fires it on javascript: links.
	if (!isChromePackagedApp) {
	  module.exports.attachEvent('unload', unloadTriggered);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/random.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/* global crypto:true */
	var crypto = __webpack_require__("./node_modules/sockjs-client/lib/utils/browser-crypto.js");
	
	// This string has length 32, a power of 2, so the modulus doesn't introduce a
	// bias.
	var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
	module.exports = {
	  string: function(length) {
	    var max = _randomStringChars.length;
	    var bytes = crypto.randomBytes(length);
	    var ret = [];
	    for (var i = 0; i < length; i++) {
	      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
	    }
	    return ret.join('');
	  }
	
	, number: function(max) {
	    return Math.floor(Math.random() * max);
	  }
	
	, numberString: function(max) {
	    var t = ('' + (max - 1)).length;
	    var p = new Array(t + 1).join('0');
	    return (p + this.number(max)).slice(-t);
	  }
	};


/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/browser-crypto.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	if (global.crypto && global.crypto.getRandomValues) {
	  module.exports.randomBytes = function(length) {
	    var bytes = new Uint8Array(length);
	    global.crypto.getRandomValues(bytes);
	    return bytes;
	  };
	} else {
	  module.exports.randomBytes = function(length) {
	    var bytes = new Array(length);
	    for (var i = 0; i < length; i++) {
	      bytes[i] = Math.floor(Math.random() * 256);
	    }
	    return bytes;
	  };
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/url.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var URL = __webpack_require__("./node_modules/url-parse/index.js");
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:utils:url');
	}
	
	module.exports = {
	  getOrigin: function(url) {
	    if (!url) {
	      return null;
	    }
	
	    var p = new URL(url);
	    if (p.protocol === 'file:') {
	      return null;
	    }
	
	    var port = p.port;
	    if (!port) {
	      port = (p.protocol === 'https:') ? '443' : '80';
	    }
	
	    return p.protocol + '//' + p.hostname + ':' + port;
	  }
	
	, isOriginEqual: function(a, b) {
	    var res = this.getOrigin(a) === this.getOrigin(b);
	    debug('same', a, b, res);
	    return res;
	  }
	
	, isSchemeEqual: function(a, b) {
	    return (a.split(':')[0] === b.split(':')[0]);
	  }
	
	, addPath: function (url, path) {
	    var qs = url.split('?');
	    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
	  }
	
	, addQuery: function (url, q) {
	    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
	  }
	};


/***/ },

/***/ "./node_modules/url-parse/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var required = __webpack_require__("./node_modules/requires-port/index.js")
	  , lolcation = __webpack_require__("./node_modules/url-parse/lolcation.js")
	  , qs = __webpack_require__("./node_modules/querystringify/index.js")
	  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i;
	
	/**
	 * These are the parse rules for the URL parser, it informs the parser
	 * about:
	 *
	 * 0. The char it Needs to parse, if it's a string it should be done using
	 *    indexOf, RegExp using exec and NaN means set as current value.
	 * 1. The property we should set when parsing this value.
	 * 2. Indication if it's backwards or forward parsing, when set as number it's
	 *    the value of extra chars that should be split off.
	 * 3. Inherit from location if non existing in the parser.
	 * 4. `toLowerCase` the resulting value.
	 */
	var rules = [
	  ['#', 'hash'],                        // Extract from the back.
	  ['?', 'query'],                       // Extract from the back.
	  ['/', 'pathname'],                    // Extract from the back.
	  ['@', 'auth', 1],                     // Extract from the front.
	  [NaN, 'host', undefined, 1, 1],       // Set left over value.
	  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
	  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
	];
	
	/**
	 * @typedef ProtocolExtract
	 * @type Object
	 * @property {String} protocol Protocol matched in the URL, in lowercase.
	 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
	 * @property {String} rest Rest of the URL that is not part of the protocol.
	 */
	
	/**
	 * Extract protocol information from a URL with/without double slash ("//").
	 *
	 * @param {String} address URL we want to extract from.
	 * @return {ProtocolExtract} Extracted information.
	 * @api private
	 */
	function extractProtocol(address) {
	  var match = protocolre.exec(address);
	
	  return {
	    protocol: match[1] ? match[1].toLowerCase() : '',
	    slashes: !!match[2],
	    rest: match[3]
	  };
	}
	
	/**
	 * Resolve a relative URL pathname against a base URL pathname.
	 *
	 * @param {String} relative Pathname of the relative URL.
	 * @param {String} base Pathname of the base URL.
	 * @return {String} Resolved pathname.
	 * @api private
	 */
	function resolve(relative, base) {
	  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
	    , i = path.length
	    , last = path[i - 1]
	    , unshift = false
	    , up = 0;
	
	  while (i--) {
	    if (path[i] === '.') {
	      path.splice(i, 1);
	    } else if (path[i] === '..') {
	      path.splice(i, 1);
	      up++;
	    } else if (up) {
	      if (i === 0) unshift = true;
	      path.splice(i, 1);
	      up--;
	    }
	  }
	
	  if (unshift) path.unshift('');
	  if (last === '.' || last === '..') path.push('');
	
	  return path.join('/');
	}
	
	/**
	 * The actual URL instance. Instead of returning an object we've opted-in to
	 * create an actual constructor as it's much more memory efficient and
	 * faster and it pleases my OCD.
	 *
	 * @constructor
	 * @param {String} address URL we want to parse.
	 * @param {Object|String} location Location defaults for relative paths.
	 * @param {Boolean|Function} parser Parser for the query string.
	 * @api public
	 */
	function URL(address, location, parser) {
	  if (!(this instanceof URL)) {
	    return new URL(address, location, parser);
	  }
	
	  var relative, extracted, parse, instruction, index, key
	    , instructions = rules.slice()
	    , type = typeof location
	    , url = this
	    , i = 0;
	
	  //
	  // The following if statements allows this module two have compatibility with
	  // 2 different API:
	  //
	  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
	  //    where the boolean indicates that the query string should also be parsed.
	  //
	  // 2. The `URL` interface of the browser which accepts a URL, object as
	  //    arguments. The supplied object will be used as default values / fall-back
	  //    for relative paths.
	  //
	  if ('object' !== type && 'string' !== type) {
	    parser = location;
	    location = null;
	  }
	
	  if (parser && 'function' !== typeof parser) parser = qs.parse;
	
	  location = lolcation(location);
	
	  //
	  // Extract protocol information before running the instructions.
	  //
	  extracted = extractProtocol(address || '');
	  relative = !extracted.protocol && !extracted.slashes;
	  url.slashes = extracted.slashes || relative && location.slashes;
	  url.protocol = extracted.protocol || location.protocol || '';
	  address = extracted.rest;
	
	  //
	  // When the authority component is absent the URL starts with a path
	  // component.
	  //
	  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];
	
	  for (; i < instructions.length; i++) {
	    instruction = instructions[i];
	    parse = instruction[0];
	    key = instruction[1];
	
	    if (parse !== parse) {
	      url[key] = address;
	    } else if ('string' === typeof parse) {
	      if (~(index = address.indexOf(parse))) {
	        if ('number' === typeof instruction[2]) {
	          url[key] = address.slice(0, index);
	          address = address.slice(index + instruction[2]);
	        } else {
	          url[key] = address.slice(index);
	          address = address.slice(0, index);
	        }
	      }
	    } else if (index = parse.exec(address)) {
	      url[key] = index[1];
	      address = address.slice(0, index.index);
	    }
	
	    url[key] = url[key] || (
	      relative && instruction[3] ? location[key] || '' : ''
	    );
	
	    //
	    // Hostname, host and protocol should be lowercased so they can be used to
	    // create a proper `origin`.
	    //
	    if (instruction[4]) url[key] = url[key].toLowerCase();
	  }
	
	  //
	  // Also parse the supplied query string in to an object. If we're supplied
	  // with a custom parser as function use that instead of the default build-in
	  // parser.
	  //
	  if (parser) url.query = parser(url.query);
	
	  //
	  // If the URL is relative, resolve the pathname against the base URL.
	  //
	  if (
	      relative
	    && location.slashes
	    && url.pathname.charAt(0) !== '/'
	    && (url.pathname !== '' || location.pathname !== '')
	  ) {
	    url.pathname = resolve(url.pathname, location.pathname);
	  }
	
	  //
	  // We should not add port numbers if they are already the default port number
	  // for a given protocol. As the host also contains the port number we're going
	  // override it with the hostname which contains no port number.
	  //
	  if (!required(url.port, url.protocol)) {
	    url.host = url.hostname;
	    url.port = '';
	  }
	
	  //
	  // Parse down the `auth` for the username and password.
	  //
	  url.username = url.password = '';
	  if (url.auth) {
	    instruction = url.auth.split(':');
	    url.username = instruction[0] || '';
	    url.password = instruction[1] || '';
	  }
	
	  url.origin = url.protocol && url.host && url.protocol !== 'file:'
	    ? url.protocol +'//'+ url.host
	    : 'null';
	
	  //
	  // The href is just the compiled result.
	  //
	  url.href = url.toString();
	}
	
	/**
	 * This is convenience method for changing properties in the URL instance to
	 * insure that they all propagate correctly.
	 *
	 * @param {String} part          Property we need to adjust.
	 * @param {Mixed} value          The newly assigned value.
	 * @param {Boolean|Function} fn  When setting the query, it will be the function
	 *                               used to parse the query.
	 *                               When setting the protocol, double slash will be
	 *                               removed from the final url if it is true.
	 * @returns {URL}
	 * @api public
	 */
	URL.prototype.set = function set(part, value, fn) {
	  var url = this;
	
	  switch (part) {
	    case 'query':
	      if ('string' === typeof value && value.length) {
	        value = (fn || qs.parse)(value);
	      }
	
	      url[part] = value;
	      break;
	
	    case 'port':
	      url[part] = value;
	
	      if (!required(value, url.protocol)) {
	        url.host = url.hostname;
	        url[part] = '';
	      } else if (value) {
	        url.host = url.hostname +':'+ value;
	      }
	
	      break;
	
	    case 'hostname':
	      url[part] = value;
	
	      if (url.port) value += ':'+ url.port;
	      url.host = value;
	      break;
	
	    case 'host':
	      url[part] = value;
	
	      if (/:\d+$/.test(value)) {
	        value = value.split(':');
	        url.port = value.pop();
	        url.hostname = value.join(':');
	      } else {
	        url.hostname = value;
	        url.port = '';
	      }
	
	      break;
	
	    case 'protocol':
	      url.protocol = value.toLowerCase();
	      url.slashes = !fn;
	      break;
	
	    case 'pathname':
	      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;
	
	      break;
	
	    default:
	      url[part] = value;
	  }
	
	  for (var i = 0; i < rules.length; i++) {
	    var ins = rules[i];
	
	    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
	  }
	
	  url.origin = url.protocol && url.host && url.protocol !== 'file:'
	    ? url.protocol +'//'+ url.host
	    : 'null';
	
	  url.href = url.toString();
	
	  return url;
	};
	
	/**
	 * Transform the properties back in to a valid and full URL string.
	 *
	 * @param {Function} stringify Optional query stringify function.
	 * @returns {String}
	 * @api public
	 */
	URL.prototype.toString = function toString(stringify) {
	  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
	
	  var query
	    , url = this
	    , protocol = url.protocol;
	
	  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
	
	  var result = protocol + (url.slashes ? '//' : '');
	
	  if (url.username) {
	    result += url.username;
	    if (url.password) result += ':'+ url.password;
	    result += '@';
	  }
	
	  result += url.host + url.pathname;
	
	  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
	  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;
	
	  if (url.hash) result += url.hash;
	
	  return result;
	};
	
	//
	// Expose the URL parser and some additional properties that might be useful for
	// others or testing.
	//
	URL.extractProtocol = extractProtocol;
	URL.location = lolcation;
	URL.qs = qs;
	
	module.exports = URL;


/***/ },

/***/ "./node_modules/requires-port/index.js":
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Check if we're required to add a port number.
	 *
	 * @see https://url.spec.whatwg.org/#default-port
	 * @param {Number|String} port Port number we need to check
	 * @param {String} protocol Protocol we need to check against.
	 * @returns {Boolean} Is it a default port for the given protocol
	 * @api private
	 */
	module.exports = function required(port, protocol) {
	  protocol = protocol.split(':')[0];
	  port = +port;
	
	  if (!port) return false;
	
	  switch (protocol) {
	    case 'http':
	    case 'ws':
	    return port !== 80;
	
	    case 'https':
	    case 'wss':
	    return port !== 443;
	
	    case 'ftp':
	    return port !== 21;
	
	    case 'gopher':
	    return port !== 70;
	
	    case 'file':
	    return false;
	  }
	
	  return port !== 0;
	};


/***/ },

/***/ "./node_modules/url-parse/lolcation.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
	
	/**
	 * These properties should not be copied or inherited from. This is only needed
	 * for all non blob URL's as a blob URL does not include a hash, only the
	 * origin.
	 *
	 * @type {Object}
	 * @private
	 */
	var ignore = { hash: 1, query: 1 }
	  , URL;
	
	/**
	 * The location object differs when your code is loaded through a normal page,
	 * Worker or through a worker using a blob. And with the blobble begins the
	 * trouble as the location object will contain the URL of the blob, not the
	 * location of the page where our code is loaded in. The actual origin is
	 * encoded in the `pathname` so we can thankfully generate a good "default"
	 * location from it so we can generate proper relative URL's again.
	 *
	 * @param {Object|String} loc Optional default location object.
	 * @returns {Object} lolcation object.
	 * @api public
	 */
	module.exports = function lolcation(loc) {
	  loc = loc || global.location || {};
	  URL = URL || __webpack_require__("./node_modules/url-parse/index.js");
	
	  var finaldestination = {}
	    , type = typeof loc
	    , key;
	
	  if ('blob:' === loc.protocol) {
	    finaldestination = new URL(unescape(loc.pathname), {});
	  } else if ('string' === type) {
	    finaldestination = new URL(loc, {});
	    for (key in ignore) delete finaldestination[key];
	  } else if ('object' === type) {
	    for (key in loc) {
	      if (key in ignore) continue;
	      finaldestination[key] = loc[key];
	    }
	
	    if (finaldestination.slashes === undefined) {
	      finaldestination.slashes = slashes.test(loc.href);
	    }
	  }
	
	  return finaldestination;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/querystringify/index.js":
/***/ function(module, exports) {

	'use strict';
	
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * Simple query string parser.
	 *
	 * @param {String} query The query string that needs to be parsed.
	 * @returns {Object}
	 * @api public
	 */
	function querystring(query) {
	  var parser = /([^=?&]+)=?([^&]*)/g
	    , result = {}
	    , part;
	
	  //
	  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
	  // the lastIndex property so we can continue executing this loop until we've
	  // parsed all results.
	  //
	  for (;
	    part = parser.exec(query);
	    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])
	  );
	
	  return result;
	}
	
	/**
	 * Transform a query string to an object.
	 *
	 * @param {Object} obj Object that should be transformed.
	 * @param {String} prefix Optional prefix.
	 * @returns {String}
	 * @api public
	 */
	function querystringify(obj, prefix) {
	  prefix = prefix || '';
	
	  var pairs = [];
	
	  //
	  // Optionally prefix with a '?' if needed
	  //
	  if ('string' !== typeof prefix) prefix = '?';
	
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
	    }
	  }
	
	  return pairs.length ? prefix + pairs.join('&') : '';
	}
	
	//
	// Expose the module.
	//
	exports.stringify = querystringify;
	exports.parse = querystring;


/***/ },

/***/ "./node_modules/debug/browser.js":
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__("./node_modules/debug/debug.js");
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },

/***/ "./node_modules/debug/debug.js":
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__("./node_modules/ms/index.js");
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },

/***/ "./node_modules/ms/index.js":
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },

/***/ "./node_modules/inherits/inherits_browser.js":
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },

/***/ "./node_modules/sockjs-client/lib/event/emitter.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventTarget = __webpack_require__("./node_modules/sockjs-client/lib/event/eventtarget.js")
	  ;
	
	function EventEmitter() {
	  EventTarget.call(this);
	}
	
	inherits(EventEmitter, EventTarget);
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  if (type) {
	    delete this._listeners[type];
	  } else {
	    this._listeners = {};
	  }
	};
	
	EventEmitter.prototype.once = function(type, listener) {
	  var self = this
	    , fired = false;
	
	  function g() {
	    self.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  this.on(type, g);
	};
	
	EventEmitter.prototype.emit = function() {
	  var type = arguments[0];
	  var listeners = this._listeners[type];
	  if (!listeners) {
	    return;
	  }
	  // equivalent of Array.prototype.slice.call(arguments, 1);
	  var l = arguments.length;
	  var args = new Array(l - 1);
	  for (var ai = 1; ai < l; ai++) {
	    args[ai - 1] = arguments[ai];
	  }
	  for (var i = 0; i < listeners.length; i++) {
	    listeners[i].apply(this, args);
	  }
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
	EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;
	
	module.exports.EventEmitter = EventEmitter;


/***/ },

/***/ "./node_modules/sockjs-client/lib/event/eventtarget.js":
/***/ function(module, exports) {

	'use strict';
	
	/* Simplified implementation of DOM2 EventTarget.
	 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
	 */
	
	function EventTarget() {
	  this._listeners = {};
	}
	
	EventTarget.prototype.addEventListener = function(eventType, listener) {
	  if (!(eventType in this._listeners)) {
	    this._listeners[eventType] = [];
	  }
	  var arr = this._listeners[eventType];
	  // #4
	  if (arr.indexOf(listener) === -1) {
	    // Make a copy so as not to interfere with a current dispatchEvent.
	    arr = arr.concat([listener]);
	  }
	  this._listeners[eventType] = arr;
	};
	
	EventTarget.prototype.removeEventListener = function(eventType, listener) {
	  var arr = this._listeners[eventType];
	  if (!arr) {
	    return;
	  }
	  var idx = arr.indexOf(listener);
	  if (idx !== -1) {
	    if (arr.length > 1) {
	      // Make a copy so as not to interfere with a current dispatchEvent.
	      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
	    } else {
	      delete this._listeners[eventType];
	    }
	    return;
	  }
	};
	
	EventTarget.prototype.dispatchEvent = function() {
	  var event = arguments[0];
	  var t = event.type;
	  // equivalent of Array.prototype.slice.call(arguments, 0);
	  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
	  // TODO: This doesn't match the real behavior; per spec, onfoo get
	  // their place in line from the /first/ time they're set from
	  // non-null. Although WebKit bumps it to the end every time it's
	  // set.
	  if (this['on' + t]) {
	    this['on' + t].apply(this, args);
	  }
	  if (t in this._listeners) {
	    // Grab a reference to the listeners list. removeEventListener may alter the list.
	    var listeners = this._listeners[t];
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i].apply(this, args);
	    }
	  }
	};
	
	module.exports = EventTarget;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/browser/websocket.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var Driver = global.WebSocket || global.MozWebSocket;
	if (Driver) {
		module.exports = function WebSocketBrowserDriver(url) {
			return new Driver(url);
		};
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/xhr-streaming.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , AjaxBasedTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/ajax-based.js")
	  , XhrReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/receiver/xhr.js")
	  , XHRCorsObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js")
	  , XHRLocalObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-local.js")
	  , browser = __webpack_require__("./node_modules/sockjs-client/lib/utils/browser.js")
	  ;
	
	function XhrStreamingTransport(transUrl) {
	  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
	}
	
	inherits(XhrStreamingTransport, AjaxBasedTransport);
	
	XhrStreamingTransport.enabled = function(info) {
	  if (info.nullOrigin) {
	    return false;
	  }
	  // Opera doesn't support xhr-streaming #60
	  // But it might be able to #92
	  if (browser.isOpera()) {
	    return false;
	  }
	
	  return XHRCorsObject.enabled;
	};
	
	XhrStreamingTransport.transportName = 'xhr-streaming';
	XhrStreamingTransport.roundTrips = 2; // preflight, ajax
	
	// Safari gets confused when a streaming ajax request is started
	// before onload. This causes the load indicator to spin indefinetely.
	// Only require body when used in a browser
	XhrStreamingTransport.needBody = !!global.document;
	
	module.exports = XhrStreamingTransport;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , SenderReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/sender-receiver.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:ajax-based');
	}
	
	function createAjaxSender(AjaxObject) {
	  return function(url, payload, callback) {
	    debug('create ajax sender', url, payload);
	    var opt = {};
	    if (typeof payload === 'string') {
	      opt.headers = {'Content-type': 'text/plain'};
	    }
	    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
	    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
	    xo.once('finish', function(status) {
	      debug('finish', status);
	      xo = null;
	
	      if (status !== 200 && status !== 204) {
	        return callback(new Error('http status ' + status));
	      }
	      callback();
	    });
	    return function() {
	      debug('abort');
	      xo.close();
	      xo = null;
	
	      var err = new Error('Aborted');
	      err.code = 1000;
	      callback(err);
	    };
	  };
	}
	
	function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
	  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
	}
	
	inherits(AjaxBasedTransport, SenderReceiver);
	
	module.exports = AjaxBasedTransport;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/lib/sender-receiver.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , BufferedSender = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/buffered-sender.js")
	  , Polling = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/polling.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:sender-receiver');
	}
	
	function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
	  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
	  debug(pollUrl);
	  var self = this;
	  BufferedSender.call(this, transUrl, senderFunc);
	
	  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
	  this.poll.on('message', function(msg) {
	    debug('poll message', msg);
	    self.emit('message', msg);
	  });
	  this.poll.once('close', function(code, reason) {
	    debug('poll close', code, reason);
	    self.poll = null;
	    self.emit('close', code, reason);
	    self.close();
	  });
	}
	
	inherits(SenderReceiver, BufferedSender);
	
	SenderReceiver.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  if (this.poll) {
	    this.poll.abort();
	    this.poll = null;
	  }
	  this.stop();
	};
	
	module.exports = SenderReceiver;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/lib/buffered-sender.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:buffered-sender');
	}
	
	function BufferedSender(url, sender) {
	  debug(url);
	  EventEmitter.call(this);
	  this.sendBuffer = [];
	  this.sender = sender;
	  this.url = url;
	}
	
	inherits(BufferedSender, EventEmitter);
	
	BufferedSender.prototype.send = function(message) {
	  debug('send', message);
	  this.sendBuffer.push(message);
	  if (!this.sendStop) {
	    this.sendSchedule();
	  }
	};
	
	// For polling transports in a situation when in the message callback,
	// new message is being send. If the sending connection was started
	// before receiving one, it is possible to saturate the network and
	// timeout due to the lack of receiving socket. To avoid that we delay
	// sending messages by some small time, in order to let receiving
	// connection be started beforehand. This is only a halfmeasure and
	// does not fix the big problem, but it does make the tests go more
	// stable on slow networks.
	BufferedSender.prototype.sendScheduleWait = function() {
	  debug('sendScheduleWait');
	  var self = this;
	  var tref;
	  this.sendStop = function() {
	    debug('sendStop');
	    self.sendStop = null;
	    clearTimeout(tref);
	  };
	  tref = setTimeout(function() {
	    debug('timeout');
	    self.sendStop = null;
	    self.sendSchedule();
	  }, 25);
	};
	
	BufferedSender.prototype.sendSchedule = function() {
	  debug('sendSchedule', this.sendBuffer.length);
	  var self = this;
	  if (this.sendBuffer.length > 0) {
	    var payload = '[' + this.sendBuffer.join(',') + ']';
	    this.sendStop = this.sender(this.url, payload, function(err) {
	      self.sendStop = null;
	      if (err) {
	        debug('error', err);
	        self.emit('close', err.code || 1006, 'Sending error: ' + err);
	        self._cleanup();
	      } else {
	        self.sendScheduleWait();
	      }
	    });
	    this.sendBuffer = [];
	  }
	};
	
	BufferedSender.prototype._cleanup = function() {
	  debug('_cleanup');
	  this.removeAllListeners();
	};
	
	BufferedSender.prototype.stop = function() {
	  debug('stop');
	  this._cleanup();
	  if (this.sendStop) {
	    this.sendStop();
	    this.sendStop = null;
	  }
	};
	
	module.exports = BufferedSender;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/lib/polling.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:polling');
	}
	
	function Polling(Receiver, receiveUrl, AjaxObject) {
	  debug(receiveUrl);
	  EventEmitter.call(this);
	  this.Receiver = Receiver;
	  this.receiveUrl = receiveUrl;
	  this.AjaxObject = AjaxObject;
	  this._scheduleReceiver();
	}
	
	inherits(Polling, EventEmitter);
	
	Polling.prototype._scheduleReceiver = function() {
	  debug('_scheduleReceiver');
	  var self = this;
	  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);
	
	  poll.on('message', function(msg) {
	    debug('message', msg);
	    self.emit('message', msg);
	  });
	
	  poll.once('close', function(code, reason) {
	    debug('close', code, reason, self.pollIsClosing);
	    self.poll = poll = null;
	
	    if (!self.pollIsClosing) {
	      if (reason === 'network') {
	        self._scheduleReceiver();
	      } else {
	        self.emit('close', code || 1006, reason);
	        self.removeAllListeners();
	      }
	    }
	  });
	};
	
	Polling.prototype.abort = function() {
	  debug('abort');
	  this.removeAllListeners();
	  this.pollIsClosing = true;
	  if (this.poll) {
	    this.poll.abort();
	  }
	};
	
	module.exports = Polling;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/receiver/xhr.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:receiver:xhr');
	}
	
	function XhrReceiver(url, AjaxObject) {
	  debug(url);
	  EventEmitter.call(this);
	  var self = this;
	
	  this.bufferPosition = 0;
	
	  this.xo = new AjaxObject('POST', url, null);
	  this.xo.on('chunk', this._chunkHandler.bind(this));
	  this.xo.once('finish', function(status, text) {
	    debug('finish', status, text);
	    self._chunkHandler(status, text);
	    self.xo = null;
	    var reason = status === 200 ? 'network' : 'permanent';
	    debug('close', reason);
	    self.emit('close', null, reason);
	    self._cleanup();
	  });
	}
	
	inherits(XhrReceiver, EventEmitter);
	
	XhrReceiver.prototype._chunkHandler = function(status, text) {
	  debug('_chunkHandler', status);
	  if (status !== 200 || !text) {
	    return;
	  }
	
	  for (var idx = -1; ; this.bufferPosition += idx + 1) {
	    var buf = text.slice(this.bufferPosition);
	    idx = buf.indexOf('\n');
	    if (idx === -1) {
	      break;
	    }
	    var msg = buf.slice(0, idx);
	    if (msg) {
	      debug('message', msg);
	      this.emit('message', msg);
	    }
	  }
	};
	
	XhrReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  this.removeAllListeners();
	};
	
	XhrReceiver.prototype.abort = function() {
	  debug('abort');
	  if (this.xo) {
	    this.xo.close();
	    debug('close');
	    this.emit('close', null, 'user');
	    this.xo = null;
	  }
	  this._cleanup();
	};
	
	module.exports = XhrReceiver;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , XhrDriver = __webpack_require__("./node_modules/sockjs-client/lib/transport/browser/abstract-xhr.js")
	  ;
	
	function XHRCorsObject(method, url, payload, opts) {
	  XhrDriver.call(this, method, url, payload, opts);
	}
	
	inherits(XHRCorsObject, XhrDriver);
	
	XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;
	
	module.exports = XHRCorsObject;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/browser/abstract-xhr.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , utils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , XHR = global.XMLHttpRequest
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:browser:xhr');
	}
	
	function AbstractXHRObject(method, url, payload, opts) {
	  debug(method, url);
	  var self = this;
	  EventEmitter.call(this);
	
	  setTimeout(function () {
	    self._start(method, url, payload, opts);
	  }, 0);
	}
	
	inherits(AbstractXHRObject, EventEmitter);
	
	AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
	  var self = this;
	
	  try {
	    this.xhr = new XHR();
	  } catch (x) {
	    // intentionally empty
	  }
	
	  if (!this.xhr) {
	    debug('no xhr');
	    this.emit('finish', 0, 'no xhr support');
	    this._cleanup();
	    return;
	  }
	
	  // several browsers cache POSTs
	  url = urlUtils.addQuery(url, 't=' + (+new Date()));
	
	  // Explorer tends to keep connection open, even after the
	  // tab gets closed: http://bugs.jquery.com/ticket/5280
	  this.unloadRef = utils.unloadAdd(function() {
	    debug('unload cleanup');
	    self._cleanup(true);
	  });
	  try {
	    this.xhr.open(method, url, true);
	    if (this.timeout && 'timeout' in this.xhr) {
	      this.xhr.timeout = this.timeout;
	      this.xhr.ontimeout = function() {
	        debug('xhr timeout');
	        self.emit('finish', 0, '');
	        self._cleanup(false);
	      };
	    }
	  } catch (e) {
	    debug('exception', e);
	    // IE raises an exception on wrong port.
	    this.emit('finish', 0, '');
	    this._cleanup(false);
	    return;
	  }
	
	  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
	    debug('withCredentials');
	    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
	    // "This never affects same-site requests."
	
	    this.xhr.withCredentials = 'true';
	  }
	  if (opts && opts.headers) {
	    for (var key in opts.headers) {
	      this.xhr.setRequestHeader(key, opts.headers[key]);
	    }
	  }
	
	  this.xhr.onreadystatechange = function() {
	    if (self.xhr) {
	      var x = self.xhr;
	      var text, status;
	      debug('readyState', x.readyState);
	      switch (x.readyState) {
	      case 3:
	        // IE doesn't like peeking into responseText or status
	        // on Microsoft.XMLHTTP and readystate=3
	        try {
	          status = x.status;
	          text = x.responseText;
	        } catch (e) {
	          // intentionally empty
	        }
	        debug('status', status);
	        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
	        if (status === 1223) {
	          status = 204;
	        }
	
	        // IE does return readystate == 3 for 404 answers.
	        if (status === 200 && text && text.length > 0) {
	          debug('chunk');
	          self.emit('chunk', status, text);
	        }
	        break;
	      case 4:
	        status = x.status;
	        debug('status', status);
	        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
	        if (status === 1223) {
	          status = 204;
	        }
	        // IE returns this for a bad port
	        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
	        if (status === 12005 || status === 12029) {
	          status = 0;
	        }
	
	        debug('finish', status, x.responseText);
	        self.emit('finish', status, x.responseText);
	        self._cleanup(false);
	        break;
	      }
	    }
	  };
	
	  try {
	    self.xhr.send(payload);
	  } catch (e) {
	    self.emit('finish', 0, '');
	    self._cleanup(false);
	  }
	};
	
	AbstractXHRObject.prototype._cleanup = function(abort) {
	  debug('cleanup');
	  if (!this.xhr) {
	    return;
	  }
	  this.removeAllListeners();
	  utils.unloadDel(this.unloadRef);
	
	  // IE needs this field to be a function
	  this.xhr.onreadystatechange = function() {};
	  if (this.xhr.ontimeout) {
	    this.xhr.ontimeout = null;
	  }
	
	  if (abort) {
	    try {
	      this.xhr.abort();
	    } catch (x) {
	      // intentionally empty
	    }
	  }
	  this.unloadRef = this.xhr = null;
	};
	
	AbstractXHRObject.prototype.close = function() {
	  debug('close');
	  this._cleanup(true);
	};
	
	AbstractXHRObject.enabled = !!XHR;
	// override XMLHttpRequest for IE6/7
	// obfuscate to avoid firewalls
	var axo = ['Active'].concat('Object').join('X');
	if (!AbstractXHRObject.enabled && (axo in global)) {
	  debug('overriding xmlhttprequest');
	  XHR = function() {
	    try {
	      return new global[axo]('Microsoft.XMLHTTP');
	    } catch (e) {
	      return null;
	    }
	  };
	  AbstractXHRObject.enabled = !!new XHR();
	}
	
	var cors = false;
	try {
	  cors = 'withCredentials' in new XHR();
	} catch (ignored) {
	  // intentionally empty
	}
	
	AbstractXHRObject.supportsCORS = cors;
	
	module.exports = AbstractXHRObject;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/sender/xhr-local.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , XhrDriver = __webpack_require__("./node_modules/sockjs-client/lib/transport/browser/abstract-xhr.js")
	  ;
	
	function XHRLocalObject(method, url, payload /*, opts */) {
	  XhrDriver.call(this, method, url, payload, {
	    noCredentials: true
	  });
	}
	
	inherits(XHRLocalObject, XhrDriver);
	
	XHRLocalObject.enabled = XhrDriver.enabled;
	
	module.exports = XHRLocalObject;


/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/browser.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	module.exports = {
	  isOpera: function() {
	    return global.navigator &&
	      /opera/i.test(global.navigator.userAgent);
	  }
	
	, isKonqueror: function() {
	    return global.navigator &&
	      /konqueror/i.test(global.navigator.userAgent);
	  }
	
	  // #187 wrap document.domain in try/catch because of WP8 from file:///
	, hasDomain: function () {
	    // non-browser client always has a domain
	    if (!global.document) {
	      return true;
	    }
	
	    try {
	      return !!global.document.domain;
	    } catch (e) {
	      return false;
	    }
	  }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/xdr-streaming.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , AjaxBasedTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/ajax-based.js")
	  , XhrReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/receiver/xhr.js")
	  , XDRObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xdr.js")
	  ;
	
	// According to:
	//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
	//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/
	
	function XdrStreamingTransport(transUrl) {
	  if (!XDRObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
	}
	
	inherits(XdrStreamingTransport, AjaxBasedTransport);
	
	XdrStreamingTransport.enabled = function(info) {
	  if (info.cookie_needed || info.nullOrigin) {
	    return false;
	  }
	  return XDRObject.enabled && info.sameScheme;
	};
	
	XdrStreamingTransport.transportName = 'xdr-streaming';
	XdrStreamingTransport.roundTrips = 2; // preflight, ajax
	
	module.exports = XdrStreamingTransport;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/sender/xdr.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , eventUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , browser = __webpack_require__("./node_modules/sockjs-client/lib/utils/browser.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:sender:xdr');
	}
	
	// References:
	//   http://ajaxian.com/archives/100-line-ajax-wrapper
	//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx
	
	function XDRObject(method, url, payload) {
	  debug(method, url);
	  var self = this;
	  EventEmitter.call(this);
	
	  setTimeout(function() {
	    self._start(method, url, payload);
	  }, 0);
	}
	
	inherits(XDRObject, EventEmitter);
	
	XDRObject.prototype._start = function(method, url, payload) {
	  debug('_start');
	  var self = this;
	  var xdr = new global.XDomainRequest();
	  // IE caches even POSTs
	  url = urlUtils.addQuery(url, 't=' + (+new Date()));
	
	  xdr.onerror = function() {
	    debug('onerror');
	    self._error();
	  };
	  xdr.ontimeout = function() {
	    debug('ontimeout');
	    self._error();
	  };
	  xdr.onprogress = function() {
	    debug('progress', xdr.responseText);
	    self.emit('chunk', 200, xdr.responseText);
	  };
	  xdr.onload = function() {
	    debug('load');
	    self.emit('finish', 200, xdr.responseText);
	    self._cleanup(false);
	  };
	  this.xdr = xdr;
	  this.unloadRef = eventUtils.unloadAdd(function() {
	    self._cleanup(true);
	  });
	  try {
	    // Fails with AccessDenied if port number is bogus
	    this.xdr.open(method, url);
	    if (this.timeout) {
	      this.xdr.timeout = this.timeout;
	    }
	    this.xdr.send(payload);
	  } catch (x) {
	    this._error();
	  }
	};
	
	XDRObject.prototype._error = function() {
	  this.emit('finish', 0, '');
	  this._cleanup(false);
	};
	
	XDRObject.prototype._cleanup = function(abort) {
	  debug('cleanup', abort);
	  if (!this.xdr) {
	    return;
	  }
	  this.removeAllListeners();
	  eventUtils.unloadDel(this.unloadRef);
	
	  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
	  if (abort) {
	    try {
	      this.xdr.abort();
	    } catch (x) {
	      // intentionally empty
	    }
	  }
	  this.unloadRef = this.xdr = null;
	};
	
	XDRObject.prototype.close = function() {
	  debug('close');
	  this._cleanup(true);
	};
	
	// IE 8/9 if the request target uses the same scheme - #79
	XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());
	
	module.exports = XDRObject;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/eventsource.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , AjaxBasedTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/ajax-based.js")
	  , EventSourceReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/receiver/eventsource.js")
	  , XHRCorsObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js")
	  , EventSourceDriver = __webpack_require__("./node_modules/sockjs-client/lib/transport/browser/eventsource.js")
	  ;
	
	function EventSourceTransport(transUrl) {
	  if (!EventSourceTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	
	  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
	}
	
	inherits(EventSourceTransport, AjaxBasedTransport);
	
	EventSourceTransport.enabled = function() {
	  return !!EventSourceDriver;
	};
	
	EventSourceTransport.transportName = 'eventsource';
	EventSourceTransport.roundTrips = 2;
	
	module.exports = EventSourceTransport;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/receiver/eventsource.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , EventSourceDriver = __webpack_require__("./node_modules/sockjs-client/lib/transport/browser/eventsource.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:receiver:eventsource');
	}
	
	function EventSourceReceiver(url) {
	  debug(url);
	  EventEmitter.call(this);
	
	  var self = this;
	  var es = this.es = new EventSourceDriver(url);
	  es.onmessage = function(e) {
	    debug('message', e.data);
	    self.emit('message', decodeURI(e.data));
	  };
	  es.onerror = function(e) {
	    debug('error', es.readyState, e);
	    // ES on reconnection has readyState = 0 or 1.
	    // on network error it's CLOSED = 2
	    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
	    self._cleanup();
	    self._close(reason);
	  };
	}
	
	inherits(EventSourceReceiver, EventEmitter);
	
	EventSourceReceiver.prototype.abort = function() {
	  debug('abort');
	  this._cleanup();
	  this._close('user');
	};
	
	EventSourceReceiver.prototype._cleanup = function() {
	  debug('cleanup');
	  var es = this.es;
	  if (es) {
	    es.onmessage = es.onerror = null;
	    es.close();
	    this.es = null;
	  }
	};
	
	EventSourceReceiver.prototype._close = function(reason) {
	  debug('close', reason);
	  var self = this;
	  // Safari and chrome < 15 crash if we close window before
	  // waiting for ES cleanup. See:
	  // https://code.google.com/p/chromium/issues/detail?id=89155
	  setTimeout(function() {
	    self.emit('close', null, reason);
	    self.removeAllListeners();
	  }, 200);
	};
	
	module.exports = EventSourceReceiver;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/browser/eventsource.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global.EventSource;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , IframeTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/iframe.js")
	  , objectUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/object.js")
	  ;
	
	module.exports = function(transport) {
	
	  function IframeWrapTransport(transUrl, baseUrl) {
	    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
	  }
	
	  inherits(IframeWrapTransport, IframeTransport);
	
	  IframeWrapTransport.enabled = function(url, info) {
	    if (!global.document) {
	      return false;
	    }
	
	    var iframeInfo = objectUtils.extend({}, info);
	    iframeInfo.sameOrigin = true;
	    return transport.enabled(iframeInfo) && IframeTransport.enabled();
	  };
	
	  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
	  IframeWrapTransport.needBody = true;
	  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)
	
	  IframeWrapTransport.facadeTransport = transport;
	
	  return IframeWrapTransport;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/iframe.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Few cool transports do work only for same-origin. In order to make
	// them work cross-domain we shall use iframe, served from the
	// remote domain. New browsers have capabilities to communicate with
	// cross domain iframe using postMessage(). In IE it was implemented
	// from IE 8+, but of course, IE got some details wrong:
	//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
	//    http://stevesouders.com/misc/test-postmessage.php
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , version = __webpack_require__("./node_modules/sockjs-client/lib/version.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , iframeUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/iframe.js")
	  , eventUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , random = __webpack_require__("./node_modules/sockjs-client/lib/utils/random.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:transport:iframe');
	}
	
	function IframeTransport(transport, transUrl, baseUrl) {
	  if (!IframeTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	  EventEmitter.call(this);
	
	  var self = this;
	  this.origin = urlUtils.getOrigin(baseUrl);
	  this.baseUrl = baseUrl;
	  this.transUrl = transUrl;
	  this.transport = transport;
	  this.windowId = random.string(8);
	
	  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
	  debug(transport, transUrl, iframeUrl);
	
	  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
	    debug('err callback');
	    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
	    self.close();
	  });
	
	  this.onmessageCallback = this._message.bind(this);
	  eventUtils.attachEvent('message', this.onmessageCallback);
	}
	
	inherits(IframeTransport, EventEmitter);
	
	IframeTransport.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  if (this.iframeObj) {
	    eventUtils.detachEvent('message', this.onmessageCallback);
	    try {
	      // When the iframe is not loaded, IE raises an exception
	      // on 'contentWindow'.
	      this.postMessage('c');
	    } catch (x) {
	      // intentionally empty
	    }
	    this.iframeObj.cleanup();
	    this.iframeObj = null;
	    this.onmessageCallback = this.iframeObj = null;
	  }
	};
	
	IframeTransport.prototype._message = function(e) {
	  debug('message', e.data);
	  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
	    debug('not same origin', e.origin, this.origin);
	    return;
	  }
	
	  var iframeMessage;
	  try {
	    iframeMessage = JSON3.parse(e.data);
	  } catch (ignored) {
	    debug('bad json', e.data);
	    return;
	  }
	
	  if (iframeMessage.windowId !== this.windowId) {
	    debug('mismatched window id', iframeMessage.windowId, this.windowId);
	    return;
	  }
	
	  switch (iframeMessage.type) {
	  case 's':
	    this.iframeObj.loaded();
	    // window global dependency
	    this.postMessage('s', JSON3.stringify([
	      version
	    , this.transport
	    , this.transUrl
	    , this.baseUrl
	    ]));
	    break;
	  case 't':
	    this.emit('message', iframeMessage.data);
	    break;
	  case 'c':
	    var cdata;
	    try {
	      cdata = JSON3.parse(iframeMessage.data);
	    } catch (ignored) {
	      debug('bad json', iframeMessage.data);
	      return;
	    }
	    this.emit('close', cdata[0], cdata[1]);
	    this.close();
	    break;
	  }
	};
	
	IframeTransport.prototype.postMessage = function(type, data) {
	  debug('postMessage', type, data);
	  this.iframeObj.post(JSON3.stringify({
	    windowId: this.windowId
	  , type: type
	  , data: data || ''
	  }), this.origin);
	};
	
	IframeTransport.prototype.send = function(message) {
	  debug('send', message);
	  this.postMessage('m', message);
	};
	
	IframeTransport.enabled = function() {
	  return iframeUtils.iframeEnabled;
	};
	
	IframeTransport.transportName = 'iframe';
	IframeTransport.roundTrips = 2;
	
	module.exports = IframeTransport;


/***/ },

/***/ "./node_modules/json3/lib/json3.js":
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
	;(function () {
	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__("./node_modules/webpack/buildin/amd-options.js");
	
	  // A set of types used to distinguish objects from primitives.
	  var objectTypes = {
	    "function": true,
	    "object": true
	  };
	
	  // Detect the `exports` object exposed by CommonJS implementations.
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	
	  // Use the `global` object exposed by Node (including Browserify via
	  // `insert-module-globals`), Narwhal, and Ringo as the default context,
	  // and the `window` object in browsers. Rhino exports a `global` function
	  // instead.
	  var root = objectTypes[typeof window] && window || this,
	      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;
	
	  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
	    root = freeGlobal;
	  }
	
	  // Public: Initializes JSON 3 using the given `context` object, attaching the
	  // `stringify` and `parse` functions to the specified `exports` object.
	  function runInContext(context, exports) {
	    context || (context = root["Object"]());
	    exports || (exports = root["Object"]());
	
	    // Native constructor aliases.
	    var Number = context["Number"] || root["Number"],
	        String = context["String"] || root["String"],
	        Object = context["Object"] || root["Object"],
	        Date = context["Date"] || root["Date"],
	        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
	        TypeError = context["TypeError"] || root["TypeError"],
	        Math = context["Math"] || root["Math"],
	        nativeJSON = context["JSON"] || root["JSON"];
	
	    // Delegate to the native `stringify` and `parse` implementations.
	    if (typeof nativeJSON == "object" && nativeJSON) {
	      exports.stringify = nativeJSON.stringify;
	      exports.parse = nativeJSON.parse;
	    }
	
	    // Convenience aliases.
	    var objectProto = Object.prototype,
	        getClass = objectProto.toString,
	        isProperty, forEach, undef;
	
	    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	    var isExtended = new Date(-3509827334573292);
	    try {
	      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	      // results for certain dates in Opera >= 10.53.
	      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	        // Safari < 2.0.2 stores the internal millisecond time value correctly,
	        // but clips the values returned by the date methods to the range of
	        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	    } catch (exception) {}
	
	    // Internal: Determines whether the native `JSON.stringify` and `parse`
	    // implementations are spec-compliant. Based on work by Ken Snyder.
	    function has(name) {
	      if (has[name] !== undef) {
	        // Return cached feature test result.
	        return has[name];
	      }
	      var isSupported;
	      if (name == "bug-string-char-index") {
	        // IE <= 7 doesn't support accessing string characters using square
	        // bracket notation. IE 8 only supports this for primitives.
	        isSupported = "a"[0] != "a";
	      } else if (name == "json") {
	        // Indicates whether both `JSON.stringify` and `JSON.parse` are
	        // supported.
	        isSupported = has("json-stringify") && has("json-parse");
	      } else {
	        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	        // Test `JSON.stringify`.
	        if (name == "json-stringify") {
	          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	          if (stringifySupported) {
	            // A test function object with a custom `toJSON` method.
	            (value = function () {
	              return 1;
	            }).toJSON = value;
	            try {
	              stringifySupported =
	                // Firefox 3.1b1 and b2 serialize string, number, and boolean
	                // primitives as object literals.
	                stringify(0) === "0" &&
	                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	                // literals.
	                stringify(new Number()) === "0" &&
	                stringify(new String()) == '""' &&
	                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	                // does not define a canonical JSON representation (this applies to
	                // objects with `toJSON` properties as well, *unless* they are nested
	                // within an object or array).
	                stringify(getClass) === undef &&
	                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	                // FF 3.1b3 pass this test.
	                stringify(undef) === undef &&
	                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	                // respectively, if the value is omitted entirely.
	                stringify() === undef &&
	                // FF 3.1b1, 2 throw an error if the given value is not a number,
	                // string, array, object, Boolean, or `null` literal. This applies to
	                // objects with custom `toJSON` methods as well, unless they are nested
	                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	                // methods entirely.
	                stringify(value) === "1" &&
	                stringify([value]) == "[1]" &&
	                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	                // `"[null]"`.
	                stringify([undef]) == "[null]" &&
	                // YUI 3.0.0b1 fails to serialize `null` literals.
	                stringify(null) == "null" &&
	                // FF 3.1b1, 2 halts serialization if an array contains a function:
	                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	                // elides non-JSON values from objects and arrays, unless they
	                // define custom `toJSON` methods.
	                stringify([undef, getClass, null]) == "[null,null,null]" &&
	                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	                // where character escape codes are expected (e.g., `\b` => `\u0008`).
	                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	                stringify(null, value) === "1" &&
	                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	                // serialize extended years.
	                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	                // The milliseconds are optional in ES 5, but required in 5.1.
	                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	                // four-digit years instead of six-digit years. Credits: @Yaffle.
	                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	                // values less than 1000. Credits: @Yaffle.
	                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	            } catch (exception) {
	              stringifySupported = false;
	            }
	          }
	          isSupported = stringifySupported;
	        }
	        // Test `JSON.parse`.
	        if (name == "json-parse") {
	          var parse = exports.parse;
	          if (typeof parse == "function") {
	            try {
	              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	              // Conforming implementations should also coerce the initial argument to
	              // a string prior to parsing.
	              if (parse("0") === 0 && !parse(false)) {
	                // Simple parsing test.
	                value = parse(serialized);
	                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	                if (parseSupported) {
	                  try {
	                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                    parseSupported = !parse('"\t"');
	                  } catch (exception) {}
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                      // certain octal literals.
	                      parseSupported = parse("01") !== 1;
	                    } catch (exception) {}
	                  }
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                      // points. These environments, along with FF 3.1b1 and 2,
	                      // also allow trailing commas in JSON objects and arrays.
	                      parseSupported = parse("1.") !== 1;
	                    } catch (exception) {}
	                  }
	                }
	              }
	            } catch (exception) {
	              parseSupported = false;
	            }
	          }
	          isSupported = parseSupported;
	        }
	      }
	      return has[name] = !!isSupported;
	    }
	
	    if (!has("json")) {
	      // Common `[[Class]]` name aliases.
	      var functionClass = "[object Function]",
	          dateClass = "[object Date]",
	          numberClass = "[object Number]",
	          stringClass = "[object String]",
	          arrayClass = "[object Array]",
	          booleanClass = "[object Boolean]";
	
	      // Detect incomplete support for accessing string characters by index.
	      var charIndexBuggy = has("bug-string-char-index");
	
	      // Define additional utility methods if the `Date` methods are buggy.
	      if (!isExtended) {
	        var floor = Math.floor;
	        // A mapping between the months of the year and the number of days between
	        // January 1st and the first of the respective month.
	        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	        // Internal: Calculates the number of days between the Unix epoch and the
	        // first day of the given month.
	        var getDay = function (year, month) {
	          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	        };
	      }
	
	      // Internal: Determines if a property is a direct property of the given
	      // object. Delegates to the native `Object#hasOwnProperty` method.
	      if (!(isProperty = objectProto.hasOwnProperty)) {
	        isProperty = function (property) {
	          var members = {}, constructor;
	          if ((members.__proto__ = null, members.__proto__ = {
	            // The *proto* property cannot be set multiple times in recent
	            // versions of Firefox and SeaMonkey.
	            "toString": 1
	          }, members).toString != getClass) {
	            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	            // supports the mutable *proto* property.
	            isProperty = function (property) {
	              // Capture and break the object's prototype chain (see section 8.6.2
	              // of the ES 5.1 spec). The parenthesized expression prevents an
	              // unsafe transformation by the Closure Compiler.
	              var original = this.__proto__, result = property in (this.__proto__ = null, this);
	              // Restore the original prototype chain.
	              this.__proto__ = original;
	              return result;
	            };
	          } else {
	            // Capture a reference to the top-level `Object` constructor.
	            constructor = members.constructor;
	            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	            // other environments.
	            isProperty = function (property) {
	              var parent = (this.constructor || constructor).prototype;
	              return property in this && !(property in parent && this[property] === parent[property]);
	            };
	          }
	          members = null;
	          return isProperty.call(this, property);
	        };
	      }
	
	      // Internal: Normalizes the `for...in` iteration algorithm across
	      // environments. Each enumerated key is yielded to a `callback` function.
	      forEach = function (object, callback) {
	        var size = 0, Properties, members, property;
	
	        // Tests for bugs in the current environment's `for...in` algorithm. The
	        // `valueOf` property inherits the non-enumerable flag from
	        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	        (Properties = function () {
	          this.valueOf = 0;
	        }).prototype.valueOf = 0;
	
	        // Iterate over a new instance of the `Properties` class.
	        members = new Properties();
	        for (property in members) {
	          // Ignore all properties inherited from `Object.prototype`.
	          if (isProperty.call(members, property)) {
	            size++;
	          }
	        }
	        Properties = members = null;
	
	        // Normalize the iteration algorithm.
	        if (!size) {
	          // A list of non-enumerable properties inherited from `Object.prototype`.
	          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	          // properties.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, length;
	            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
	            for (property in object) {
	              // Gecko <= 1.0 enumerates the `prototype` property of functions under
	              // certain conditions; IE does not.
	              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for each non-enumerable property.
	            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	          };
	        } else if (size == 2) {
	          // Safari <= 2.0.4 enumerates shadowed properties twice.
	          forEach = function (object, callback) {
	            // Create a set of iterated properties.
	            var members = {}, isFunction = getClass.call(object) == functionClass, property;
	            for (property in object) {
	              // Store each property name to prevent double enumeration. The
	              // `prototype` property of functions is not enumerated due to cross-
	              // environment inconsistencies.
	              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	          };
	        } else {
	          // No bugs detected; use the standard `for...in` algorithm.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	            for (property in object) {
	              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for the `constructor` property due to
	            // cross-environment inconsistencies.
	            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	              callback(property);
	            }
	          };
	        }
	        return forEach(object, callback);
	      };
	
	      // Public: Serializes a JavaScript `value` as a JSON string. The optional
	      // `filter` argument may specify either a function that alters how object and
	      // array members are serialized, or an array of strings and numbers that
	      // indicates which properties should be serialized. The optional `width`
	      // argument may be either a string or number that specifies the indentation
	      // level of the output.
	      if (!has("json-stringify")) {
	        // Internal: A map of control characters and their escaped equivalents.
	        var Escapes = {
	          92: "\\\\",
	          34: '\\"',
	          8: "\\b",
	          12: "\\f",
	          10: "\\n",
	          13: "\\r",
	          9: "\\t"
	        };
	
	        // Internal: Converts `value` into a zero-padded string such that its
	        // length is at least equal to `width`. The `width` must be <= 6.
	        var leadingZeroes = "000000";
	        var toPaddedString = function (width, value) {
	          // The `|| 0` expression is necessary to work around a bug in
	          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	          return (leadingZeroes + (value || 0)).slice(-width);
	        };
	
	        // Internal: Double-quotes a string `value`, replacing all ASCII control
	        // characters (characters with code unit values between 0 and 31) with
	        // their escaped equivalents. This is an implementation of the
	        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	        var unicodePrefix = "\\u00";
	        var quote = function (value) {
	          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
	          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
	          for (; index < length; index++) {
	            var charCode = value.charCodeAt(index);
	            // If the character is a control character, append its Unicode or
	            // shorthand escape sequence; otherwise, append the character as-is.
	            switch (charCode) {
	              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	                result += Escapes[charCode];
	                break;
	              default:
	                if (charCode < 32) {
	                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                  break;
	                }
	                result += useCharIndex ? symbols[index] : value.charAt(index);
	            }
	          }
	          return result + '"';
	        };
	
	        // Internal: Recursively serializes an object. Implements the
	        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	          try {
	            // Necessary for host object support.
	            value = object[property];
	          } catch (exception) {}
	          if (typeof value == "object" && value) {
	            className = getClass.call(value);
	            if (className == dateClass && !isProperty.call(value, "toJSON")) {
	              if (value > -1 / 0 && value < 1 / 0) {
	                // Dates are serialized according to the `Date#toJSON` method
	                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	                // for the ISO 8601 date time string format.
	                if (getDay) {
	                  // Manually compute the year, month, date, hours, minutes,
	                  // seconds, and milliseconds if the `getUTC*` methods are
	                  // buggy. Adapted from @Yaffle's `date-shim` project.
	                  date = floor(value / 864e5);
	                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                  date = 1 + date - getDay(year, month);
	                  // The `time` value specifies the time within the day (see ES
	                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                  // to compute `A modulo B`, as the `%` operator does not
	                  // correspond to the `modulo` operation for negative numbers.
	                  time = (value % 864e5 + 864e5) % 864e5;
	                  // The hours, minutes, seconds, and milliseconds are obtained by
	                  // decomposing the time within the day. See section 15.9.1.10.
	                  hours = floor(time / 36e5) % 24;
	                  minutes = floor(time / 6e4) % 60;
	                  seconds = floor(time / 1e3) % 60;
	                  milliseconds = time % 1e3;
	                } else {
	                  year = value.getUTCFullYear();
	                  month = value.getUTCMonth();
	                  date = value.getUTCDate();
	                  hours = value.getUTCHours();
	                  minutes = value.getUTCMinutes();
	                  seconds = value.getUTCSeconds();
	                  milliseconds = value.getUTCMilliseconds();
	                }
	                // Serialize extended years correctly.
	                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                  // Months, dates, hours, minutes, and seconds should have two
	                  // digits; milliseconds should have three.
	                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                  // Milliseconds are optional in ES 5.0, but required in 5.1.
	                  "." + toPaddedString(3, milliseconds) + "Z";
	              } else {
	                value = null;
	              }
	            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	              // ignores all `toJSON` methods on these objects unless they are
	              // defined directly on an instance.
	              value = value.toJSON(property);
	            }
	          }
	          if (callback) {
	            // If a replacement function was provided, call it to obtain the value
	            // for serialization.
	            value = callback.call(object, property, value);
	          }
	          if (value === null) {
	            return "null";
	          }
	          className = getClass.call(value);
	          if (className == booleanClass) {
	            // Booleans are represented literally.
	            return "" + value;
	          } else if (className == numberClass) {
	            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	            // `"null"`.
	            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	          } else if (className == stringClass) {
	            // Strings are double-quoted and escaped.
	            return quote("" + value);
	          }
	          // Recursively serialize objects and arrays.
	          if (typeof value == "object") {
	            // Check for cyclic structures. This is a linear search; performance
	            // is inversely proportional to the number of unique nested objects.
	            for (length = stack.length; length--;) {
	              if (stack[length] === value) {
	                // Cyclic structures cannot be serialized by `JSON.stringify`.
	                throw TypeError();
	              }
	            }
	            // Add the object to the stack of traversed objects.
	            stack.push(value);
	            results = [];
	            // Save the current indentation level and indent one additional level.
	            prefix = indentation;
	            indentation += whitespace;
	            if (className == arrayClass) {
	              // Recursively serialize array elements.
	              for (index = 0, length = value.length; index < length; index++) {
	                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	                results.push(element === undef ? "null" : element);
	              }
	              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	            } else {
	              // Recursively serialize object members. Members are selected from
	              // either a user-specified list of property names, or the object
	              // itself.
	              forEach(properties || value, function (property) {
	                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	                if (element !== undef) {
	                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                  // is not the empty string, let `member` {quote(property) + ":"}
	                  // be the concatenation of `member` and the `space` character."
	                  // The "`space` character" refers to the literal space
	                  // character, not the `space` {width} argument provided to
	                  // `JSON.stringify`.
	                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	                }
	              });
	              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	            }
	            // Remove the object from the traversed object stack.
	            stack.pop();
	            return result;
	          }
	        };
	
	        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	        exports.stringify = function (source, filter, width) {
	          var whitespace, callback, properties, className;
	          if (objectTypes[typeof filter] && filter) {
	            if ((className = getClass.call(filter)) == functionClass) {
	              callback = filter;
	            } else if (className == arrayClass) {
	              // Convert the property names array into a makeshift set.
	              properties = {};
	              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	            }
	          }
	          if (width) {
	            if ((className = getClass.call(width)) == numberClass) {
	              // Convert the `width` to an integer and create a string containing
	              // `width` number of space characters.
	              if ((width -= width % 1) > 0) {
	                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	              }
	            } else if (className == stringClass) {
	              whitespace = width.length <= 10 ? width : width.slice(0, 10);
	            }
	          }
	          // Opera <= 7.54u2 discards the values associated with empty string keys
	          // (`""`) only if they are used directly within an object member list
	          // (e.g., `!("" in { "": 1})`).
	          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	        };
	      }
	
	      // Public: Parses a JSON source string.
	      if (!has("json-parse")) {
	        var fromCharCode = String.fromCharCode;
	
	        // Internal: A map of escaped control characters and their unescaped
	        // equivalents.
	        var Unescapes = {
	          92: "\\",
	          34: '"',
	          47: "/",
	          98: "\b",
	          116: "\t",
	          110: "\n",
	          102: "\f",
	          114: "\r"
	        };
	
	        // Internal: Stores the parser state.
	        var Index, Source;
	
	        // Internal: Resets the parser state and throws a `SyntaxError`.
	        var abort = function () {
	          Index = Source = null;
	          throw SyntaxError();
	        };
	
	        // Internal: Returns the next token, or `"$"` if the parser has reached
	        // the end of the source string. A token may be a string, number, `null`
	        // literal, or Boolean literal.
	        var lex = function () {
	          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	          while (Index < length) {
	            charCode = source.charCodeAt(Index);
	            switch (charCode) {
	              case 9: case 10: case 13: case 32:
	                // Skip whitespace tokens, including tabs, carriage returns, line
	                // feeds, and space characters.
	                Index++;
	                break;
	              case 123: case 125: case 91: case 93: case 58: case 44:
	                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	                // the current position.
	                value = charIndexBuggy ? source.charAt(Index) : source[Index];
	                Index++;
	                return value;
	              case 34:
	                // `"` delimits a JSON string; advance to the next character and
	                // begin parsing the string. String tokens are prefixed with the
	                // sentinel `@` character to distinguish them from punctuators and
	                // end-of-string tokens.
	                for (value = "@", Index++; Index < length;) {
	                  charCode = source.charCodeAt(Index);
	                  if (charCode < 32) {
	                    // Unescaped ASCII control characters (those with a code unit
	                    // less than the space character) are not permitted.
	                    abort();
	                  } else if (charCode == 92) {
	                    // A reverse solidus (`\`) marks the beginning of an escaped
	                    // control character (including `"`, `\`, and `/`) or Unicode
	                    // escape sequence.
	                    charCode = source.charCodeAt(++Index);
	                    switch (charCode) {
	                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                        // Revive escaped control characters.
	                        value += Unescapes[charCode];
	                        Index++;
	                        break;
	                      case 117:
	                        // `\u` marks the beginning of a Unicode escape sequence.
	                        // Advance to the first character and validate the
	                        // four-digit code point.
	                        begin = ++Index;
	                        for (position = Index + 4; Index < position; Index++) {
	                          charCode = source.charCodeAt(Index);
	                          // A valid sequence comprises four hexdigits (case-
	                          // insensitive) that form a single hexadecimal value.
	                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                            // Invalid Unicode escape sequence.
	                            abort();
	                          }
	                        }
	                        // Revive the escaped character.
	                        value += fromCharCode("0x" + source.slice(begin, Index));
	                        break;
	                      default:
	                        // Invalid escape sequence.
	                        abort();
	                    }
	                  } else {
	                    if (charCode == 34) {
	                      // An unescaped double-quote character marks the end of the
	                      // string.
	                      break;
	                    }
	                    charCode = source.charCodeAt(Index);
	                    begin = Index;
	                    // Optimize for the common case where a string is valid.
	                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                      charCode = source.charCodeAt(++Index);
	                    }
	                    // Append the string as-is.
	                    value += source.slice(begin, Index);
	                  }
	                }
	                if (source.charCodeAt(Index) == 34) {
	                  // Advance to the next character and return the revived string.
	                  Index++;
	                  return value;
	                }
	                // Unterminated string.
	                abort();
	              default:
	                // Parse numbers and literals.
	                begin = Index;
	                // Advance past the negative sign, if one is specified.
	                if (charCode == 45) {
	                  isSigned = true;
	                  charCode = source.charCodeAt(++Index);
	                }
	                // Parse an integer or floating-point value.
	                if (charCode >= 48 && charCode <= 57) {
	                  // Leading zeroes are interpreted as octal literals.
	                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                    // Illegal octal literal.
	                    abort();
	                  }
	                  isSigned = false;
	                  // Parse the integer component.
	                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                  // Floats cannot contain a leading decimal point; however, this
	                  // case is already accounted for by the parser.
	                  if (source.charCodeAt(Index) == 46) {
	                    position = ++Index;
	                    // Parse the decimal component.
	                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal trailing decimal.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Parse exponents. The `e` denoting the exponent is
	                  // case-insensitive.
	                  charCode = source.charCodeAt(Index);
	                  if (charCode == 101 || charCode == 69) {
	                    charCode = source.charCodeAt(++Index);
	                    // Skip past the sign following the exponent, if one is
	                    // specified.
	                    if (charCode == 43 || charCode == 45) {
	                      Index++;
	                    }
	                    // Parse the exponential component.
	                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal empty exponent.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Coerce the parsed value to a JavaScript number.
	                  return +source.slice(begin, Index);
	                }
	                // A negative sign may only precede numbers.
	                if (isSigned) {
	                  abort();
	                }
	                // `true`, `false`, and `null` literals.
	                if (source.slice(Index, Index + 4) == "true") {
	                  Index += 4;
	                  return true;
	                } else if (source.slice(Index, Index + 5) == "false") {
	                  Index += 5;
	                  return false;
	                } else if (source.slice(Index, Index + 4) == "null") {
	                  Index += 4;
	                  return null;
	                }
	                // Unrecognized token.
	                abort();
	            }
	          }
	          // Return the sentinel `$` character if the parser has reached the end
	          // of the source string.
	          return "$";
	        };
	
	        // Internal: Parses a JSON `value` token.
	        var get = function (value) {
	          var results, hasMembers;
	          if (value == "$") {
	            // Unexpected end of input.
	            abort();
	          }
	          if (typeof value == "string") {
	            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	              // Remove the sentinel `@` character.
	              return value.slice(1);
	            }
	            // Parse object and array literals.
	            if (value == "[") {
	              // Parses a JSON array, returning a new JavaScript array.
	              results = [];
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing square bracket marks the end of the array literal.
	                if (value == "]") {
	                  break;
	                }
	                // If the array literal contains elements, the current token
	                // should be a comma separating the previous element from the
	                // next.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "]") {
	                      // Unexpected trailing `,` in array literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each array element.
	                    abort();
	                  }
	                }
	                // Elisions and leading commas are not permitted.
	                if (value == ",") {
	                  abort();
	                }
	                results.push(get(value));
	              }
	              return results;
	            } else if (value == "{") {
	              // Parses a JSON object, returning a new JavaScript object.
	              results = {};
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing curly brace marks the end of the object literal.
	                if (value == "}") {
	                  break;
	                }
	                // If the object literal contains members, the current token
	                // should be a comma separator.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "}") {
	                      // Unexpected trailing `,` in object literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each object member.
	                    abort();
	                  }
	                }
	                // Leading commas are not permitted, object property names must be
	                // double-quoted strings, and a `:` must separate each property
	                // name and value.
	                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                  abort();
	                }
	                results[value.slice(1)] = get(lex());
	              }
	              return results;
	            }
	            // Unexpected token encountered.
	            abort();
	          }
	          return value;
	        };
	
	        // Internal: Updates a traversed object member.
	        var update = function (source, property, callback) {
	          var element = walk(source, property, callback);
	          if (element === undef) {
	            delete source[property];
	          } else {
	            source[property] = element;
	          }
	        };
	
	        // Internal: Recursively traverses a parsed JSON object, invoking the
	        // `callback` function for each value. This is an implementation of the
	        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	        var walk = function (source, property, callback) {
	          var value = source[property], length;
	          if (typeof value == "object" && value) {
	            // `forEach` can't be used to traverse an array in Opera <= 8.54
	            // because its `Object#hasOwnProperty` implementation returns `false`
	            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	            if (getClass.call(value) == arrayClass) {
	              for (length = value.length; length--;) {
	                update(value, length, callback);
	              }
	            } else {
	              forEach(value, function (property) {
	                update(value, property, callback);
	              });
	            }
	          }
	          return callback.call(source, property, value);
	        };
	
	        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	        exports.parse = function (source, callback) {
	          var result, value;
	          Index = 0;
	          Source = "" + source;
	          result = get(lex());
	          // If a JSON string contains multiple tokens, it is invalid.
	          if (lex() != "$") {
	            abort();
	          }
	          // Reset the parser state.
	          Index = Source = null;
	          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	        };
	      }
	    }
	
	    exports["runInContext"] = runInContext;
	    return exports;
	  }
	
	  if (freeExports && !isLoader) {
	    // Export for CommonJS environments.
	    runInContext(root, freeExports);
	  } else {
	    // Export for web browsers and JavaScript engines.
	    var nativeJSON = root.JSON,
	        previousJSON = root["JSON3"],
	        isRestored = false;
	
	    var JSON3 = runInContext(root, (root["JSON3"] = {
	      // Public: Restores the original value of the global `JSON` object and
	      // returns a reference to the `JSON3` object.
	      "noConflict": function () {
	        if (!isRestored) {
	          isRestored = true;
	          root.JSON = nativeJSON;
	          root["JSON3"] = previousJSON;
	          nativeJSON = previousJSON = null;
	        }
	        return JSON3;
	      }
	    }));
	
	    root.JSON = {
	      "parse": JSON3.parse,
	      "stringify": JSON3.stringify
	    };
	  }
	
	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module), (function() { return this; }())))

/***/ },

/***/ "./node_modules/webpack/buildin/amd-options.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },

/***/ "./node_modules/sockjs-client/lib/version.js":
/***/ function(module, exports) {

	module.exports = '1.1.1';


/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/iframe.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var eventUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , browser = __webpack_require__("./node_modules/sockjs-client/lib/utils/browser.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:utils:iframe');
	}
	
	module.exports = {
	  WPrefix: '_jp'
	, currentWindowId: null
	
	, polluteGlobalNamespace: function() {
	    if (!(module.exports.WPrefix in global)) {
	      global[module.exports.WPrefix] = {};
	    }
	  }
	
	, postMessage: function(type, data) {
	    if (global.parent !== global) {
	      global.parent.postMessage(JSON3.stringify({
	        windowId: module.exports.currentWindowId
	      , type: type
	      , data: data || ''
	      }), '*');
	    } else {
	      debug('Cannot postMessage, no parent window.', type, data);
	    }
	  }
	
	, createIframe: function(iframeUrl, errorCallback) {
	    var iframe = global.document.createElement('iframe');
	    var tref, unloadRef;
	    var unattach = function() {
	      debug('unattach');
	      clearTimeout(tref);
	      // Explorer had problems with that.
	      try {
	        iframe.onload = null;
	      } catch (x) {
	        // intentionally empty
	      }
	      iframe.onerror = null;
	    };
	    var cleanup = function() {
	      debug('cleanup');
	      if (iframe) {
	        unattach();
	        // This timeout makes chrome fire onbeforeunload event
	        // within iframe. Without the timeout it goes straight to
	        // onunload.
	        setTimeout(function() {
	          if (iframe) {
	            iframe.parentNode.removeChild(iframe);
	          }
	          iframe = null;
	        }, 0);
	        eventUtils.unloadDel(unloadRef);
	      }
	    };
	    var onerror = function(err) {
	      debug('onerror', err);
	      if (iframe) {
	        cleanup();
	        errorCallback(err);
	      }
	    };
	    var post = function(msg, origin) {
	      debug('post', msg, origin);
	      try {
	        // When the iframe is not loaded, IE raises an exception
	        // on 'contentWindow'.
	        setTimeout(function() {
	          if (iframe && iframe.contentWindow) {
	            iframe.contentWindow.postMessage(msg, origin);
	          }
	        }, 0);
	      } catch (x) {
	        // intentionally empty
	      }
	    };
	
	    iframe.src = iframeUrl;
	    iframe.style.display = 'none';
	    iframe.style.position = 'absolute';
	    iframe.onerror = function() {
	      onerror('onerror');
	    };
	    iframe.onload = function() {
	      debug('onload');
	      // `onload` is triggered before scripts on the iframe are
	      // executed. Give it few seconds to actually load stuff.
	      clearTimeout(tref);
	      tref = setTimeout(function() {
	        onerror('onload timeout');
	      }, 2000);
	    };
	    global.document.body.appendChild(iframe);
	    tref = setTimeout(function() {
	      onerror('timeout');
	    }, 15000);
	    unloadRef = eventUtils.unloadAdd(cleanup);
	    return {
	      post: post
	    , cleanup: cleanup
	    , loaded: unattach
	    };
	  }
	
	/* jshint undef: false, newcap: false */
	/* eslint no-undef: 0, new-cap: 0 */
	, createHtmlfile: function(iframeUrl, errorCallback) {
	    var axo = ['Active'].concat('Object').join('X');
	    var doc = new global[axo]('htmlfile');
	    var tref, unloadRef;
	    var iframe;
	    var unattach = function() {
	      clearTimeout(tref);
	      iframe.onerror = null;
	    };
	    var cleanup = function() {
	      if (doc) {
	        unattach();
	        eventUtils.unloadDel(unloadRef);
	        iframe.parentNode.removeChild(iframe);
	        iframe = doc = null;
	        CollectGarbage();
	      }
	    };
	    var onerror = function(r) {
	      debug('onerror', r);
	      if (doc) {
	        cleanup();
	        errorCallback(r);
	      }
	    };
	    var post = function(msg, origin) {
	      try {
	        // When the iframe is not loaded, IE raises an exception
	        // on 'contentWindow'.
	        setTimeout(function() {
	          if (iframe && iframe.contentWindow) {
	              iframe.contentWindow.postMessage(msg, origin);
	          }
	        }, 0);
	      } catch (x) {
	        // intentionally empty
	      }
	    };
	
	    doc.open();
	    doc.write('<html><s' + 'cript>' +
	              'document.domain="' + global.document.domain + '";' +
	              '</s' + 'cript></html>');
	    doc.close();
	    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
	    var c = doc.createElement('div');
	    doc.body.appendChild(c);
	    iframe = doc.createElement('iframe');
	    c.appendChild(iframe);
	    iframe.src = iframeUrl;
	    iframe.onerror = function() {
	      onerror('onerror');
	    };
	    tref = setTimeout(function() {
	      onerror('timeout');
	    }, 15000);
	    unloadRef = eventUtils.unloadAdd(cleanup);
	    return {
	      post: post
	    , cleanup: cleanup
	    , loaded: unattach
	    };
	  }
	};
	
	module.exports.iframeEnabled = false;
	if (global.document) {
	  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
	  // huge delay, or not at all.
	  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
	    typeof global.postMessage === 'object') && (!browser.isKonqueror());
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/object.js":
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  isObject: function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  }
	
	, extend: function(obj) {
	    if (!this.isObject(obj)) {
	      return obj;
	    }
	    var source, prop;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	      source = arguments[i];
	      for (prop in source) {
	        if (Object.prototype.hasOwnProperty.call(source, prop)) {
	          obj[prop] = source[prop];
	        }
	      }
	    }
	    return obj;
	  }
	};


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/htmlfile.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , HtmlfileReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/receiver/htmlfile.js")
	  , XHRLocalObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-local.js")
	  , AjaxBasedTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/ajax-based.js")
	  ;
	
	function HtmlFileTransport(transUrl) {
	  if (!HtmlfileReceiver.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
	}
	
	inherits(HtmlFileTransport, AjaxBasedTransport);
	
	HtmlFileTransport.enabled = function(info) {
	  return HtmlfileReceiver.enabled && info.sameOrigin;
	};
	
	HtmlFileTransport.transportName = 'htmlfile';
	HtmlFileTransport.roundTrips = 2;
	
	module.exports = HtmlFileTransport;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/receiver/htmlfile.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , iframeUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/iframe.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , random = __webpack_require__("./node_modules/sockjs-client/lib/utils/random.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:receiver:htmlfile');
	}
	
	function HtmlfileReceiver(url) {
	  debug(url);
	  EventEmitter.call(this);
	  var self = this;
	  iframeUtils.polluteGlobalNamespace();
	
	  this.id = 'a' + random.string(6);
	  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));
	
	  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
	  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
	      iframeUtils.createHtmlfile : iframeUtils.createIframe;
	
	  global[iframeUtils.WPrefix][this.id] = {
	    start: function() {
	      debug('start');
	      self.iframeObj.loaded();
	    }
	  , message: function(data) {
	      debug('message', data);
	      self.emit('message', data);
	    }
	  , stop: function() {
	      debug('stop');
	      self._cleanup();
	      self._close('network');
	    }
	  };
	  this.iframeObj = constructFunc(url, function() {
	    debug('callback');
	    self._cleanup();
	    self._close('permanent');
	  });
	}
	
	inherits(HtmlfileReceiver, EventEmitter);
	
	HtmlfileReceiver.prototype.abort = function() {
	  debug('abort');
	  this._cleanup();
	  this._close('user');
	};
	
	HtmlfileReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  if (this.iframeObj) {
	    this.iframeObj.cleanup();
	    this.iframeObj = null;
	  }
	  delete global[iframeUtils.WPrefix][this.id];
	};
	
	HtmlfileReceiver.prototype._close = function(reason) {
	  debug('_close', reason);
	  this.emit('close', null, reason);
	  this.removeAllListeners();
	};
	
	HtmlfileReceiver.htmlfileEnabled = false;
	
	// obfuscate to avoid firewalls
	var axo = ['Active'].concat('Object').join('X');
	if (axo in global) {
	  try {
	    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
	  } catch (x) {
	    // intentionally empty
	  }
	}
	
	HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;
	
	module.exports = HtmlfileReceiver;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/xhr-polling.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , AjaxBasedTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/ajax-based.js")
	  , XhrReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/receiver/xhr.js")
	  , XHRCorsObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js")
	  , XHRLocalObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-local.js")
	  ;
	
	function XhrPollingTransport(transUrl) {
	  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
	}
	
	inherits(XhrPollingTransport, AjaxBasedTransport);
	
	XhrPollingTransport.enabled = function(info) {
	  if (info.nullOrigin) {
	    return false;
	  }
	
	  if (XHRLocalObject.enabled && info.sameOrigin) {
	    return true;
	  }
	  return XHRCorsObject.enabled;
	};
	
	XhrPollingTransport.transportName = 'xhr-polling';
	XhrPollingTransport.roundTrips = 2; // preflight, ajax
	
	module.exports = XhrPollingTransport;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/xdr-polling.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , AjaxBasedTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/ajax-based.js")
	  , XdrStreamingTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/xdr-streaming.js")
	  , XhrReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/receiver/xhr.js")
	  , XDRObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xdr.js")
	  ;
	
	function XdrPollingTransport(transUrl) {
	  if (!XDRObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
	}
	
	inherits(XdrPollingTransport, AjaxBasedTransport);
	
	XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
	XdrPollingTransport.transportName = 'xdr-polling';
	XdrPollingTransport.roundTrips = 2; // preflight, ajax
	
	module.exports = XdrPollingTransport;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/jsonp-polling.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// The simplest and most robust transport, using the well-know cross
	// domain hack - JSONP. This transport is quite inefficient - one
	// message could use up to one http request. But at least it works almost
	// everywhere.
	// Known limitations:
	//   o you will get a spinning cursor
	//   o for Konqueror a dumb timer is needed to detect errors
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , SenderReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/lib/sender-receiver.js")
	  , JsonpReceiver = __webpack_require__("./node_modules/sockjs-client/lib/transport/receiver/jsonp.js")
	  , jsonpSender = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/jsonp.js")
	  ;
	
	function JsonPTransport(transUrl) {
	  if (!JsonPTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
	}
	
	inherits(JsonPTransport, SenderReceiver);
	
	JsonPTransport.enabled = function() {
	  return !!global.document;
	};
	
	JsonPTransport.transportName = 'jsonp-polling';
	JsonPTransport.roundTrips = 1;
	JsonPTransport.needBody = true;
	
	module.exports = JsonPTransport;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/receiver/jsonp.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var utils = __webpack_require__("./node_modules/sockjs-client/lib/utils/iframe.js")
	  , random = __webpack_require__("./node_modules/sockjs-client/lib/utils/random.js")
	  , browser = __webpack_require__("./node_modules/sockjs-client/lib/utils/browser.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:receiver:jsonp');
	}
	
	function JsonpReceiver(url) {
	  debug(url);
	  var self = this;
	  EventEmitter.call(this);
	
	  utils.polluteGlobalNamespace();
	
	  this.id = 'a' + random.string(6);
	  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));
	
	  global[utils.WPrefix][this.id] = this._callback.bind(this);
	  this._createScript(urlWithId);
	
	  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
	  this.timeoutId = setTimeout(function() {
	    debug('timeout');
	    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
	  }, JsonpReceiver.timeout);
	}
	
	inherits(JsonpReceiver, EventEmitter);
	
	JsonpReceiver.prototype.abort = function() {
	  debug('abort');
	  if (global[utils.WPrefix][this.id]) {
	    var err = new Error('JSONP user aborted read');
	    err.code = 1000;
	    this._abort(err);
	  }
	};
	
	JsonpReceiver.timeout = 35000;
	JsonpReceiver.scriptErrorTimeout = 1000;
	
	JsonpReceiver.prototype._callback = function(data) {
	  debug('_callback', data);
	  this._cleanup();
	
	  if (this.aborting) {
	    return;
	  }
	
	  if (data) {
	    debug('message', data);
	    this.emit('message', data);
	  }
	  this.emit('close', null, 'network');
	  this.removeAllListeners();
	};
	
	JsonpReceiver.prototype._abort = function(err) {
	  debug('_abort', err);
	  this._cleanup();
	  this.aborting = true;
	  this.emit('close', err.code, err.message);
	  this.removeAllListeners();
	};
	
	JsonpReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  clearTimeout(this.timeoutId);
	  if (this.script2) {
	    this.script2.parentNode.removeChild(this.script2);
	    this.script2 = null;
	  }
	  if (this.script) {
	    var script = this.script;
	    // Unfortunately, you can't really abort script loading of
	    // the script.
	    script.parentNode.removeChild(script);
	    script.onreadystatechange = script.onerror =
	        script.onload = script.onclick = null;
	    this.script = null;
	  }
	  delete global[utils.WPrefix][this.id];
	};
	
	JsonpReceiver.prototype._scriptError = function() {
	  debug('_scriptError');
	  var self = this;
	  if (this.errorTimer) {
	    return;
	  }
	
	  this.errorTimer = setTimeout(function() {
	    if (!self.loadedOkay) {
	      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
	    }
	  }, JsonpReceiver.scriptErrorTimeout);
	};
	
	JsonpReceiver.prototype._createScript = function(url) {
	  debug('_createScript', url);
	  var self = this;
	  var script = this.script = global.document.createElement('script');
	  var script2;  // Opera synchronous load trick.
	
	  script.id = 'a' + random.string(8);
	  script.src = url;
	  script.type = 'text/javascript';
	  script.charset = 'UTF-8';
	  script.onerror = this._scriptError.bind(this);
	  script.onload = function() {
	    debug('onload');
	    self._abort(new Error('JSONP script loaded abnormally (onload)'));
	  };
	
	  // IE9 fires 'error' event after onreadystatechange or before, in random order.
	  // Use loadedOkay to determine if actually errored
	  script.onreadystatechange = function() {
	    debug('onreadystatechange', script.readyState);
	    if (/loaded|closed/.test(script.readyState)) {
	      if (script && script.htmlFor && script.onclick) {
	        self.loadedOkay = true;
	        try {
	          // In IE, actually execute the script.
	          script.onclick();
	        } catch (x) {
	          // intentionally empty
	        }
	      }
	      if (script) {
	        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
	      }
	    }
	  };
	  // IE: event/htmlFor/onclick trick.
	  // One can't rely on proper order for onreadystatechange. In order to
	  // make sure, set a 'htmlFor' and 'event' properties, so that
	  // script code will be installed as 'onclick' handler for the
	  // script object. Later, onreadystatechange, manually execute this
	  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
	  // set. For reference see:
	  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
	  // Also, read on that about script ordering:
	  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
	  if (typeof script.async === 'undefined' && global.document.attachEvent) {
	    // According to mozilla docs, in recent browsers script.async defaults
	    // to 'true', so we may use it to detect a good browser:
	    // https://developer.mozilla.org/en/HTML/Element/script
	    if (!browser.isOpera()) {
	      // Naively assume we're in IE
	      try {
	        script.htmlFor = script.id;
	        script.event = 'onclick';
	      } catch (x) {
	        // intentionally empty
	      }
	      script.async = true;
	    } else {
	      // Opera, second sync script hack
	      script2 = this.script2 = global.document.createElement('script');
	      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
	      script.async = script2.async = false;
	    }
	  }
	  if (typeof script.async !== 'undefined') {
	    script.async = true;
	  }
	
	  var head = global.document.getElementsByTagName('head')[0];
	  head.insertBefore(script, head.firstChild);
	  if (script2) {
	    head.insertBefore(script2, head.firstChild);
	  }
	};
	
	module.exports = JsonpReceiver;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/sender/jsonp.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var random = __webpack_require__("./node_modules/sockjs-client/lib/utils/random.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:sender:jsonp');
	}
	
	var form, area;
	
	function createIframe(id) {
	  debug('createIframe', id);
	  try {
	    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	    return global.document.createElement('<iframe name="' + id + '">');
	  } catch (x) {
	    var iframe = global.document.createElement('iframe');
	    iframe.name = id;
	    return iframe;
	  }
	}
	
	function createForm() {
	  debug('createForm');
	  form = global.document.createElement('form');
	  form.style.display = 'none';
	  form.style.position = 'absolute';
	  form.method = 'POST';
	  form.enctype = 'application/x-www-form-urlencoded';
	  form.acceptCharset = 'UTF-8';
	
	  area = global.document.createElement('textarea');
	  area.name = 'd';
	  form.appendChild(area);
	
	  global.document.body.appendChild(form);
	}
	
	module.exports = function(url, payload, callback) {
	  debug(url, payload);
	  if (!form) {
	    createForm();
	  }
	  var id = 'a' + random.string(8);
	  form.target = id;
	  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);
	
	  var iframe = createIframe(id);
	  iframe.id = id;
	  iframe.style.display = 'none';
	  form.appendChild(iframe);
	
	  try {
	    area.value = payload;
	  } catch (e) {
	    // seriously broken browsers get here
	  }
	  form.submit();
	
	  var completed = function(err) {
	    debug('completed', id, err);
	    if (!iframe.onerror) {
	      return;
	    }
	    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
	    // Opera mini doesn't like if we GC iframe
	    // immediately, thus this timeout.
	    setTimeout(function() {
	      debug('cleaning up', id);
	      iframe.parentNode.removeChild(iframe);
	      iframe = null;
	    }, 500);
	    area.value = '';
	    // It is not possible to detect if the iframe succeeded or
	    // failed to submit our form.
	    callback(err);
	  };
	  iframe.onerror = function() {
	    debug('onerror', id);
	    completed();
	  };
	  iframe.onload = function() {
	    debug('onload', id);
	    completed();
	  };
	  iframe.onreadystatechange = function(e) {
	    debug('onreadystatechange', id, iframe.readyState, e);
	    if (iframe.readyState === 'complete') {
	      completed();
	    }
	  };
	  return function() {
	    debug('aborted', id);
	    completed(new Error('Aborted'));
	  };
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/main.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	__webpack_require__("./node_modules/sockjs-client/lib/shims.js");
	
	var URL = __webpack_require__("./node_modules/url-parse/index.js")
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , random = __webpack_require__("./node_modules/sockjs-client/lib/utils/random.js")
	  , escape = __webpack_require__("./node_modules/sockjs-client/lib/utils/escape.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , eventUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , transport = __webpack_require__("./node_modules/sockjs-client/lib/utils/transport.js")
	  , objectUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/object.js")
	  , browser = __webpack_require__("./node_modules/sockjs-client/lib/utils/browser.js")
	  , log = __webpack_require__("./node_modules/sockjs-client/lib/utils/log.js")
	  , Event = __webpack_require__("./node_modules/sockjs-client/lib/event/event.js")
	  , EventTarget = __webpack_require__("./node_modules/sockjs-client/lib/event/eventtarget.js")
	  , loc = __webpack_require__("./node_modules/sockjs-client/lib/location.js")
	  , CloseEvent = __webpack_require__("./node_modules/sockjs-client/lib/event/close.js")
	  , TransportMessageEvent = __webpack_require__("./node_modules/sockjs-client/lib/event/trans-message.js")
	  , InfoReceiver = __webpack_require__("./node_modules/sockjs-client/lib/info-receiver.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:main');
	}
	
	var transports;
	
	// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
	function SockJS(url, protocols, options) {
	  if (!(this instanceof SockJS)) {
	    return new SockJS(url, protocols, options);
	  }
	  if (arguments.length < 1) {
	    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
	  }
	  EventTarget.call(this);
	
	  this.readyState = SockJS.CONNECTING;
	  this.extensions = '';
	  this.protocol = '';
	
	  // non-standard extension
	  options = options || {};
	  if (options.protocols_whitelist) {
	    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
	  }
	  this._transportsWhitelist = options.transports;
	  this._transportOptions = options.transportOptions || {};
	
	  var sessionId = options.sessionId || 8;
	  if (typeof sessionId === 'function') {
	    this._generateSessionId = sessionId;
	  } else if (typeof sessionId === 'number') {
	    this._generateSessionId = function() {
	      return random.string(sessionId);
	    };
	  } else {
	    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
	  }
	
	  this._server = options.server || random.numberString(1000);
	
	  // Step 1 of WS spec - parse and validate the url. Issue #8
	  var parsedUrl = new URL(url);
	  if (!parsedUrl.host || !parsedUrl.protocol) {
	    throw new SyntaxError("The URL '" + url + "' is invalid");
	  } else if (parsedUrl.hash) {
	    throw new SyntaxError('The URL must not contain a fragment');
	  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
	    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
	  }
	
	  var secure = parsedUrl.protocol === 'https:';
	  // Step 2 - don't allow secure origin with an insecure protocol
	  if (loc.protocol === 'https' && !secure) {
	    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
	  }
	
	  // Step 3 - check port access - no need here
	  // Step 4 - parse protocols argument
	  if (!protocols) {
	    protocols = [];
	  } else if (!Array.isArray(protocols)) {
	    protocols = [protocols];
	  }
	
	  // Step 5 - check protocols argument
	  var sortedProtocols = protocols.sort();
	  sortedProtocols.forEach(function(proto, i) {
	    if (!proto) {
	      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
	    }
	    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
	      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
	    }
	  });
	
	  // Step 6 - convert origin
	  var o = urlUtils.getOrigin(loc.href);
	  this._origin = o ? o.toLowerCase() : null;
	
	  // remove the trailing slash
	  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));
	
	  // store the sanitized url
	  this.url = parsedUrl.href;
	  debug('using url', this.url);
	
	  // Step 7 - start connection in background
	  // obtain server info
	  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
	  this._urlInfo = {
	    nullOrigin: !browser.hasDomain()
	  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
	  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
	  };
	
	  this._ir = new InfoReceiver(this.url, this._urlInfo);
	  this._ir.once('finish', this._receiveInfo.bind(this));
	}
	
	inherits(SockJS, EventTarget);
	
	function userSetCode(code) {
	  return code === 1000 || (code >= 3000 && code <= 4999);
	}
	
	SockJS.prototype.close = function(code, reason) {
	  // Step 1
	  if (code && !userSetCode(code)) {
	    throw new Error('InvalidAccessError: Invalid code');
	  }
	  // Step 2.4 states the max is 123 bytes, but we are just checking length
	  if (reason && reason.length > 123) {
	    throw new SyntaxError('reason argument has an invalid length');
	  }
	
	  // Step 3.1
	  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
	    return;
	  }
	
	  // TODO look at docs to determine how to set this
	  var wasClean = true;
	  this._close(code || 1000, reason || 'Normal closure', wasClean);
	};
	
	SockJS.prototype.send = function(data) {
	  // #13 - convert anything non-string to string
	  // TODO this currently turns objects into [object Object]
	  if (typeof data !== 'string') {
	    data = '' + data;
	  }
	  if (this.readyState === SockJS.CONNECTING) {
	    throw new Error('InvalidStateError: The connection has not been established yet');
	  }
	  if (this.readyState !== SockJS.OPEN) {
	    return;
	  }
	  this._transport.send(escape.quote(data));
	};
	
	SockJS.version = __webpack_require__("./node_modules/sockjs-client/lib/version.js");
	
	SockJS.CONNECTING = 0;
	SockJS.OPEN = 1;
	SockJS.CLOSING = 2;
	SockJS.CLOSED = 3;
	
	SockJS.prototype._receiveInfo = function(info, rtt) {
	  debug('_receiveInfo', rtt);
	  this._ir = null;
	  if (!info) {
	    this._close(1002, 'Cannot connect to server');
	    return;
	  }
	
	  // establish a round-trip timeout (RTO) based on the
	  // round-trip time (RTT)
	  this._rto = this.countRTO(rtt);
	  // allow server to override url used for the actual transport
	  this._transUrl = info.base_url ? info.base_url : this.url;
	  info = objectUtils.extend(info, this._urlInfo);
	  debug('info', info);
	  // determine list of desired and supported transports
	  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
	  this._transports = enabledTransports.main;
	  debug(this._transports.length + ' enabled transports');
	
	  this._connect();
	};
	
	SockJS.prototype._connect = function() {
	  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
	    debug('attempt', Transport.transportName);
	    if (Transport.needBody) {
	      if (!global.document.body ||
	          (typeof global.document.readyState !== 'undefined' &&
	            global.document.readyState !== 'complete' &&
	            global.document.readyState !== 'interactive')) {
	        debug('waiting for body');
	        this._transports.unshift(Transport);
	        eventUtils.attachEvent('load', this._connect.bind(this));
	        return;
	      }
	    }
	
	    // calculate timeout based on RTO and round trips. Default to 5s
	    var timeoutMs = (this._rto * Transport.roundTrips) || 5000;
	    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
	    debug('using timeout', timeoutMs);
	
	    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
	    var options = this._transportOptions[Transport.transportName];
	    debug('transport url', transportUrl);
	    var transportObj = new Transport(transportUrl, this._transUrl, options);
	    transportObj.on('message', this._transportMessage.bind(this));
	    transportObj.once('close', this._transportClose.bind(this));
	    transportObj.transportName = Transport.transportName;
	    this._transport = transportObj;
	
	    return;
	  }
	  this._close(2000, 'All transports failed', false);
	};
	
	SockJS.prototype._transportTimeout = function() {
	  debug('_transportTimeout');
	  if (this.readyState === SockJS.CONNECTING) {
	    this._transportClose(2007, 'Transport timed out');
	  }
	};
	
	SockJS.prototype._transportMessage = function(msg) {
	  debug('_transportMessage', msg);
	  var self = this
	    , type = msg.slice(0, 1)
	    , content = msg.slice(1)
	    , payload
	    ;
	
	  // first check for messages that don't need a payload
	  switch (type) {
	    case 'o':
	      this._open();
	      return;
	    case 'h':
	      this.dispatchEvent(new Event('heartbeat'));
	      debug('heartbeat', this.transport);
	      return;
	  }
	
	  if (content) {
	    try {
	      payload = JSON3.parse(content);
	    } catch (e) {
	      debug('bad json', content);
	    }
	  }
	
	  if (typeof payload === 'undefined') {
	    debug('empty payload', content);
	    return;
	  }
	
	  switch (type) {
	    case 'a':
	      if (Array.isArray(payload)) {
	        payload.forEach(function(p) {
	          debug('message', self.transport, p);
	          self.dispatchEvent(new TransportMessageEvent(p));
	        });
	      }
	      break;
	    case 'm':
	      debug('message', this.transport, payload);
	      this.dispatchEvent(new TransportMessageEvent(payload));
	      break;
	    case 'c':
	      if (Array.isArray(payload) && payload.length === 2) {
	        this._close(payload[0], payload[1], true);
	      }
	      break;
	  }
	};
	
	SockJS.prototype._transportClose = function(code, reason) {
	  debug('_transportClose', this.transport, code, reason);
	  if (this._transport) {
	    this._transport.removeAllListeners();
	    this._transport = null;
	    this.transport = null;
	  }
	
	  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
	    this._connect();
	    return;
	  }
	
	  this._close(code, reason);
	};
	
	SockJS.prototype._open = function() {
	  debug('_open', this._transport.transportName, this.readyState);
	  if (this.readyState === SockJS.CONNECTING) {
	    if (this._transportTimeoutId) {
	      clearTimeout(this._transportTimeoutId);
	      this._transportTimeoutId = null;
	    }
	    this.readyState = SockJS.OPEN;
	    this.transport = this._transport.transportName;
	    this.dispatchEvent(new Event('open'));
	    debug('connected', this.transport);
	  } else {
	    // The server might have been restarted, and lost track of our
	    // connection.
	    this._close(1006, 'Server lost session');
	  }
	};
	
	SockJS.prototype._close = function(code, reason, wasClean) {
	  debug('_close', this.transport, code, reason, wasClean, this.readyState);
	  var forceFail = false;
	
	  if (this._ir) {
	    forceFail = true;
	    this._ir.close();
	    this._ir = null;
	  }
	  if (this._transport) {
	    this._transport.close();
	    this._transport = null;
	    this.transport = null;
	  }
	
	  if (this.readyState === SockJS.CLOSED) {
	    throw new Error('InvalidStateError: SockJS has already been closed');
	  }
	
	  this.readyState = SockJS.CLOSING;
	  setTimeout(function() {
	    this.readyState = SockJS.CLOSED;
	
	    if (forceFail) {
	      this.dispatchEvent(new Event('error'));
	    }
	
	    var e = new CloseEvent('close');
	    e.wasClean = wasClean || false;
	    e.code = code || 1000;
	    e.reason = reason;
	
	    this.dispatchEvent(e);
	    this.onmessage = this.onclose = this.onerror = null;
	    debug('disconnected');
	  }.bind(this), 0);
	};
	
	// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
	// and RFC 2988.
	SockJS.prototype.countRTO = function(rtt) {
	  // In a local environment, when using IE8/9 and the `jsonp-polling`
	  // transport the time needed to establish a connection (the time that pass
	  // from the opening of the transport to the call of `_dispatchOpen`) is
	  // around 200msec (the lower bound used in the article above) and this
	  // causes spurious timeouts. For this reason we calculate a value slightly
	  // larger than that used in the article.
	  if (rtt > 100) {
	    return 4 * rtt; // rto > 400msec
	  }
	  return 300 + rtt; // 300msec < rto <= 400msec
	};
	
	module.exports = function(availableTransports) {
	  transports = transport(availableTransports);
	  __webpack_require__("./node_modules/sockjs-client/lib/iframe-bootstrap.js")(SockJS, availableTransports);
	  return SockJS;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/shims.js":
/***/ function(module, exports) {

	/* eslint-disable */
	/* jscs: disable */
	'use strict';
	
	// pulled specific shims from https://github.com/es-shims/es5-shim
	
	var ArrayPrototype = Array.prototype;
	var ObjectPrototype = Object.prototype;
	var FunctionPrototype = Function.prototype;
	var StringPrototype = String.prototype;
	var array_slice = ArrayPrototype.slice;
	
	var _toString = ObjectPrototype.toString;
	var isFunction = function (val) {
	    return ObjectPrototype.toString.call(val) === '[object Function]';
	};
	var isArray = function isArray(obj) {
	    return _toString.call(obj) === '[object Array]';
	};
	var isString = function isString(obj) {
	    return _toString.call(obj) === '[object String]';
	};
	
	var supportsDescriptors = Object.defineProperty && (function () {
	    try {
	        Object.defineProperty({}, 'x', {});
	        return true;
	    } catch (e) { /* this is ES3 */
	        return false;
	    }
	}());
	
	// Define configurable, writable and non-enumerable props
	// if they don't exist.
	var defineProperty;
	if (supportsDescriptors) {
	    defineProperty = function (object, name, method, forceAssign) {
	        if (!forceAssign && (name in object)) { return; }
	        Object.defineProperty(object, name, {
	            configurable: true,
	            enumerable: false,
	            writable: true,
	            value: method
	        });
	    };
	} else {
	    defineProperty = function (object, name, method, forceAssign) {
	        if (!forceAssign && (name in object)) { return; }
	        object[name] = method;
	    };
	}
	var defineProperties = function (object, map, forceAssign) {
	    for (var name in map) {
	        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
	          defineProperty(object, name, map[name], forceAssign);
	        }
	    }
	};
	
	var toObject = function (o) {
	    if (o == null) { // this matches both null and undefined
	        throw new TypeError("can't convert " + o + ' to object');
	    }
	    return Object(o);
	};
	
	//
	// Util
	// ======
	//
	
	// ES5 9.4
	// http://es5.github.com/#x9.4
	// http://jsperf.com/to-integer
	
	function toInteger(num) {
	    var n = +num;
	    if (n !== n) { // isNaN
	        n = 0;
	    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
	        n = (n > 0 || -1) * Math.floor(Math.abs(n));
	    }
	    return n;
	}
	
	function ToUint32(x) {
	    return x >>> 0;
	}
	
	//
	// Function
	// ========
	//
	
	// ES-5 15.3.4.5
	// http://es5.github.com/#x15.3.4.5
	
	function Empty() {}
	
	defineProperties(FunctionPrototype, {
	    bind: function bind(that) { // .length is 1
	        // 1. Let Target be the this value.
	        var target = this;
	        // 2. If IsCallable(Target) is false, throw a TypeError exception.
	        if (!isFunction(target)) {
	            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
	        }
	        // 3. Let A be a new (possibly empty) internal list of all of the
	        //   argument values provided after thisArg (arg1, arg2 etc), in order.
	        // XXX slicedArgs will stand in for "A" if used
	        var args = array_slice.call(arguments, 1); // for normal call
	        // 4. Let F be a new native ECMAScript object.
	        // 11. Set the [[Prototype]] internal property of F to the standard
	        //   built-in Function prototype object as specified in 15.3.3.1.
	        // 12. Set the [[Call]] internal property of F as described in
	        //   15.3.4.5.1.
	        // 13. Set the [[Construct]] internal property of F as described in
	        //   15.3.4.5.2.
	        // 14. Set the [[HasInstance]] internal property of F as described in
	        //   15.3.4.5.3.
	        var binder = function () {
	
	            if (this instanceof bound) {
	                // 15.3.4.5.2 [[Construct]]
	                // When the [[Construct]] internal method of a function object,
	                // F that was created using the bind function is called with a
	                // list of arguments ExtraArgs, the following steps are taken:
	                // 1. Let target be the value of F's [[TargetFunction]]
	                //   internal property.
	                // 2. If target has no [[Construct]] internal method, a
	                //   TypeError exception is thrown.
	                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Construct]] internal
	                //   method of target providing args as the arguments.
	
	                var result = target.apply(
	                    this,
	                    args.concat(array_slice.call(arguments))
	                );
	                if (Object(result) === result) {
	                    return result;
	                }
	                return this;
	
	            } else {
	                // 15.3.4.5.1 [[Call]]
	                // When the [[Call]] internal method of a function object, F,
	                // which was created using the bind function is called with a
	                // this value and a list of arguments ExtraArgs, the following
	                // steps are taken:
	                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 2. Let boundThis be the value of F's [[BoundThis]] internal
	                //   property.
	                // 3. Let target be the value of F's [[TargetFunction]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Call]] internal method
	                //   of target providing boundThis as the this value and
	                //   providing args as the arguments.
	
	                // equiv: target.call(this, ...boundArgs, ...args)
	                return target.apply(
	                    that,
	                    args.concat(array_slice.call(arguments))
	                );
	
	            }
	
	        };
	
	        // 15. If the [[Class]] internal property of Target is "Function", then
	        //     a. Let L be the length property of Target minus the length of A.
	        //     b. Set the length own property of F to either 0 or L, whichever is
	        //       larger.
	        // 16. Else set the length own property of F to 0.
	
	        var boundLength = Math.max(0, target.length - args.length);
	
	        // 17. Set the attributes of the length own property of F to the values
	        //   specified in 15.3.5.1.
	        var boundArgs = [];
	        for (var i = 0; i < boundLength; i++) {
	            boundArgs.push('$' + i);
	        }
	
	        // XXX Build a dynamic function with desired amount of arguments is the only
	        // way to set the length property of a function.
	        // In environments where Content Security Policies enabled (Chrome extensions,
	        // for ex.) all use of eval or Function costructor throws an exception.
	        // However in all of these environments Function.prototype.bind exists
	        // and so this code will never be executed.
	        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);
	
	        if (target.prototype) {
	            Empty.prototype = target.prototype;
	            bound.prototype = new Empty();
	            // Clean up dangling references.
	            Empty.prototype = null;
	        }
	
	        // TODO
	        // 18. Set the [[Extensible]] internal property of F to true.
	
	        // TODO
	        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
	        // 20. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
	        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
	        //   false.
	        // 21. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
	        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
	        //   and false.
	
	        // TODO
	        // NOTE Function objects created using Function.prototype.bind do not
	        // have a prototype property or the [[Code]], [[FormalParameters]], and
	        // [[Scope]] internal properties.
	        // XXX can't delete prototype in pure-js.
	
	        // 22. Return F.
	        return bound;
	    }
	});
	
	//
	// Array
	// =====
	//
	
	// ES5 15.4.3.2
	// http://es5.github.com/#x15.4.3.2
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
	defineProperties(Array, { isArray: isArray });
	
	
	var boxedString = Object('a');
	var splitString = boxedString[0] !== 'a' || !(0 in boxedString);
	
	var properlyBoxesContext = function properlyBoxed(method) {
	    // Check node 0.6.21 bug where third parameter is not boxed
	    var properlyBoxesNonStrict = true;
	    var properlyBoxesStrict = true;
	    if (method) {
	        method.call('foo', function (_, __, context) {
	            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
	        });
	
	        method.call([1], function () {
	            'use strict';
	            properlyBoxesStrict = typeof this === 'string';
	        }, 'x');
	    }
	    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
	};
	
	defineProperties(ArrayPrototype, {
	    forEach: function forEach(fun /*, thisp*/) {
	        var object = toObject(this),
	            self = splitString && isString(this) ? this.split('') : object,
	            thisp = arguments[1],
	            i = -1,
	            length = self.length >>> 0;
	
	        // If no callback function or if callback is not a callable function
	        if (!isFunction(fun)) {
	            throw new TypeError(); // TODO message
	        }
	
	        while (++i < length) {
	            if (i in self) {
	                // Invoke the callback function with call, passing arguments:
	                // context, property value, property key, thisArg object
	                // context
	                fun.call(thisp, self[i], i, object);
	            }
	        }
	    }
	}, !properlyBoxesContext(ArrayPrototype.forEach));
	
	// ES5 15.4.4.14
	// http://es5.github.com/#x15.4.4.14
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
	var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
	defineProperties(ArrayPrototype, {
	    indexOf: function indexOf(sought /*, fromIndex */ ) {
	        var self = splitString && isString(this) ? this.split('') : toObject(this),
	            length = self.length >>> 0;
	
	        if (!length) {
	            return -1;
	        }
	
	        var i = 0;
	        if (arguments.length > 1) {
	            i = toInteger(arguments[1]);
	        }
	
	        // handle negative indices
	        i = i >= 0 ? i : Math.max(0, length + i);
	        for (; i < length; i++) {
	            if (i in self && self[i] === sought) {
	                return i;
	            }
	        }
	        return -1;
	    }
	}, hasFirefox2IndexOfBug);
	
	//
	// String
	// ======
	//
	
	// ES5 15.5.4.14
	// http://es5.github.com/#x15.5.4.14
	
	// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
	// Many browsers do not split properly with regular expressions or they
	// do not perform the split correctly under obscure conditions.
	// See http://blog.stevenlevithan.com/archives/cross-browser-split
	// I've tested in many browsers and this seems to cover the deviant ones:
	//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
	//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
	//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
	//       [undefined, "t", undefined, "e", ...]
	//    ''.split(/.?/) should be [], not [""]
	//    '.'.split(/()()/) should be ["."], not ["", "", "."]
	
	var string_split = StringPrototype.split;
	if (
	    'ab'.split(/(?:ab)*/).length !== 2 ||
	    '.'.split(/(.?)(.?)/).length !== 4 ||
	    'tesst'.split(/(s)*/)[1] === 't' ||
	    'test'.split(/(?:)/, -1).length !== 4 ||
	    ''.split(/.?/).length ||
	    '.'.split(/()()/).length > 1
	) {
	    (function () {
	        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group
	
	        StringPrototype.split = function (separator, limit) {
	            var string = this;
	            if (separator === void 0 && limit === 0) {
	                return [];
	            }
	
	            // If `separator` is not a regex, use native split
	            if (_toString.call(separator) !== '[object RegExp]') {
	                return string_split.call(this, separator, limit);
	            }
	
	            var output = [],
	                flags = (separator.ignoreCase ? 'i' : '') +
	                        (separator.multiline  ? 'm' : '') +
	                        (separator.extended   ? 'x' : '') + // Proposed for ES6
	                        (separator.sticky     ? 'y' : ''), // Firefox 3+
	                lastLastIndex = 0,
	                // Make `global` and avoid `lastIndex` issues by working with a copy
	                separator2, match, lastIndex, lastLength;
	            separator = new RegExp(separator.source, flags + 'g');
	            string += ''; // Type-convert
	            if (!compliantExecNpcg) {
	                // Doesn't need flags gy, but they don't hurt
	                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
	            }
	            /* Values for `limit`, per the spec:
	             * If undefined: 4294967295 // Math.pow(2, 32) - 1
	             * If 0, Infinity, or NaN: 0
	             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
	             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
	             * If other: Type-convert, then use the above rules
	             */
	            limit = limit === void 0 ?
	                -1 >>> 0 : // Math.pow(2, 32) - 1
	                ToUint32(limit);
	            while (match = separator.exec(string)) {
	                // `separator.lastIndex` is not reliable cross-browser
	                lastIndex = match.index + match[0].length;
	                if (lastIndex > lastLastIndex) {
	                    output.push(string.slice(lastLastIndex, match.index));
	                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
	                    // nonparticipating capturing groups
	                    if (!compliantExecNpcg && match.length > 1) {
	                        match[0].replace(separator2, function () {
	                            for (var i = 1; i < arguments.length - 2; i++) {
	                                if (arguments[i] === void 0) {
	                                    match[i] = void 0;
	                                }
	                            }
	                        });
	                    }
	                    if (match.length > 1 && match.index < string.length) {
	                        ArrayPrototype.push.apply(output, match.slice(1));
	                    }
	                    lastLength = match[0].length;
	                    lastLastIndex = lastIndex;
	                    if (output.length >= limit) {
	                        break;
	                    }
	                }
	                if (separator.lastIndex === match.index) {
	                    separator.lastIndex++; // Avoid an infinite loop
	                }
	            }
	            if (lastLastIndex === string.length) {
	                if (lastLength || !separator.test('')) {
	                    output.push('');
	                }
	            } else {
	                output.push(string.slice(lastLastIndex));
	            }
	            return output.length > limit ? output.slice(0, limit) : output;
	        };
	    }());
	
	// [bugfix, chrome]
	// If separator is undefined, then the result array contains just one String,
	// which is the this value (converted to a String). If limit is not undefined,
	// then the output array is truncated so that it contains no more than limit
	// elements.
	// "0".split(undefined, 0) -> []
	} else if ('0'.split(void 0, 0).length) {
	    StringPrototype.split = function split(separator, limit) {
	        if (separator === void 0 && limit === 0) { return []; }
	        return string_split.call(this, separator, limit);
	    };
	}
	
	// ES5 15.5.4.20
	// whitespace from: http://es5.github.io/#x15.5.4.20
	var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
	    '\u2029\uFEFF';
	var zeroWidth = '\u200b';
	var wsRegexChars = '[' + ws + ']';
	var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
	var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
	var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
	defineProperties(StringPrototype, {
	    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
	    // http://perfectionkills.com/whitespace-deviations/
	    trim: function trim() {
	        if (this === void 0 || this === null) {
	            throw new TypeError("can't convert " + this + ' to object');
	        }
	        return String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
	    }
	}, hasTrimWhitespaceBug);
	
	// ECMA-262, 3rd B.2.3
	// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
	// non-normative section suggesting uniform semantics and it should be
	// normalized across all browsers
	// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
	var string_substr = StringPrototype.substr;
	var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
	defineProperties(StringPrototype, {
	    substr: function substr(start, length) {
	        return string_substr.call(
	            this,
	            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
	            length
	        );
	    }
	}, hasNegativeSubstrBug);


/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/escape.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js");
	
	// Some extra characters that Chrome gets wrong, and substitutes with
	// something else on the wire.
	var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
	  , extraLookup;
	
	// This may be quite slow, so let's delay until user actually uses bad
	// characters.
	var unrollLookup = function(escapable) {
	  var i;
	  var unrolled = {};
	  var c = [];
	  for (i = 0; i < 65536; i++) {
	    c.push( String.fromCharCode(i) );
	  }
	  escapable.lastIndex = 0;
	  c.join('').replace(escapable, function(a) {
	    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    return '';
	  });
	  escapable.lastIndex = 0;
	  return unrolled;
	};
	
	// Quote string, also taking care of unicode characters that browsers
	// often break. Especially, take care of unicode surrogates:
	// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
	module.exports = {
	  quote: function(string) {
	    var quoted = JSON3.stringify(string);
	
	    // In most cases this should be very fast and good enough.
	    extraEscapable.lastIndex = 0;
	    if (!extraEscapable.test(quoted)) {
	      return quoted;
	    }
	
	    if (!extraLookup) {
	      extraLookup = unrollLookup(extraEscapable);
	    }
	
	    return quoted.replace(extraEscapable, function(a) {
	      return extraLookup[a];
	    });
	  }
	};


/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/transport.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:utils:transport');
	}
	
	module.exports = function(availableTransports) {
	  return {
	    filterToEnabled: function(transportsWhitelist, info) {
	      var transports = {
	        main: []
	      , facade: []
	      };
	      if (!transportsWhitelist) {
	        transportsWhitelist = [];
	      } else if (typeof transportsWhitelist === 'string') {
	        transportsWhitelist = [transportsWhitelist];
	      }
	
	      availableTransports.forEach(function(trans) {
	        if (!trans) {
	          return;
	        }
	
	        if (trans.transportName === 'websocket' && info.websocket === false) {
	          debug('disabled from server', 'websocket');
	          return;
	        }
	
	        if (transportsWhitelist.length &&
	            transportsWhitelist.indexOf(trans.transportName) === -1) {
	          debug('not in whitelist', trans.transportName);
	          return;
	        }
	
	        if (trans.enabled(info)) {
	          debug('enabled', trans.transportName);
	          transports.main.push(trans);
	          if (trans.facadeTransport) {
	            transports.facade.push(trans.facadeTransport);
	          }
	        } else {
	          debug('disabled', trans.transportName);
	        }
	      });
	      return transports;
	    }
	  };
	};


/***/ },

/***/ "./node_modules/sockjs-client/lib/utils/log.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var logObject = {};
	['log', 'debug', 'warn'].forEach(function (level) {
	  var levelExists;
	
	  try {
	    levelExists = global.console && global.console[level] && global.console[level].apply;
	  } catch(e) {
	    // do nothing
	  }
	
	  logObject[level] = levelExists ? function () {
	    return global.console[level].apply(global.console, arguments);
	  } : (level === 'log' ? function () {} : logObject.log);
	});
	
	module.exports = logObject;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/event/event.js":
/***/ function(module, exports) {

	'use strict';
	
	function Event(eventType) {
	  this.type = eventType;
	}
	
	Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
	  this.type = eventType;
	  this.bubbles = canBubble;
	  this.cancelable = cancelable;
	  this.timeStamp = +new Date();
	  return this;
	};
	
	Event.prototype.stopPropagation = function() {};
	Event.prototype.preventDefault = function() {};
	
	Event.CAPTURING_PHASE = 1;
	Event.AT_TARGET = 2;
	Event.BUBBLING_PHASE = 3;
	
	module.exports = Event;


/***/ },

/***/ "./node_modules/sockjs-client/lib/location.js":
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	module.exports = global.location || {
	  origin: 'http://localhost:80'
	, protocol: 'http'
	, host: 'localhost'
	, port: 80
	, href: 'http://localhost/'
	, hash: ''
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/event/close.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , Event = __webpack_require__("./node_modules/sockjs-client/lib/event/event.js")
	  ;
	
	function CloseEvent() {
	  Event.call(this);
	  this.initEvent('close', false, false);
	  this.wasClean = false;
	  this.code = 0;
	  this.reason = '';
	}
	
	inherits(CloseEvent, Event);
	
	module.exports = CloseEvent;


/***/ },

/***/ "./node_modules/sockjs-client/lib/event/trans-message.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , Event = __webpack_require__("./node_modules/sockjs-client/lib/event/event.js")
	  ;
	
	function TransportMessageEvent(data) {
	  Event.call(this);
	  this.initEvent('message', false, false);
	  this.data = data;
	}
	
	inherits(TransportMessageEvent, Event);
	
	module.exports = TransportMessageEvent;


/***/ },

/***/ "./node_modules/sockjs-client/lib/info-receiver.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , XDR = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xdr.js")
	  , XHRCors = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js")
	  , XHRLocal = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-local.js")
	  , XHRFake = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-fake.js")
	  , InfoIframe = __webpack_require__("./node_modules/sockjs-client/lib/info-iframe.js")
	  , InfoAjax = __webpack_require__("./node_modules/sockjs-client/lib/info-ajax.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:info-receiver');
	}
	
	function InfoReceiver(baseUrl, urlInfo) {
	  debug(baseUrl);
	  var self = this;
	  EventEmitter.call(this);
	
	  setTimeout(function() {
	    self.doXhr(baseUrl, urlInfo);
	  }, 0);
	}
	
	inherits(InfoReceiver, EventEmitter);
	
	// TODO this is currently ignoring the list of available transports and the whitelist
	
	InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
	  // determine method of CORS support (if needed)
	  if (urlInfo.sameOrigin) {
	    return new InfoAjax(url, XHRLocal);
	  }
	  if (XHRCors.enabled) {
	    return new InfoAjax(url, XHRCors);
	  }
	  if (XDR.enabled && urlInfo.sameScheme) {
	    return new InfoAjax(url, XDR);
	  }
	  if (InfoIframe.enabled()) {
	    return new InfoIframe(baseUrl, url);
	  }
	  return new InfoAjax(url, XHRFake);
	};
	
	InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
	  var self = this
	    , url = urlUtils.addPath(baseUrl, '/info')
	    ;
	  debug('doXhr', url);
	
	  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);
	
	  this.timeoutRef = setTimeout(function() {
	    debug('timeout');
	    self._cleanup(false);
	    self.emit('finish');
	  }, InfoReceiver.timeout);
	
	  this.xo.once('finish', function(info, rtt) {
	    debug('finish', info, rtt);
	    self._cleanup(true);
	    self.emit('finish', info, rtt);
	  });
	};
	
	InfoReceiver.prototype._cleanup = function(wasClean) {
	  debug('_cleanup');
	  clearTimeout(this.timeoutRef);
	  this.timeoutRef = null;
	  if (!wasClean && this.xo) {
	    this.xo.close();
	  }
	  this.xo = null;
	};
	
	InfoReceiver.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  this._cleanup(false);
	};
	
	InfoReceiver.timeout = 8000;
	
	module.exports = InfoReceiver;


/***/ },

/***/ "./node_modules/sockjs-client/lib/transport/sender/xhr-fake.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  ;
	
	function XHRFake(/* method, url, payload, opts */) {
	  var self = this;
	  EventEmitter.call(this);
	
	  this.to = setTimeout(function() {
	    self.emit('finish', 200, '{}');
	  }, XHRFake.timeout);
	}
	
	inherits(XHRFake, EventEmitter);
	
	XHRFake.prototype.close = function() {
	  clearTimeout(this.to);
	};
	
	XHRFake.timeout = 2000;
	
	module.exports = XHRFake;


/***/ },

/***/ "./node_modules/sockjs-client/lib/info-iframe.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , utils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , IframeTransport = __webpack_require__("./node_modules/sockjs-client/lib/transport/iframe.js")
	  , InfoReceiverIframe = __webpack_require__("./node_modules/sockjs-client/lib/info-iframe-receiver.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:info-iframe');
	}
	
	function InfoIframe(baseUrl, url) {
	  var self = this;
	  EventEmitter.call(this);
	
	  var go = function() {
	    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);
	
	    ifr.once('message', function(msg) {
	      if (msg) {
	        var d;
	        try {
	          d = JSON3.parse(msg);
	        } catch (e) {
	          debug('bad json', msg);
	          self.emit('finish');
	          self.close();
	          return;
	        }
	
	        var info = d[0], rtt = d[1];
	        self.emit('finish', info, rtt);
	      }
	      self.close();
	    });
	
	    ifr.once('close', function() {
	      self.emit('finish');
	      self.close();
	    });
	  };
	
	  // TODO this seems the same as the 'needBody' from transports
	  if (!global.document.body) {
	    utils.attachEvent('load', go);
	  } else {
	    go();
	  }
	}
	
	inherits(InfoIframe, EventEmitter);
	
	InfoIframe.enabled = function() {
	  return IframeTransport.enabled();
	};
	
	InfoIframe.prototype.close = function() {
	  if (this.ifr) {
	    this.ifr.close();
	  }
	  this.removeAllListeners();
	  this.ifr = null;
	};
	
	module.exports = InfoIframe;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/sockjs-client/lib/info-iframe-receiver.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , XHRLocalObject = __webpack_require__("./node_modules/sockjs-client/lib/transport/sender/xhr-local.js")
	  , InfoAjax = __webpack_require__("./node_modules/sockjs-client/lib/info-ajax.js")
	  ;
	
	function InfoReceiverIframe(transUrl) {
	  var self = this;
	  EventEmitter.call(this);
	
	  this.ir = new InfoAjax(transUrl, XHRLocalObject);
	  this.ir.once('finish', function(info, rtt) {
	    self.ir = null;
	    self.emit('message', JSON3.stringify([info, rtt]));
	  });
	}
	
	inherits(InfoReceiverIframe, EventEmitter);
	
	InfoReceiverIframe.transportName = 'iframe-info-receiver';
	
	InfoReceiverIframe.prototype.close = function() {
	  if (this.ir) {
	    this.ir.close();
	    this.ir = null;
	  }
	  this.removeAllListeners();
	};
	
	module.exports = InfoReceiverIframe;


/***/ },

/***/ "./node_modules/sockjs-client/lib/info-ajax.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var EventEmitter = __webpack_require__("./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter
	  , inherits = __webpack_require__("./node_modules/inherits/inherits_browser.js")
	  , JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , objectUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/object.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:info-ajax');
	}
	
	function InfoAjax(url, AjaxObject) {
	  EventEmitter.call(this);
	
	  var self = this;
	  var t0 = +new Date();
	  this.xo = new AjaxObject('GET', url);
	
	  this.xo.once('finish', function(status, text) {
	    var info, rtt;
	    if (status === 200) {
	      rtt = (+new Date()) - t0;
	      if (text) {
	        try {
	          info = JSON3.parse(text);
	        } catch (e) {
	          debug('bad json', text);
	        }
	      }
	
	      if (!objectUtils.isObject(info)) {
	        info = {};
	      }
	    }
	    self.emit('finish', info, rtt);
	    self.removeAllListeners();
	  });
	}
	
	inherits(InfoAjax, EventEmitter);
	
	InfoAjax.prototype.close = function() {
	  this.removeAllListeners();
	  this.xo.close();
	};
	
	module.exports = InfoAjax;


/***/ },

/***/ "./node_modules/sockjs-client/lib/iframe-bootstrap.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var urlUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/url.js")
	  , eventUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/event.js")
	  , JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , FacadeJS = __webpack_require__("./node_modules/sockjs-client/lib/facade.js")
	  , InfoIframeReceiver = __webpack_require__("./node_modules/sockjs-client/lib/info-iframe-receiver.js")
	  , iframeUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/iframe.js")
	  , loc = __webpack_require__("./node_modules/sockjs-client/lib/location.js")
	  ;
	
	var debug = function() {};
	if (true) {
	  debug = __webpack_require__("./node_modules/debug/browser.js")('sockjs-client:iframe-bootstrap');
	}
	
	module.exports = function(SockJS, availableTransports) {
	  var transportMap = {};
	  availableTransports.forEach(function(at) {
	    if (at.facadeTransport) {
	      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
	    }
	  });
	
	  // hard-coded for the info iframe
	  // TODO see if we can make this more dynamic
	  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
	  var parentOrigin;
	
	  /* eslint-disable camelcase */
	  SockJS.bootstrap_iframe = function() {
	    /* eslint-enable camelcase */
	    var facade;
	    iframeUtils.currentWindowId = loc.hash.slice(1);
	    var onMessage = function(e) {
	      if (e.source !== parent) {
	        return;
	      }
	      if (typeof parentOrigin === 'undefined') {
	        parentOrigin = e.origin;
	      }
	      if (e.origin !== parentOrigin) {
	        return;
	      }
	
	      var iframeMessage;
	      try {
	        iframeMessage = JSON3.parse(e.data);
	      } catch (ignored) {
	        debug('bad json', e.data);
	        return;
	      }
	
	      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
	        return;
	      }
	      switch (iframeMessage.type) {
	      case 's':
	        var p;
	        try {
	          p = JSON3.parse(iframeMessage.data);
	        } catch (ignored) {
	          debug('bad json', iframeMessage.data);
	          break;
	        }
	        var version = p[0];
	        var transport = p[1];
	        var transUrl = p[2];
	        var baseUrl = p[3];
	        debug(version, transport, transUrl, baseUrl);
	        // change this to semver logic
	        if (version !== SockJS.version) {
	          throw new Error('Incompatible SockJS! Main site uses:' +
	                    ' "' + version + '", the iframe:' +
	                    ' "' + SockJS.version + '".');
	        }
	
	        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
	            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
	          throw new Error('Can\'t connect to different domain from within an ' +
	                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
	        }
	        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
	        break;
	      case 'm':
	        facade._send(iframeMessage.data);
	        break;
	      case 'c':
	        if (facade) {
	          facade._close();
	        }
	        facade = null;
	        break;
	      }
	    };
	
	    eventUtils.attachEvent('message', onMessage);
	
	    // Start
	    iframeUtils.postMessage('s');
	  };
	};


/***/ },

/***/ "./node_modules/sockjs-client/lib/facade.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var JSON3 = __webpack_require__("./node_modules/json3/lib/json3.js")
	  , iframeUtils = __webpack_require__("./node_modules/sockjs-client/lib/utils/iframe.js")
	  ;
	
	function FacadeJS(transport) {
	  this._transport = transport;
	  transport.on('message', this._transportMessage.bind(this));
	  transport.on('close', this._transportClose.bind(this));
	}
	
	FacadeJS.prototype._transportClose = function(code, reason) {
	  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
	};
	FacadeJS.prototype._transportMessage = function(frame) {
	  iframeUtils.postMessage('t', frame);
	};
	FacadeJS.prototype._send = function(data) {
	  this._transport.send(data);
	};
	FacadeJS.prototype._close = function() {
	  this._transport.close();
	  this._transport.removeAllListeners();
	};
	
	module.exports = FacadeJS;


/***/ },

/***/ "./node_modules/webpack/hot/only-dev-server.js":
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals window __webpack_hash__ */
	if(true) {
		var lastData;
		var upToDate = function upToDate() {
			return lastData.indexOf(__webpack_require__.h()) >= 0;
		};
		var check = function check() {
			module.hot.check(function(err, updatedModules) {
				if(err) {
					if(module.hot.status() in {
							abort: 1,
							fail: 1
						}) {
						console.warn("[HMR] Cannot check for update. Need to do a full reload!");
						console.warn("[HMR] " + err.stack || err.message);
					} else {
						console.warn("[HMR] Update check failed: " + err.stack || err.message);
					}
					return;
				}
	
				if(!updatedModules) {
					console.warn("[HMR] Cannot find update. Need to do a full reload!");
					console.warn("[HMR] (Probably because of restarting the webpack-dev-server)");
					return;
				}
	
				module.hot.apply({
					ignoreUnaccepted: true
				}, function(err, renewedModules) {
					if(err) {
						if(module.hot.status() in {
								abort: 1,
								fail: 1
							}) {
							console.warn("[HMR] Cannot apply update. Need to do a full reload!");
							console.warn("[HMR] " + err.stack || err.message);
						} else {
							console.warn("[HMR] Update failed: " + err.stack || err.message);
						}
						return;
					}
	
					if(!upToDate()) {
						check();
					}
	
					__webpack_require__("./node_modules/webpack/hot/log-apply-result.js")(updatedModules, renewedModules);
	
					if(upToDate()) {
						console.log("[HMR] App is up to date.");
					}
				});
			});
		};
		var addEventListener = window.addEventListener ? function(eventName, listener) {
			window.addEventListener(eventName, listener, false);
		} : function(eventName, listener) {
			window.attachEvent("on" + eventName, listener);
		};
		addEventListener("message", function(event) {
			if(typeof event.data === "string" && event.data.indexOf("webpackHotUpdate") === 0) {
				lastData = event.data;
				if(!upToDate() && module.hot.status() === "idle") {
					console.log("[HMR] Checking for updates on the server...");
					check();
				}
			}
		});
		console.log("[HMR] Waiting for update signal from WDS...");
	} else {
		throw new Error("[HMR] Hot Module Replacement is disabled.");
	}


/***/ },

/***/ "./node_modules/webpack/hot/log-apply-result.js":
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(updatedModules, renewedModules) {
		var unacceptedModules = updatedModules.filter(function(moduleId) {
			return renewedModules && renewedModules.indexOf(moduleId) < 0;
		});
	
		if(unacceptedModules.length > 0) {
			console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
			unacceptedModules.forEach(function(moduleId) {
				console.warn("[HMR]  - " + moduleId);
			});
		}
	
		if(!renewedModules || renewedModules.length === 0) {
			console.log("[HMR] Nothing hot updated.");
		} else {
			console.log("[HMR] Updated modules:");
			renewedModules.forEach(function(moduleId) {
				console.log("[HMR]  - " + moduleId);
			});
		}
	};


/***/ },

/***/ "./src/overrides.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/overrides.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/overrides.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/overrides.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/overrides.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".ui.dropdown .menu .selected.item,\n.ui.dropdown .menu > .item:hover,\n.ui.dropdown.selected {\n  background: #e2eff9 !important; }\n\n.ui.card > .extra,\n.ui.cards > .card > .extra {\n  border-top: 1px solid rgba(0, 0, 0, 0.1) !important; }\n", "", {"version":3,"sources":["/./src/src/overrides.scss"],"names":[],"mappings":"AACA;;;EAGE,+BAA4C,EAC7C;;AAED;;EAEE,oDAAiD,EAClD","file":"overrides.scss","sourcesContent":["// Overrides\n:global(.ui.dropdown .menu .selected.item),\n:global(.ui.dropdown .menu > .item:hover),\n:global(.ui.dropdown.selected) {\n  background: lighten(#2987CD, 45%) !important;\n}\n\n:global(.ui.card > .extra),\n:global(.ui.cards > .card > .extra) {\n  border-top: 1px solid rgba(0,0,0, 0.1) !important;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports


/***/ },

/***/ "./node_modules/css-loader/lib/css-base.js":
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },

/***/ "./node_modules/style-loader/addStyles.js":
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },

/***/ "./src/index.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _moment = __webpack_require__(7);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(8);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactHotLoader = __webpack_require__(9);
	
	var _configureStore = __webpack_require__("./src/store/configure-store.js");
	
	var _configureStore2 = _interopRequireDefault(_configureStore);
	
	var _application = __webpack_require__("./src/application.jsx");
	
	var _application2 = _interopRequireDefault(_application);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_moment2.default.locale('pt-br');
	
	var rootEl = document.querySelector('#wrapper');
	var store = (0, _configureStore2.default)();
	
	_reactDom2.default.render(_react2.default.createElement(
	  _reactHotLoader.AppContainer,
	  null,
	  _react2.default.createElement(_application2.default, { store: store })
	), rootEl);
	
	if (true) {
	  module.hot.accept("./src/application.jsx", function () {
	    var NextApp = __webpack_require__("./src/application.jsx").default;
	
	    _reactDom2.default.render(_react2.default.createElement(
	      _reactHotLoader.AppContainer,
	      null,
	      _react2.default.createElement(NextApp, { store: store })
	    ), rootEl);
	  });
	}
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(rootEl, 'rootEl', 'D:/repo.git/djalmajr/agencia-amiga/src/index.jsx');
	
	  __REACT_HOT_LOADER__.register(store, 'store', 'D:/repo.git/djalmajr/agencia-amiga/src/index.jsx');
	}();

	;

/***/ },

/***/ 7:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1013);

/***/ },

/***/ 8:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1124);

/***/ },

/***/ 9:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1270);

/***/ },

/***/ "./src/store/configure-store.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(10);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _lodash = __webpack_require__(11);
	
	var _redux = __webpack_require__(12);
	
	var _reduxAsyncInitialState = __webpack_require__(13);
	
	var _reduxSaga = __webpack_require__(14);
	
	var _reduxSaga2 = _interopRequireDefault(_reduxSaga);
	
	var _reduxImmutableStateInvariant = __webpack_require__(15);
	
	var _reduxImmutableStateInvariant2 = _interopRequireDefault(_reduxImmutableStateInvariant);
	
	var _reducers = __webpack_require__("./src/store/reducers/index.js");
	
	var _reducers2 = _interopRequireDefault(_reducers);
	
	var _sagas = __webpack_require__("./src/store/sagas/index.js");
	
	var _sagas2 = _interopRequireDefault(_sagas);
	
	var _cacheState = __webpack_require__("./src/store/cache-state.js");
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DEV = ("development") !== 'production';
	
	var configureStore = function configureStore() {
	  var sagaMiddleware = (0, _reduxSaga2.default)();
	  var middlewares = [sagaMiddleware, (0, _reduxAsyncInitialState.middleware)(_cacheState.loadState)];
	
	  if (DEV) {
	    var _require = __webpack_require__("./src/devtools.jsx"),
	        DevTools = _require.DevTools;
	
	    var composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;
	
	    middlewares = middlewares.concat([(0, _reduxImmutableStateInvariant2.default)()]);
	    middlewares = _redux.applyMiddleware.apply(undefined, (0, _toConsumableArray3.default)(middlewares));
	    middlewares = composeEnhancers ? composeEnhancers(middlewares) : (0, _redux.compose)(middlewares, DevTools.instrument());
	  } else {
	    middlewares = _redux.applyMiddleware.apply(undefined, (0, _toConsumableArray3.default)(middlewares));
	  }
	
	  var store = (0, _redux.createStore)((0, _reduxAsyncInitialState.outerReducer)(_reducers2.default), middlewares);
	
	  store.runSaga = sagaMiddleware.run;
	
	  if (true) {
	    module.hot.accept("./src/store/reducers/index.js", function () {
	      var nextReducer = __webpack_require__("./src/store/reducers/index.js").default;
	
	      store.replaceReducer((0, _reduxAsyncInitialState.outerReducer)(nextReducer));
	    });
	  }
	
	  store.subscribe((0, _lodash.throttle)(function () {
	    var _store$getState = store.getState(),
	        authData = _store$getState.auth.authData;
	
	    (0, _cacheState.saveState)({ auth: { authData: authData } });
	  }, 2000));
	
	  store.runSaga(_sagas2.default);
	
	  return store;
	};
	
	var _default = configureStore;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(DEV, 'DEV', 'D:/repo.git/djalmajr/agencia-amiga/src/store/configure-store.js');
	
	  __REACT_HOT_LOADER__.register(configureStore, 'configureStore', 'D:/repo.git/djalmajr/agencia-amiga/src/store/configure-store.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/store/configure-store.js');
	}();

	;

/***/ },

/***/ 10:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1754);

/***/ },

/***/ 11:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(2184);

/***/ },

/***/ 12:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1352);

/***/ },

/***/ 13:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1558);

/***/ },

/***/ 14:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1812);

/***/ },

/***/ 15:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1808);

/***/ },

/***/ "./src/store/reducers/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redux = __webpack_require__(12);
	
	var _reduxAsyncInitialState = __webpack_require__(13);
	
	var _auth = __webpack_require__("./src/store/reducers/auth.js");
	
	var auth = _interopRequireWildcard(_auth);
	
	var _entities = __webpack_require__("./src/store/reducers/entities.js");
	
	var entities = _interopRequireWildcard(_entities);
	
	var _filter = __webpack_require__("./src/store/reducers/filter.js");
	
	var filter = _interopRequireWildcard(_filter);
	
	var _global = __webpack_require__("./src/store/reducers/global.js");
	
	var global = _interopRequireWildcard(_global);
	
	var _profile = __webpack_require__("./src/store/reducers/profile.js");
	
	var profile = _interopRequireWildcard(_profile);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var _default = (0, _redux.combineReducers)({
	  asyncState: _reduxAsyncInitialState.innerReducer,
	  auth: (0, _redux.combineReducers)(auth),
	  entities: (0, _redux.combineReducers)(entities),
	  filter: (0, _redux.combineReducers)(filter),
	  global: (0, _redux.combineReducers)(global),
	  profile: (0, _redux.combineReducers)(profile)
	});
	
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/index.js');
	}();

	;

/***/ },

/***/ "./src/store/reducers/auth.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.authData = exports.isRegistering = exports.isAuthenticating = undefined;
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _handleActions, _handleActions2, _handleActions3;
	
	var _reduxActions = __webpack_require__(17);
	
	var _emptyObject = __webpack_require__(18);
	
	var _emptyObject2 = _interopRequireDefault(_emptyObject);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isAuthenticating = exports.isAuthenticating = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, actions.login, function () {
	  return true;
	}), (0, _defineProperty3.default)(_handleActions, actions.authorize, function () {
	  return false;
	}), _handleActions), false);
	
	var isRegistering = exports.isRegistering = (0, _reduxActions.handleActions)((_handleActions2 = {}, (0, _defineProperty3.default)(_handleActions2, actions.register, function () {
	  return true;
	}), (0, _defineProperty3.default)(_handleActions2, actions.authorize, function () {
	  return false;
	}), _handleActions2), false);
	
	var authData = exports.authData = (0, _reduxActions.handleActions)((_handleActions3 = {}, (0, _defineProperty3.default)(_handleActions3, actions.unauthorize, function () {
	  return _emptyObject2.default;
	}), (0, _defineProperty3.default)(_handleActions3, actions.authorize, function (state, _ref) {
	  var error = _ref.error,
	      payload = _ref.payload;
	  return error ? {} : payload;
	}), _handleActions3), _emptyObject2.default);
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(isAuthenticating, 'isAuthenticating', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/auth.js');
	
	  __REACT_HOT_LOADER__.register(isRegistering, 'isRegistering', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/auth.js');
	
	  __REACT_HOT_LOADER__.register(authData, 'authData', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/auth.js');
	}();

	;

/***/ },

/***/ "./node_modules/babel-runtime/helpers/defineProperty.js":
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(16);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ },

/***/ 16:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1795);

/***/ },

/***/ 17:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1411);

/***/ },

/***/ 18:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(983);

/***/ },

/***/ "./src/store/actions.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.updateCache = exports.save = exports.removeCache = exports.remove = exports.read = exports.addToOrg = exports.updateTabFeed = exports.updateProfile = exports.updateFilter = exports.filter = exports.notifyWarning = exports.notifyInfo = exports.notifyError = exports.notify = exports.unauthorize = exports.authorize = exports.register = exports.logout = exports.login = undefined;
	
	var _uuid = __webpack_require__(19);
	
	var _createAction = __webpack_require__("./src/helpers/create-action.js");
	
	var _createAction2 = _interopRequireDefault(_createAction);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var handleNotify = function handleNotify(message) {
	  message = typeof message === 'string' ? { message: message } : message;
	  message.uid = (0, _uuid.v4)();
	
	  return message;
	};
	
	var login = exports.login = (0, _createAction2.default)('login');
	var logout = exports.logout = (0, _createAction2.default)('logout');
	var register = exports.register = (0, _createAction2.default)('register');
	var authorize = exports.authorize = (0, _createAction2.default)('authorize');
	var unauthorize = exports.unauthorize = (0, _createAction2.default)('unauthorize');
	
	var notify = exports.notify = (0, _createAction2.default)('notify', handleNotify);
	var notifyError = exports.notifyError = (0, _createAction2.default)('notify', handleNotify);
	var notifyInfo = exports.notifyInfo = (0, _createAction2.default)('notify', handleNotify);
	var notifyWarning = exports.notifyWarning = (0, _createAction2.default)('notify', handleNotify);
	var filter = exports.filter = (0, _createAction2.default)('filter');
	var updateFilter = exports.updateFilter = (0, _createAction2.default)('update-filter');
	var updateProfile = exports.updateProfile = (0, _createAction2.default)('update-profile');
	var updateTabFeed = exports.updateTabFeed = (0, _createAction2.default)('update-tab-feed');
	
	var addToOrg = exports.addToOrg = (0, _createAction2.default)('add-to-org');
	var read = exports.read = (0, _createAction2.default)('read');
	var remove = exports.remove = (0, _createAction2.default)('remove');
	var removeCache = exports.removeCache = (0, _createAction2.default)('remove-cache');
	var save = exports.save = (0, _createAction2.default)('save', function (ref, data) {
	  return { ref: ref, data: data };
	});
	var updateCache = exports.updateCache = (0, _createAction2.default)('update-cache');
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(handleNotify, 'handleNotify', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(login, 'login', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(logout, 'logout', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(register, 'register', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(authorize, 'authorize', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(unauthorize, 'unauthorize', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(notify, 'notify', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(notifyError, 'notifyError', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(notifyInfo, 'notifyInfo', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(notifyWarning, 'notifyWarning', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(filter, 'filter', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(updateFilter, 'updateFilter', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(updateProfile, 'updateProfile', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(updateTabFeed, 'updateTabFeed', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(addToOrg, 'addToOrg', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(read, 'read', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(remove, 'remove', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(removeCache, 'removeCache', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(save, 'save', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	
	  __REACT_HOT_LOADER__.register(updateCache, 'updateCache', 'D:/repo.git/djalmajr/agencia-amiga/src/store/actions.js');
	}();

	;

/***/ },

/***/ 19:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(2173);

/***/ },

/***/ "./src/helpers/create-action.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _uuid = __webpack_require__(19);
	
	var _reduxActions = __webpack_require__(17);
	
	var createAction = function createAction(name) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	
	  return _reduxActions.createAction.apply(undefined, [name + '-' + (0, _uuid.v4)()].concat(args));
	};
	
	var _default = createAction;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(createAction, 'createAction', 'D:/repo.git/djalmajr/agencia-amiga/src/helpers/create-action.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/helpers/create-action.js');
	}();

	;

/***/ },

/***/ "./src/store/reducers/entities.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isRemoving = exports.isFetching = exports.byId = undefined;
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _handleActions, _handleActions2, _handleActions3;
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _reduxActions = __webpack_require__(17);
	
	var _emptyObject = __webpack_require__(18);
	
	var _emptyObject2 = _interopRequireDefault(_emptyObject);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var byId = exports.byId = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, actions.unauthorize, function () {
	  return _emptyObject2.default;
	}), (0, _defineProperty3.default)(_handleActions, actions.removeCache, function (state, _ref) {
	  var error = _ref.error,
	      payload = _ref.payload;
	
	  if (error) {
	    return state;
	  }
	
	  var newState = _lodash2.default.merge({}, state);
	
	  try {
	    delete newState[payload.entity][payload.uid];
	
	    return newState;
	  } catch (err) {
	    return state;
	  }
	}), (0, _defineProperty3.default)(_handleActions, actions.updateCache, function (state, _ref2) {
	  var error = _ref2.error,
	      payload = _ref2.payload;
	
	  if (error) {
	    return state;
	  }
	
	  var newState = _lodash2.default.merge({}, state);
	
	  _lodash2.default.forEach(payload.response, function (val, key) {
	    if (!newState[payload.entity]) {
	      newState[payload.entity] = {};
	    }
	
	    newState[payload.entity][key] = val;
	  });
	
	  return newState;
	}), _handleActions), _emptyObject2.default);
	
	var isFetching = exports.isFetching = (0, _reduxActions.handleActions)((_handleActions2 = {}, (0, _defineProperty3.default)(_handleActions2, actions.unauthorize, function () {
	  return {};
	}), (0, _defineProperty3.default)(_handleActions2, actions.read, function (state, _ref3) {
	  var payload = _ref3.payload;
	  return _lodash2.default.assign({}, state, (0, _defineProperty3.default)({}, payload.entity, true));
	}), (0, _defineProperty3.default)(_handleActions2, actions.addToOrg, function (state, _ref4) {
	  var payload = _ref4.payload;
	  return _lodash2.default.assign({}, state, (0, _defineProperty3.default)({}, payload.entity, true));
	}), (0, _defineProperty3.default)(_handleActions2, actions.updateCache, function (state, _ref5) {
	  var error = _ref5.error,
	      payload = _ref5.payload;
	
	  if (error) {
	    return {};
	  }
	
	  return _lodash2.default.assign({}, state, (0, _defineProperty3.default)({}, payload.entity, false));
	}), _handleActions2), _emptyObject2.default);
	
	var isRemoving = exports.isRemoving = (0, _reduxActions.handleActions)((_handleActions3 = {}, (0, _defineProperty3.default)(_handleActions3, actions.unauthorize, function () {
	  return _emptyObject2.default;
	}), (0, _defineProperty3.default)(_handleActions3, actions.remove, function (state, _ref6) {
	  var payload = _ref6.payload;
	  return _lodash2.default.assign({}, state, (0, _defineProperty3.default)({}, payload.entity, true));
	}), (0, _defineProperty3.default)(_handleActions3, actions.removeCache, function (state, _ref7) {
	  var payload = _ref7.payload;
	
	  var newState = _lodash2.default.merge({}, state);
	
	  delete newState[payload.entity][payload.uid];
	
	  return newState;
	}), _handleActions3), _emptyObject2.default);
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(byId, 'byId', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/entities.js');
	
	  __REACT_HOT_LOADER__.register(isFetching, 'isFetching', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/entities.js');
	
	  __REACT_HOT_LOADER__.register(isRemoving, 'isRemoving', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/entities.js');
	}();

	;

/***/ },

/***/ "./src/store/reducers/filter.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isFiltering = exports.entity = exports.skills = exports.query = undefined;
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _handleActions2;
	
	var _reduxActions = __webpack_require__(17);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var createFilterReducer = function createFilterReducer(name, defaultValue) {
	  var _handleActions;
	
	  return (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, actions.unauthorize, function () {
	    return defaultValue;
	  }), (0, _defineProperty3.default)(_handleActions, actions.updateFilter, function (state, _ref) {
	    var payload = _ref.payload;
	    return name === payload.name ? payload.value : state;
	  }), _handleActions), defaultValue);
	};
	
	var query = exports.query = createFilterReducer('query', '');
	var skills = exports.skills = createFilterReducer('skills', []);
	var entity = exports.entity = createFilterReducer('entity', 'users');
	var isFiltering = exports.isFiltering = (0, _reduxActions.handleActions)((_handleActions2 = {}, (0, _defineProperty3.default)(_handleActions2, actions.unauthorize, function () {
	  return false;
	}), (0, _defineProperty3.default)(_handleActions2, actions.filter, function () {
	  return true;
	}), (0, _defineProperty3.default)(_handleActions2, actions.searchDone, function () {
	  return false;
	}), _handleActions2), false);
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(createFilterReducer, 'createFilterReducer', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/filter.js');
	
	  __REACT_HOT_LOADER__.register(query, 'query', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/filter.js');
	
	  __REACT_HOT_LOADER__.register(skills, 'skills', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/filter.js');
	
	  __REACT_HOT_LOADER__.register(entity, 'entity', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/filter.js');
	
	  __REACT_HOT_LOADER__.register(isFiltering, 'isFiltering', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/filter.js');
	}();

	;

/***/ },

/***/ "./src/store/reducers/global.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.notification = undefined;
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _handleActions;
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _reduxActions = __webpack_require__(17);
	
	var _emptyObject = __webpack_require__(18);
	
	var _emptyObject2 = _interopRequireDefault(_emptyObject);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var notification = exports.notification = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, actions.notify, function (state, action) {
	  return _lodash2.default.merge({ position: 'br', level: 'success' }, action.payload);
	}), (0, _defineProperty3.default)(_handleActions, actions.notifyError, function (state, action) {
	  return _lodash2.default.merge({ position: 'br', level: 'error' }, action.payload);
	}), (0, _defineProperty3.default)(_handleActions, actions.notifyInfo, function (state, action) {
	  return _lodash2.default.merge({ position: 'br', level: 'info' }, action.payload);
	}), (0, _defineProperty3.default)(_handleActions, actions.notifyWarning, function (state, action) {
	  return _lodash2.default.merge({ position: 'br', level: 'warning' }, action.payload);
	}), _handleActions), _emptyObject2.default);
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(notification, 'notification', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/global.js');
	}();

	;

/***/ },

/***/ "./src/store/reducers/profile.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.currentTabFeed = exports.isUpdatingProfile = undefined;
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _handleActions, _handleActions2;
	
	var _reduxActions = __webpack_require__(17);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var isUpdatingProfile = exports.isUpdatingProfile = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, actions.unauthorize, function () {
	  return false;
	}), (0, _defineProperty3.default)(_handleActions, actions.updateProfile, function () {
	  return true;
	}), (0, _defineProperty3.default)(_handleActions, actions.updateCache, function (state, _ref) {
	  var payload = _ref.payload;
	  return payload.entity !== 'users';
	}), _handleActions), false);
	
	var currentTabFeed = exports.currentTabFeed = (0, _reduxActions.handleActions)((_handleActions2 = {}, (0, _defineProperty3.default)(_handleActions2, actions.unauthorize, function () {
	  return 'timeline';
	}), (0, _defineProperty3.default)(_handleActions2, actions.updateTabFeed, function (state, _ref2) {
	  var payload = _ref2.payload;
	  return payload;
	}), _handleActions2), 'timeline');
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(isUpdatingProfile, 'isUpdatingProfile', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/profile.js');
	
	  __REACT_HOT_LOADER__.register(currentTabFeed, 'currentTabFeed', 'D:/repo.git/djalmajr/agencia-amiga/src/store/reducers/profile.js');
	}();

	;

/***/ },

/***/ "./src/store/sagas/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__("./node_modules/babel-runtime/regenerator/index.js");
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _reduxSaga = __webpack_require__(14);
	
	var _auth = __webpack_require__("./src/store/sagas/auth.js");
	
	var authSaga = _interopRequireWildcard(_auth);
	
	var _entities = __webpack_require__("./src/store/sagas/entities.js");
	
	var entitySaga = _interopRequireWildcard(_entities);
	
	var _profile = __webpack_require__("./src/store/sagas/profile.js");
	
	var profileSaga = _interopRequireWildcard(_profile);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _default = _regenerator2.default.mark(function _default() {
	  return _regenerator2.default.wrap(function _default$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          _context.next = 2;
	          return (0, _reduxSaga.takeEvery)(actions.login.toString(), authSaga.login);
	
	        case 2:
	          _context.next = 4;
	          return (0, _reduxSaga.takeEvery)(actions.logout.toString(), authSaga.logout);
	
	        case 4:
	          _context.next = 6;
	          return (0, _reduxSaga.takeEvery)(actions.register.toString(), authSaga.register);
	
	        case 6:
	          _context.next = 8;
	          return (0, _reduxSaga.takeEvery)(actions.read.toString(), entitySaga.read);
	
	        case 8:
	          _context.next = 10;
	          return (0, _reduxSaga.takeEvery)(actions.remove.toString(), entitySaga.remove);
	
	        case 10:
	          _context.next = 12;
	          return (0, _reduxSaga.takeEvery)(actions.save.toString(), entitySaga.save);
	
	        case 12:
	          _context.next = 14;
	          return (0, _reduxSaga.takeEvery)(actions.addToOrg.toString(), profileSaga.addToOrg);
	
	        case 14:
	          _context.next = 16;
	          return (0, _reduxSaga.takeEvery)(actions.updateProfile.toString(), profileSaga.update);
	
	        case 16:
	        case 'end':
	          return _context.stop();
	      }
	    }
	  }, _default, this);
	});
	
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/index.js');
	}();

	;

/***/ },

/***/ "./node_modules/babel-runtime/regenerator/index.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__("./node_modules/regenerator-runtime/runtime-module.js");


/***/ },

/***/ "./node_modules/regenerator-runtime/runtime-module.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
	// kept identical to the way it is obtained in runtime.js
	var g =
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this;
	
	// Use `getOwnPropertyNames` because not all browsers support calling
	// `hasOwnProperty` on the global `self` object in a worker. See #183.
	var hadRuntime = g.regeneratorRuntime &&
	  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
	
	// Save the old regeneratorRuntime in case it needs to be restored later.
	var oldRuntime = hadRuntime && g.regeneratorRuntime;
	
	// Force reevalutation of runtime.js.
	g.regeneratorRuntime = undefined;
	
	module.exports = __webpack_require__("./node_modules/regenerator-runtime/runtime.js");
	
	if (hadRuntime) {
	  // Restore the original runtime.
	  g.regeneratorRuntime = oldRuntime;
	} else {
	  // Remove the global property added by runtime.js.
	  try {
	    delete g.regeneratorRuntime;
	  } catch(e) {
	    g.regeneratorRuntime = undefined;
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ "./node_modules/regenerator-runtime/runtime.js":
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Promise, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };
	
	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value instanceof AwaitArgument) {
	          return Promise.resolve(value.arg).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;
	
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }
	
	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }
	
	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );
	
	          if (record.type === "throw") {
	            context.delegate = null;
	
	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }
	
	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;
	
	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }
	
	          context.delegate = null;
	        }
	
	        if (method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = arg;
	
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }
	
	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          var info = {
	            value: record.arg,
	            done: context.done
	          };
	
	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }
	
	      return ContinueSentinel;
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__("./node_modules/es6-promise/dist/es6-promise.js"), __webpack_require__(20)))

/***/ },

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/***/ function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, Promise, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   4.0.5
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
	    return function () {
	      vertxNext(flush);
	    };
	  }
	
	  return useSetTimeout();
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(21);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	//# sourceMappingURL=es6-promise.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20), __webpack_require__("./node_modules/es6-promise/dist/es6-promise.js"), (function() { return this; }())))

/***/ },

/***/ 20:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(966);

/***/ },

/***/ 21:
/***/ function(module, exports) {

	/* (ignored) */

/***/ },

/***/ "./src/store/sagas/auth.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _regenerator = __webpack_require__("./node_modules/babel-runtime/regenerator/index.js");
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _stringify = __webpack_require__("./node_modules/babel-runtime/core-js/json/stringify.js");
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	exports.login = login;
	exports.logout = logout;
	exports.register = register;
	
	var _effects = __webpack_require__("./node_modules/redux-saga/effects.js");
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	var _apis = __webpack_require__("./src/store/apis.js");
	
	var api = _interopRequireWildcard(_apis);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _marked = [login, logout, register].map(_regenerator2.default.mark);
	
	function login(action) {
	  var _action$payload, email, password, auth;
	
	  return _regenerator2.default.wrap(function login$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          _action$payload = action.payload, email = _action$payload.email, password = _action$payload.password;
	          _context.prev = 1;
	          _context.next = 4;
	          return api.login(email, password);
	
	        case 4:
	          auth = _context.sent.toJSON();
	          _context.next = 7;
	          return (0, _effects.put)(actions.read({ entity: 'users', uid: auth.uid }));
	
	        case 7:
	          _context.next = 9;
	          return (0, _effects.put)(actions.authorize(auth));
	
	        case 9:
	          _context.next = 18;
	          break;
	
	        case 11:
	          _context.prev = 11;
	          _context.t0 = _context['catch'](1);
	
	          console.log(_context.t0);_context.next = 16;
	          return (0, _effects.put)(actions.notifyError(_context.t0));
	
	        case 16:
	          _context.next = 18;
	          return (0, _effects.put)(actions.authorize(new Error((0, _stringify2.default)(_context.t0))));
	
	        case 18:
	        case 'end':
	          return _context.stop();
	      }
	    }
	  }, _marked[0], this, [[1, 11]]);
	}
	
	function logout() {
	  return _regenerator2.default.wrap(function logout$(_context2) {
	    while (1) {
	      switch (_context2.prev = _context2.next) {
	        case 0:
	          _context2.prev = 0;
	          _context2.next = 3;
	          return api.logout();
	
	        case 3:
	          _context2.next = 5;
	          return (0, _effects.put)(actions.unauthorize());
	
	        case 5:
	          _context2.next = 13;
	          break;
	
	        case 7:
	          _context2.prev = 7;
	          _context2.t0 = _context2['catch'](0);
	          _context2.next = 11;
	          return (0, _effects.put)(actions.notifyError(_context2.t0));
	
	        case 11:
	          _context2.next = 13;
	          return (0, _effects.put)(actions.unauthorize(new Error((0, _stringify2.default)(_context2.t0))));
	
	        case 13:
	        case 'end':
	          return _context2.stop();
	      }
	    }
	  }, _marked[1], this, [[0, 7]]);
	}
	
	function register(action) {
	  var _action$payload2, email, password, type, auth, user, error, message;
	
	  return _regenerator2.default.wrap(function register$(_context3) {
	    while (1) {
	      switch (_context3.prev = _context3.next) {
	        case 0:
	          _action$payload2 = action.payload, email = _action$payload2.email, password = _action$payload2.password, type = _action$payload2.type;
	          _context3.prev = 1;
	          _context3.next = 4;
	          return api.register(email, password);
	
	        case 4:
	          auth = _context3.sent.toJSON();
	          user = { uid: auth.uid, email: email, type: type };
	          _context3.next = 8;
	          return api.save('users', user);
	
	        case 8:
	          _context3.next = 10;
	          return (0, _effects.put)(actions.authorize(auth));
	
	        case 10:
	          _context3.next = 12;
	          return (0, _effects.put)(actions.updateCache({ entity: 'users', response: (0, _defineProperty3.default)({}, user.uid, user) }));
	
	        case 12:
	          _context3.next = 23;
	          break;
	
	        case 14:
	          _context3.prev = 14;
	          _context3.t0 = _context3['catch'](1);
	          error = JSON.parse((0, _stringify2.default)(_context3.t0));
	          message = 'Ocorreu um erro ao tentar realizar a ação solicitada. Por favor, tente novamente.';
	
	
	          console.error(_context3.t0, error);_context3.next = 21;
	          return (0, _effects.put)(actions.notifyError(error.message || message));
	
	        case 21:
	          _context3.next = 23;
	          return (0, _effects.put)(actions.authorize(_context3.t0));
	
	        case 23:
	        case 'end':
	          return _context3.stop();
	      }
	    }
	  }, _marked[2], this, [[1, 14]]);
	}
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(login, 'login', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/auth.js');
	
	  __REACT_HOT_LOADER__.register(logout, 'logout', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/auth.js');
	
	  __REACT_HOT_LOADER__.register(register, 'register', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/auth.js');
	}();

	;

/***/ },

/***/ "./node_modules/babel-runtime/core-js/json/stringify.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/fn/json/stringify.js"), __esModule: true };

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/fn/json/stringify.js":
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(22)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },

/***/ 22:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1655);

/***/ },

/***/ "./node_modules/redux-saga/effects.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(23)

/***/ },

/***/ 23:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1822);

/***/ },

/***/ "./src/store/apis.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.register = exports.logout = exports.login = exports.updatePassword = exports.updateProfile = exports.remove = exports.save = exports.set = exports.once = undefined;
	
	var _promise = __webpack_require__("./node_modules/babel-runtime/core-js/promise.js");
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _constants = __webpack_require__("./src/constants.js");
	
	var _genUid = __webpack_require__("./src/helpers/gen-uid.js");
	
	var _genUid2 = _interopRequireDefault(_genUid);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var once = exports.once = function once(ref) {
	  return _constants.fb.database().ref(ref).once('value');
	};
	var set = exports.set = function set(ref, data) {
	  return _constants.fb.database().ref(ref).set(data);
	};
	
	var save = exports.save = function save(ref, data) {
	  if (!data.uid) {
	    data.uid = (0, _genUid2.default)(ref);
	  }
	
	  if (!data.createdAt) {
	    data.createdAt = _constants.fb.database.ServerValue.TIMESTAMP;
	  }
	
	  data.updatedAt = _constants.fb.database.ServerValue.TIMESTAMP;
	
	  return new _promise2.default(function (resolve, reject) {
	    set(ref + '/' + data.uid, data).then(once(ref + '/' + data.uid)).then(function (res) {
	      return resolve(res.val());
	    }).catch(reject);
	  });
	};
	
	var remove = exports.remove = function remove(ref) {
	  return _constants.fb.database().ref(ref).remove();
	};
	var updateProfile = exports.updateProfile = function updateProfile(data) {
	  return _constants.fb.auth().currentUser.updateProfile(data);
	};
	var updatePassword = exports.updatePassword = function updatePassword(data) {
	  return _constants.fb.auth().currentUser.updatePassword(data);
	};
	var login = exports.login = function login(email, password) {
	  return _constants.fb.auth().signInWithEmailAndPassword(email, password);
	};
	var logout = exports.logout = function logout() {
	  return _constants.fb.auth().signOut();
	};
	var register = exports.register = function register(email, password) {
	  return _constants.fb.auth().createUserWithEmailAndPassword(email, password);
	};
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(once, 'once', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(set, 'set', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(save, 'save', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(remove, 'remove', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(updateProfile, 'updateProfile', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(updatePassword, 'updatePassword', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(login, 'login', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(logout, 'logout', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	
	  __REACT_HOT_LOADER__.register(register, 'register', 'D:/repo.git/djalmajr/agencia-amiga/src/store/apis.js');
	}();

	;

/***/ },

/***/ "./node_modules/babel-runtime/core-js/promise.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/fn/promise.js"), __esModule: true };

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/fn/promise.js":
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(26);
	__webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js");
	module.exports = __webpack_require__(22).Promise;

/***/ },

/***/ 24:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1709);

/***/ },

/***/ 25:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1647);

/***/ },

/***/ 26:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1691);

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/es6.promise.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(27)
	  , global             = __webpack_require__(28)
	  , ctx                = __webpack_require__(29)
	  , classof            = __webpack_require__(30)
	  , $export            = __webpack_require__(31)
	  , isObject           = __webpack_require__(32)
	  , aFunction          = __webpack_require__(33)
	  , anInstance         = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_an-instance.js")
	  , forOf              = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_for-of.js")
	  , speciesConstructor = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_species-constructor.js")
	  , task               = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_task.js").set
	  , microtask          = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_microtask.js")()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(39)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_redefine-all.js")($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(44)($Promise, PROMISE);
	__webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_set-species.js")(PROMISE);
	Wrapper = __webpack_require__(22)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(47)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },

/***/ "./node_modules/react-hot-loader/patch.js":
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__("./node_modules/react-hot-loader/lib/patch.js");


/***/ },

/***/ 28:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1654);

/***/ },

/***/ 29:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1656);

/***/ },

/***/ 30:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1742);

/***/ },

/***/ 31:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1653);

/***/ },

/***/ 32:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1661);

/***/ },

/***/ 33:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1657);

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_an-instance.js":
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_for-of.js":
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(29)
	  , call        = __webpack_require__(34)
	  , isArrayIter = __webpack_require__(35)
	  , anObject    = __webpack_require__(36)
	  , toLength    = __webpack_require__(37)
	  , getIterFn   = __webpack_require__(38)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },

/***/ 34:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1758);

/***/ },

/***/ 35:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1759);

/***/ },

/***/ 36:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1660);

/***/ },

/***/ 37:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1680);

/***/ },

/***/ 38:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1741);

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_species-constructor.js":
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(36)
	  , aFunction = __webpack_require__(33)
	  , SPECIES   = __webpack_require__(39)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },

/***/ 39:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1688);

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_task.js":
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(29)
	  , invoke             = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_invoke.js")
	  , html               = __webpack_require__(40)
	  , cel                = __webpack_require__(41)
	  , global             = __webpack_require__(28)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(42)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_invoke.js":
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },

/***/ 40:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1686);

/***/ },

/***/ 41:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1665);

/***/ },

/***/ 42:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1678);

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_microtask.js":
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(28)
	  , macrotask = __webpack_require__("./node_modules/babel-runtime/node_modules/core-js/library/modules/_task.js").set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(42)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_redefine-all.js":
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(43);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },

/***/ 43:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1658);

/***/ },

/***/ 44:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1687);

/***/ },

/***/ "./node_modules/babel-runtime/node_modules/core-js/library/modules/_set-species.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(28)
	  , core        = __webpack_require__(22)
	  , dP          = __webpack_require__(45)
	  , DESCRIPTORS = __webpack_require__(46)
	  , SPECIES     = __webpack_require__(39)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },

/***/ 45:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1659);

/***/ },

/***/ 46:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1663);

/***/ },

/***/ 47:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1761);

/***/ },

/***/ "./src/constants.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Filter = exports.Cache = exports.fb = undefined;
	
	var _firebase = __webpack_require__(48);
	
	var _firebase2 = _interopRequireDefault(_firebase);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_firebase2.default.initializeApp({
	  apiKey: 'AIzaSyAzTH_P735oVz2r5Ape5ZDj_o9RSzwl4k0',
	  authDomain: 'agencia-amiga.firebaseapp.com',
	  databaseURL: 'https://agencia-amiga.firebaseio.com',
	  storageBucket: 'agencia-amiga.appspot.com',
	  messagingSenderId: '323447297926'
	});
	
	var fb = exports.fb = _firebase2.default;
	
	var Cache = exports.Cache = {
	  KEY: 'AGENCIA_AMIGA_STATE'
	};
	
	var Filter = exports.Filter = {
	  OPTIONS: [{ text: 'Voluntários', value: 'users', icon: 'user' }, { text: 'Organizações', value: 'organizations', icon: 'university' }, { text: 'Serviços', value: 'services', icon: 'wrench' }, { text: 'Campanhas', value: 'campaigns', icon: 'bullhorn' }]
	};
	
	window.fb = fb;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(fb, 'fb', 'D:/repo.git/djalmajr/agencia-amiga/src/constants.js');
	
	  __REACT_HOT_LOADER__.register(Cache, 'Cache', 'D:/repo.git/djalmajr/agencia-amiga/src/constants.js');
	
	  __REACT_HOT_LOADER__.register(Filter, 'Filter', 'D:/repo.git/djalmajr/agencia-amiga/src/constants.js');
	}();

	;

/***/ },

/***/ 48:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(2167);

/***/ },

/***/ "./src/helpers/gen-uid.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _constants = __webpack_require__("./src/constants.js");
	
	var _default = function _default(ref) {
	  return _constants.fb.database().ref().child(ref).push().key;
	};
	
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/helpers/gen-uid.js');
	}();

	;

/***/ },

/***/ "./src/store/sagas/entities.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _stringify = __webpack_require__("./node_modules/babel-runtime/core-js/json/stringify.js");
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _regenerator = __webpack_require__("./node_modules/babel-runtime/regenerator/index.js");
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	exports.read = read;
	exports.remove = remove;
	exports.save = save;
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _effects = __webpack_require__("./node_modules/redux-saga/effects.js");
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	var _apis = __webpack_require__("./src/store/apis.js");
	
	var api = _interopRequireWildcard(_apis);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _marked = [read, remove, save].map(_regenerator2.default.mark);
	
	var attrs = {
	  users: ['skills', 'services', 'campaigns']
	};
	
	function read(action) {
	  var _this = this;
	
	  var _ref, uid, entity, snapshot, val, i, attr, error, message;
	
	  return _regenerator2.default.wrap(function read$(_context2) {
	    while (1) {
	      switch (_context2.prev = _context2.next) {
	        case 0:
	          _ref = action.payload || {}, uid = _ref.uid, entity = _ref.entity;
	          _context2.prev = 1;
	          _context2.next = 4;
	          return api.once(uid ? entity + '/' + uid : entity);
	
	        case 4:
	          snapshot = _context2.sent;
	          val = snapshot.val();
	
	          if (!attrs[entity]) {
	            _context2.next = 14;
	            break;
	          }
	
	          i = 0;
	
	        case 8:
	          if (!(attr = attrs[entity][i])) {
	            _context2.next = 14;
	            break;
	          }
	
	          if (!snapshot.hasChild(attr)) {
	            _context2.next = 11;
	            break;
	          }
	
	          return _context2.delegateYield(_regenerator2.default.mark(function _callee() {
	            var res, snap;
	            return _regenerator2.default.wrap(function _callee$(_context) {
	              while (1) {
	                switch (_context.prev = _context.next) {
	                  case 0:
	                    res = {};
	                    _context.next = 3;
	                    return api.once(attr);
	
	                  case 3:
	                    snap = _context.sent;
	
	
	                    _lodash2.default.forEach(val[attr], function (id) {
	                      if (snap.hasChild(id)) {
	                        res[id] = snap.child(id).val();
	                      }
	                    });
	
	                    _context.next = 7;
	                    return (0, _effects.put)(actions.updateCache({ entity: attr, response: res }));
	
	                  case 7:
	                  case 'end':
	                    return _context.stop();
	                }
	              }
	            }, _callee, _this);
	          })(), 't0', 11);
	
	        case 11:
	          i++;
	          _context2.next = 8;
	          break;
	
	        case 14:
	          _context2.next = 16;
	          return (0, _effects.put)(actions.updateCache({ entity: entity, response: uid ? (0, _defineProperty3.default)({}, uid, val) : val }));
	
	        case 16:
	          _context2.next = 26;
	          break;
	
	        case 18:
	          _context2.prev = 18;
	          _context2.t1 = _context2['catch'](1);
	          error = JSON.parse((0, _stringify2.default)(_context2.t1));
	          message = error.code === 'PERMISSION_DENIED' ? 'Sua sessão expirou. Por favor, faça login novamente' : 'Ocorreu um erro ao tentar realizar a ação solicitada. Por favor, tente novamente.';
	          _context2.next = 24;
	          return (0, _effects.put)(actions.notifyError(error.message || message));
	
	        case 24:
	          _context2.next = 26;
	          return (0, _effects.put)(actions.updateCache(_context2.t1));
	
	        case 26:
	        case 'end':
	          return _context2.stop();
	      }
	    }
	  }, _marked[0], this, [[1, 18]]);
	}
	
	function remove(action) {
	  var _action$payload, entity, uid, user;
	
	  return _regenerator2.default.wrap(function remove$(_context3) {
	    while (1) {
	      switch (_context3.prev = _context3.next) {
	        case 0:
	          _action$payload = action.payload, entity = _action$payload.entity, uid = _action$payload.uid;
	          _context3.prev = 1;
	          _context3.next = 4;
	          return api.remove(entity + '/' + uid);
	
	        case 4:
	          if (!(entity === 'services' || entity === 'campaigns')) {
	            _context3.next = 15;
	            break;
	          }
	
	          _context3.next = 7;
	          return (0, _effects.select)(_selectors2.default.getUser);
	
	        case 7:
	          user = _context3.sent;
	
	
	          user = _lodash2.default.merge({}, user);
	          delete user[entity][uid];
	          _context3.next = 12;
	          return api.save('users', user);
	
	        case 12:
	          user = _context3.sent;
	          _context3.next = 15;
	          return (0, _effects.put)(actions.updateCache({ entity: 'users', response: (0, _defineProperty3.default)({}, user.uid, user) }));
	
	        case 15:
	          _context3.next = 17;
	          return (0, _effects.put)(actions.removeCache({ entity: entity, uid: uid }));
	
	        case 17:
	          _context3.next = 26;
	          break;
	
	        case 19:
	          _context3.prev = 19;
	          _context3.t0 = _context3['catch'](1);
	
	          console.log(_context3.t0);_context3.next = 24;
	          return (0, _effects.put)(actions.notifyError(_context3.t0));
	
	        case 24:
	          _context3.next = 26;
	          return (0, _effects.put)(actions.removeCache(_context3.t0));
	
	        case 26:
	        case 'end':
	          return _context3.stop();
	      }
	    }
	  }, _marked[1], this, [[1, 19]]);
	}
	
	function save(action) {
	  var _ref3, ref, data, res;
	
	  return _regenerator2.default.wrap(function save$(_context4) {
	    while (1) {
	      switch (_context4.prev = _context4.next) {
	        case 0:
	          _ref3 = action.payload || {}, ref = _ref3.ref, data = _ref3.data;
	          _context4.prev = 1;
	          _context4.next = 4;
	          return api.save(ref, data);
	
	        case 4:
	          res = _context4.sent;
	          _context4.next = 7;
	          return (0, _effects.put)(actions.updateCache({ entity: ref, response: (0, _defineProperty3.default)({}, res.uid, res) }));
	
	        case 7:
	          _context4.next = 16;
	          break;
	
	        case 9:
	          _context4.prev = 9;
	          _context4.t0 = _context4['catch'](1);
	
	          console.log(_context4.t0);_context4.next = 14;
	          return (0, _effects.put)(actions.notifyError(_context4.t0));
	
	        case 14:
	          _context4.next = 16;
	          return (0, _effects.put)(actions.save(_context4.t0));
	
	        case 16:
	        case 'end':
	          return _context4.stop();
	      }
	    }
	  }, _marked[2], this, [[1, 9]]);
	}
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(attrs, 'attrs', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/entities.js');
	
	  __REACT_HOT_LOADER__.register(read, 'read', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/entities.js');
	
	  __REACT_HOT_LOADER__.register(remove, 'remove', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/entities.js');
	
	  __REACT_HOT_LOADER__.register(save, 'save', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/entities.js');
	}();

	;

/***/ },

/***/ "./src/store/selectors/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(49);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _auth = __webpack_require__("./src/store/selectors/auth.js");
	
	var auth = _interopRequireWildcard(_auth);
	
	var _entities = __webpack_require__("./src/store/selectors/entities.js");
	
	var entities = _interopRequireWildcard(_entities);
	
	var _global = __webpack_require__("./src/store/selectors/global.js");
	
	var global = _interopRequireWildcard(_global);
	
	var _filter = __webpack_require__("./src/store/selectors/filter.js");
	
	var filter = _interopRequireWildcard(_filter);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _default = (0, _extends3.default)({}, auth, entities, global, filter);
	
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/index.js');
	}();

	;

/***/ },

/***/ 49:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1720);

/***/ },

/***/ "./src/store/selectors/auth.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isAuthenticated = exports.isAuthenticating = exports.isRegistering = exports.getUser = exports.getAuth = undefined;
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _reselect = __webpack_require__(50);
	
	var _createGetData = __webpack_require__("./src/helpers/create-get-data.js");
	
	var _createGetData2 = _interopRequireDefault(_createGetData);
	
	var _entities = __webpack_require__("./src/store/selectors/entities.js");
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var getData = (0, _createGetData2.default)('auth');
	
	var getAuth = exports.getAuth = getData('authData');
	
	var getUser = exports.getUser = (0, _reselect.createSelector)(getAuth, function (state) {
	  return (0, _entities.getEntitiesByIds)('users', _lodash2.default, state);
	}, function (auth, fnGetUser) {
	  return fnGetUser([auth.uid])[auth.uid];
	});
	
	var isRegistering = exports.isRegistering = getData('isRegistering');
	var isAuthenticating = exports.isAuthenticating = getData('isAuthenticating');
	var isAuthenticated = exports.isAuthenticated = (0, _reselect.createSelector)(getAuth, function (auth) {
	  return !_lodash2.default.isEmpty(auth);
	});
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(getData, 'getData', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/auth.js');
	
	  __REACT_HOT_LOADER__.register(getAuth, 'getAuth', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/auth.js');
	
	  __REACT_HOT_LOADER__.register(getUser, 'getUser', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/auth.js');
	
	  __REACT_HOT_LOADER__.register(isRegistering, 'isRegistering', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/auth.js');
	
	  __REACT_HOT_LOADER__.register(isAuthenticating, 'isAuthenticating', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/auth.js');
	
	  __REACT_HOT_LOADER__.register(isAuthenticated, 'isAuthenticated', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/auth.js');
	}();

	;

/***/ },

/***/ 50:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1824);

/***/ },

/***/ "./src/helpers/create-get-data.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lodash = __webpack_require__(11);
	
	var _default = function _default(reducerName) {
	  return (0, _lodash.curry)(function (attr, state) {
	    return (0, _lodash.get)(state[reducerName], attr);
	  });
	};
	
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/helpers/create-get-data.js');
	}();

	;

/***/ },

/***/ "./src/store/selectors/entities.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getEntitiesByIds = exports.getEntity = exports.getEntities = exports.isRemoving = exports.isFetching = undefined;
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _createGetData = __webpack_require__("./src/helpers/create-get-data.js");
	
	var _createGetData2 = _interopRequireDefault(_createGetData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var getData = (0, _createGetData2.default)('entities');
	
	var isFetching = exports.isFetching = function isFetching(entity) {
	  return getData('isFetching.' + entity);
	};
	var isRemoving = exports.isRemoving = function isRemoving(entity, id) {
	  return getData('isRemoving.' + entity + '.' + id);
	};
	var getEntities = exports.getEntities = function getEntities(entity) {
	  return getData('byId.' + entity);
	};
	var getEntity = exports.getEntity = function getEntity(entity, id) {
	  return getData('byId.' + entity + '.' + id);
	};
	
	var getEntitiesByIds = exports.getEntitiesByIds = _lodash2.default.curry(function (entity, ids, state) {
	  return ids.reduce(function (entities, id) {
	    entities[id] = getEntity(entity, id)(state) || {};
	    return entities;
	  }, {});
	});
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(getData, 'getData', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/entities.js');
	
	  __REACT_HOT_LOADER__.register(isFetching, 'isFetching', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/entities.js');
	
	  __REACT_HOT_LOADER__.register(isRemoving, 'isRemoving', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/entities.js');
	
	  __REACT_HOT_LOADER__.register(getEntities, 'getEntities', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/entities.js');
	
	  __REACT_HOT_LOADER__.register(getEntity, 'getEntity', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/entities.js');
	
	  __REACT_HOT_LOADER__.register(getEntitiesByIds, 'getEntitiesByIds', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/entities.js');
	}();

	;

/***/ },

/***/ "./src/store/selectors/global.js":
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var isLoadingState = exports.isLoadingState = function isLoadingState(state) {
	  return state.asyncState.loading;
	};
	var isUpdatingProfile = exports.isUpdatingProfile = function isUpdatingProfile(state) {
	  return state.global.isUpdatingProfile;
	};
	
	var getCurrentTabFeed = exports.getCurrentTabFeed = function getCurrentTabFeed(state) {
	  return state.global.currentTabFeed;
	};
	var getNotification = exports.getNotification = function getNotification(state) {
	  return state.global.notification;
	};
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(isLoadingState, "isLoadingState", "D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/global.js");
	
	  __REACT_HOT_LOADER__.register(isUpdatingProfile, "isUpdatingProfile", "D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/global.js");
	
	  __REACT_HOT_LOADER__.register(getCurrentTabFeed, "getCurrentTabFeed", "D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/global.js");
	
	  __REACT_HOT_LOADER__.register(getNotification, "getNotification", "D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/global.js");
	}();

	;

/***/ },

/***/ "./src/store/selectors/filter.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getResults = exports.getSkillsFilter = exports.getEntityFilter = exports.getQueryFilter = exports.isFiltering = undefined;
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _latinize = __webpack_require__(51);
	
	var _latinize2 = _interopRequireDefault(_latinize);
	
	var _reselect = __webpack_require__(50);
	
	var _createGetData = __webpack_require__("./src/helpers/create-get-data.js");
	
	var _createGetData2 = _interopRequireDefault(_createGetData);
	
	var _entities = __webpack_require__("./src/store/selectors/entities.js");
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _getData = (0, _createGetData2.default)('filter');
	
	var format = function format(data) {
	  return {
	    title: data.name,
	    meta: data.email,
	    image: data.image,
	    description: data.resume || data.description || '',
	    created_at: data.created_at
	  };
	};
	
	var isFiltering = exports.isFiltering = _getData('isFiltering');
	var getQueryFilter = exports.getQueryFilter = _getData('query');
	var getEntityFilter = exports.getEntityFilter = _getData('entity');
	var getSkillsFilter = exports.getSkillsFilter = _getData('skills');
	
	var getResults = exports.getResults = (0, _reselect.createSelector)(getQueryFilter, getEntityFilter, getSkillsFilter, function (state) {
	  return _lodash2.default.curry(_entities.getEntities)(_lodash2.default, state);
	}, function (query, entity, skills, entityNames, fnGetEntities) {
	  var results = {};
	
	  _lodash2.default.forEach(fnGetEntities(entity), function (item) {
	    var match = (0, _latinize2.default)(item.title).toLowerCase().search(query) !== -1 && (!skills.length || _lodash2.default.intersection(_lodash2.default.values(item.skills), skills).length);
	
	    if (match) {
	      results[item.uid] = format(item);
	    }
	  });
	
	  return results;
	});
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(_getData, '_getData', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/filter.js');
	
	  __REACT_HOT_LOADER__.register(format, 'format', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/filter.js');
	
	  __REACT_HOT_LOADER__.register(isFiltering, 'isFiltering', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/filter.js');
	
	  __REACT_HOT_LOADER__.register(getQueryFilter, 'getQueryFilter', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/filter.js');
	
	  __REACT_HOT_LOADER__.register(getEntityFilter, 'getEntityFilter', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/filter.js');
	
	  __REACT_HOT_LOADER__.register(getSkillsFilter, 'getSkillsFilter', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/filter.js');
	
	  __REACT_HOT_LOADER__.register(getResults, 'getResults', 'D:/repo.git/djalmajr/agencia-amiga/src/store/selectors/filter.js');
	}();

	;

/***/ },

/***/ 51:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(2182);

/***/ },

/***/ "./src/store/sagas/profile.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _regenerator = __webpack_require__("./node_modules/babel-runtime/regenerator/index.js");
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _objectWithoutProperties2 = __webpack_require__(52);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	exports.update = update;
	exports.addToOrg = addToOrg;
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _effects = __webpack_require__("./node_modules/redux-saga/effects.js");
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actions = _interopRequireWildcard(_actions);
	
	var _apis = __webpack_require__("./src/store/apis.js");
	
	var api = _interopRequireWildcard(_apis);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _marked = [update, addToOrg].map(_regenerator2.default.mark);
	
	function update(_ref) {
	  var payload = _ref.payload;
	  var password, userData, user;
	  return _regenerator2.default.wrap(function update$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          password = payload.password, userData = (0, _objectWithoutProperties3.default)(payload, ['password']);
	          _context.prev = 1;
	          _context.next = 4;
	          return api.save('users', userData);
	
	        case 4:
	          user = _context.sent;
	          _context.next = 7;
	          return api.updateProfile({ displayName: payload.name });
	
	        case 7:
	          if (!password) {
	            _context.next = 10;
	            break;
	          }
	
	          _context.next = 10;
	          return api.updatePassword(password);
	
	        case 10:
	          _context.next = 12;
	          return (0, _effects.put)(actions.notify('Dados atualizados!'));
	
	        case 12:
	          _context.next = 14;
	          return (0, _effects.put)(actions.updateCache({ entity: 'users', response: (0, _defineProperty3.default)({}, user.uid, user) }));
	
	        case 14:
	          _context.next = 23;
	          break;
	
	        case 16:
	          _context.prev = 16;
	          _context.t0 = _context['catch'](1);
	
	          console.log(_context.t0);_context.next = 21;
	          return (0, _effects.put)(actions.notifyError(_context.t0));
	
	        case 21:
	          _context.next = 23;
	          return (0, _effects.put)(actions.updateCache(_context.t0));
	
	        case 23:
	        case 'end':
	          return _context.stop();
	      }
	    }
	  }, _marked[0], this, [[1, 16]]);
	}
	
	function addToOrg(_ref2) {
	  var _ref2$payload = _ref2.payload,
	      data = _ref2$payload.data,
	      entity = _ref2$payload.entity;
	  var user, res, val;
	  return _regenerator2.default.wrap(function addToOrg$(_context2) {
	    while (1) {
	      switch (_context2.prev = _context2.next) {
	        case 0:
	          _context2.prev = 0;
	          _context2.next = 3;
	          return (0, _effects.select)(_selectors2.default.getUser);
	
	        case 3:
	          user = _context2.sent;
	          _context2.next = 6;
	          return api.save(entity, data);
	
	        case 6:
	          res = _context2.sent;
	          _context2.next = 9;
	          return api.save('users', _lodash2.default.merge({}, user, (0, _defineProperty3.default)({}, entity, (0, _defineProperty3.default)({}, res.uid, res.uid))));
	
	        case 9:
	          val = _context2.sent;
	          _context2.next = 12;
	          return (0, _effects.put)(actions.updateCache({ entity: entity, response: (0, _defineProperty3.default)({}, res.uid, res) }));
	
	        case 12:
	          _context2.next = 14;
	          return (0, _effects.put)(actions.updateCache({ entity: 'users', response: (0, _defineProperty3.default)({}, val.uid, val) }));
	
	        case 14:
	          _context2.next = 23;
	          break;
	
	        case 16:
	          _context2.prev = 16;
	          _context2.t0 = _context2['catch'](0);
	
	          console.log(_context2.t0);_context2.next = 21;
	          return (0, _effects.put)(actions.notifyError(_context2.t0));
	
	        case 21:
	          _context2.next = 23;
	          return (0, _effects.put)(actions.updateCache(_context2.t0));
	
	        case 23:
	        case 'end':
	          return _context2.stop();
	      }
	    }
	  }, _marked[1], this, [[0, 16]]);
	}
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(update, 'update', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/profile.js');
	
	  __REACT_HOT_LOADER__.register(addToOrg, 'addToOrg', 'D:/repo.git/djalmajr/agencia-amiga/src/store/sagas/profile.js');
	}();

	;

/***/ },

/***/ 52:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1641);

/***/ },

/***/ "./src/store/cache-state.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.saveState = exports.loadState = undefined;
	
	var _promise = __webpack_require__("./node_modules/babel-runtime/core-js/promise.js");
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _lodash = __webpack_require__(11);
	
	var _localforage = __webpack_require__(53);
	
	var _localforage2 = _interopRequireDefault(_localforage);
	
	var _constants = __webpack_require__("./src/constants.js");
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var loadState = exports.loadState = function loadState(currentState) {
	  return new _promise2.default(function (resolve) {
	    _localforage2.default.getItem(_constants.Cache.KEY, function (err) {
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	      if (err) {
	        console.log(err);
	      }
	
	      return resolve((0, _lodash.merge)({}, currentState, state));
	    });
	  });
	};
	
	var saveState = exports.saveState = function saveState(state) {
	  _localforage2.default.setItem(_constants.Cache.KEY, state);
	};
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(loadState, 'loadState', 'D:/repo.git/djalmajr/agencia-amiga/src/store/cache-state.js');
	
	  __REACT_HOT_LOADER__.register(saveState, 'saveState', 'D:/repo.git/djalmajr/agencia-amiga/src/store/cache-state.js');
	}();

	;

/***/ },

/***/ 53:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(2183);

/***/ },

/***/ "./src/devtools.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.showDevTools = exports.DevTools = undefined;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(8);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reduxDevtools = __webpack_require__(54);
	
	var _reduxDevtoolsLogMonitor = __webpack_require__(55);
	
	var _reduxDevtoolsLogMonitor2 = _interopRequireDefault(_reduxDevtoolsLogMonitor);
	
	var _reduxDevtoolsDockMonitor = __webpack_require__(56);
	
	var _reduxDevtoolsDockMonitor2 = _interopRequireDefault(_reduxDevtoolsDockMonitor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DevTools = exports.DevTools = (0, _reduxDevtools.createDevTools)(_react2.default.createElement(
	  _reduxDevtoolsDockMonitor2.default,
	  {
	    fluid: true,
	    defaultSize: 1,
	    changePositionKey: 'ctrl-shift-y',
	    toggleVisibilityKey: 'ctrl-shift-h'
	  },
	  _react2.default.createElement(_reduxDevtoolsLogMonitor2.default, null)
	));
	
	var showDevTools = exports.showDevTools = function showDevTools(store) {
	  var popup = window.open(null, 'Redux DevTools', 'menubar=no,location=no,resizable=yes,scrollbars=no,status=no');
	
	  popup.location.reload();
	
	  setTimeout(function () {
	    popup.document.write('<div id="react-devtools-root"></div>');
	    _reactDom2.default.render(_react2.default.createElement(DevTools, { store: store }), popup.document.getElementById('react-devtools-root'));
	  }, 10);
	};
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(DevTools, 'DevTools', 'D:/repo.git/djalmajr/agencia-amiga/src/devtools.jsx');
	
	  __REACT_HOT_LOADER__.register(showDevTools, 'showDevTools', 'D:/repo.git/djalmajr/agencia-amiga/src/devtools.jsx');
	}();

	;

/***/ },

/***/ 54:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1563);

/***/ },

/***/ 55:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1589);

/***/ },

/***/ 56:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1780);

/***/ },

/***/ "./src/application.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _reactRouter = __webpack_require__(58);
	
	var _main = __webpack_require__("./src/views/containers/main.jsx");
	
	var _main2 = _interopRequireDefault(_main);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Application = function Application(_ref) {
	  var store = _ref.store;
	  return _react2.default.createElement(
	    _reactRedux.Provider,
	    { store: store },
	    _react2.default.createElement(
	      _reactRouter.BrowserRouter,
	      null,
	      _react2.default.createElement(_reactRouter.Match, { pattern: '/', component: _main2.default })
	    )
	  );
	};
	
	Application.propTypes = {
	  store: _react2.default.PropTypes.object
	};
	
	var _default = Application;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Application, 'Application', 'D:/repo.git/djalmajr/agencia-amiga/src/application.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/application.jsx');
	}();

	;

/***/ },

/***/ 57:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1345);

/***/ },

/***/ 58:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1374);

/***/ },

/***/ "./src/views/containers/main.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _lodash = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(57);
	
	var _redux = __webpack_require__(12);
	
	var _reactRouter = __webpack_require__(58);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _requireAuth = __webpack_require__("./src/helpers/require-auth.js");
	
	var _requireAuth2 = _interopRequireDefault(_requireAuth);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _feed = __webpack_require__("./src/views/content/feed/index.js");
	
	var _feed2 = _interopRequireDefault(_feed);
	
	var _buscar = __webpack_require__("./src/views/content/buscar/index.js");
	
	var _buscar2 = _interopRequireDefault(_buscar);
	
	var _campanha = __webpack_require__("./src/views/content/campanha/index.js");
	
	var _campanha2 = _interopRequireDefault(_campanha);
	
	var _organizacao = __webpack_require__("./src/views/content/organizacao/index.js");
	
	var _organizacao2 = _interopRequireDefault(_organizacao);
	
	var _servico = __webpack_require__("./src/views/content/servico/index.js");
	
	var _servico2 = _interopRequireDefault(_servico);
	
	var _usuario = __webpack_require__("./src/views/content/usuario/index.js");
	
	var _usuario2 = _interopRequireDefault(_usuario);
	
	var _login = __webpack_require__("./src/views/containers/login.jsx");
	
	var _login2 = _interopRequireDefault(_login);
	
	var _notification = __webpack_require__("./src/views/containers/notification.jsx");
	
	var _notification2 = _interopRequireDefault(_notification);
	
	var _topbar = __webpack_require__("./src/views/containers/topbar/index.js");
	
	var _topbar2 = _interopRequireDefault(_topbar);
	
	var _main = __webpack_require__("./src/views/containers/main.scss");
	
	var _main2 = _interopRequireDefault(_main);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Main = function (_React$PureComponent) {
	  (0, _inherits3.default)(Main, _React$PureComponent);
	
	  function Main() {
	    (0, _classCallCheck3.default)(this, Main);
	    return (0, _possibleConstructorReturn3.default)(this, (Main.__proto__ || (0, _getPrototypeOf2.default)(Main)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(Main, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(_ref) {
	      var actions = _ref.actions,
	          auth = _ref.auth,
	          hasSkills = _ref.hasSkills,
	          isLogged = _ref.isLogged,
	          user = _ref.user;
	
	      if (!isLogged) {
	        return;
	      }
	
	      if (!hasSkills) {
	        actions.read({ entity: 'skills' });
	      }
	
	      if (!user.id) {
	        actions.read({ entity: 'users', uid: auth.uid });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          isLogged = _props.isLogged,
	          isLoadingState = _props.isLoadingState,
	          user = _props.user;
	
	
	      if (isLoadingState || !user.id) {
	        return _react2.default.createElement(
	          _flexElement2.default,
	          { column: true, full: true, align: 'center', justify: 'center', className: _main2.default.wrapper },
	          _react2.default.createElement(
	            _semanticUiReact.Loader,
	            { active: true },
	            _react2.default.createElement(
	              'span',
	              { style: { color: 'rgba(0,0,0, 0.45)' } },
	              'Carregando o sistema...'
	            )
	          )
	        );
	      }
	
	      return _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, className: _main2.default.wrapper },
	        _react2.default.createElement(_notification2.default, null),
	        isLogged && _react2.default.createElement(_topbar2.default, null),
	        _react2.default.createElement(
	          _flexElement2.default,
	          { full: true, className: _main2.default.content },
	          _react2.default.createElement(_reactRouter.Match, { pattern: '/', exactly: true, component: (0, _requireAuth2.default)(_feed2.default) }),
	          _react2.default.createElement(_reactRouter.Match, { pattern: '/login', component: _login2.default }),
	          _react2.default.createElement(_reactRouter.Match, { pattern: '/buscar', component: (0, _requireAuth2.default)(_buscar2.default) }),
	          _react2.default.createElement(_reactRouter.Match, { pattern: '/campanhas/:id', component: (0, _requireAuth2.default)(_campanha2.default) }),
	          _react2.default.createElement(_reactRouter.Match, { pattern: '/organizacoes/:id', component: (0, _requireAuth2.default)(_organizacao2.default) }),
	          _react2.default.createElement(_reactRouter.Match, { pattern: '/voluntarios/:id', component: (0, _requireAuth2.default)(_usuario2.default) }),
	          _react2.default.createElement(_reactRouter.Match, { pattern: '/servicos/:id', component: (0, _requireAuth2.default)(_servico2.default) })
	        )
	      );
	    }
	  }]);
	  return Main;
	}(_react2.default.PureComponent);
	
	Main.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  auth: _react2.default.PropTypes.object,
	  hasSkills: _react2.default.PropTypes.bool,
	  isLogged: _react2.default.PropTypes.bool,
	  isLoadingState: _react2.default.PropTypes.bool,
	  user: _react2.default.PropTypes.object
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    hasSkills: !(0, _lodash.isEmpty)(_selectors2.default.getEntities(state, 'skills')),
	    isLogged: _selectors2.default.isAuthenticated(state),
	    isLoadingState: _selectors2.default.isLoadingState(state),
	    auth: _selectors2.default.getAuth(state),
	    user: _selectors2.default.getUser(state)
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Main);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Main, 'Main', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/main.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/main.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/main.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/main.jsx');
	}();

	;

/***/ },

/***/ 59:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1787);

/***/ },

/***/ 60:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1642);

/***/ },

/***/ 61:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1794);

/***/ },

/***/ 62:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1643);

/***/ },

/***/ 63:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1712);

/***/ },

/***/ 64:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1825);

/***/ },

/***/ "./src/helpers/require-auth.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _objectWithoutProperties2 = __webpack_require__(52);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _reactRouter = __webpack_require__(58);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var requireAuth = function requireAuth(ComposedComponent) {
	  var Auth = function Auth(_ref) {
	    var isAuthorized = _ref.isAuthorized,
	        otherProps = (0, _objectWithoutProperties3.default)(_ref, ['isAuthorized']);
	    return isAuthorized ? _react2.default.createElement(ComposedComponent, otherProps) : _react2.default.createElement(_reactRouter.Redirect, {
	      to: {
	        pathname: '/login',
	        state: {
	          redirect: (otherProps.location || {}).pathname === '/login' ? ((otherProps.location || {}).state || {}).redirect : otherProps.location
	        }
	      }
	    });
	  };
	
	  Auth.propTypes = {
	    isAuthorized: _react2.default.PropTypes.bool
	  };
	
	  var mapStateToProps = function mapStateToProps(state) {
	    return {
	      isAuthorized: _selectors2.default.isAuthenticated(state)
	    };
	  };
	
	  return (0, _reactRedux.connect)(mapStateToProps)(Auth);
	};
	
	var _default = requireAuth;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(requireAuth, 'requireAuth', 'D:/repo.git/djalmajr/agencia-amiga/src/helpers/require-auth.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/helpers/require-auth.js');
	}();

	;

/***/ },

/***/ "./src/views/components/flex-element/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/flex-element.jsx");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _default = _flexElement2.default;
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/components/flex-element/index.js');
	}();

	;

/***/ },

/***/ "./src/views/components/flex-element/flex-element.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(49);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(65);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _cnames = __webpack_require__("./src/helpers/cnames.js");
	
	var _cnames2 = _interopRequireDefault(_cnames);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/flex-element.scss");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _defaultProps = __webpack_require__("./src/views/components/default-props.jsx");
	
	var _defaultProps2 = _interopRequireDefault(_defaultProps);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FlexElement = function (_React$PureComponent) {
	  (0, _inherits3.default)(FlexElement, _React$PureComponent);
	
	  function FlexElement() {
	    (0, _classCallCheck3.default)(this, FlexElement);
	    return (0, _possibleConstructorReturn3.default)(this, (FlexElement.__proto__ || (0, _getPrototypeOf2.default)(FlexElement)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(FlexElement, [{
	    key: 'getClassName',
	    value: function getClassName() {
	      var _classes;
	
	      var classes = (_classes = {
	        flex: true,
	        column: this.props.column,
	        disabled: this.props.disabled,
	        full: this.props.full,
	        row: !this.props.column
	      }, (0, _defineProperty3.default)(_classes, 'align-' + this.props.align, !!this.props.align), (0, _defineProperty3.default)(_classes, 'justify-' + this.props.justify, !!this.props.justify), _classes);
	
	      return (0, _classnames2.default)((0, _defineProperty3.default)({}, this.props.className, this.props.className), (0, _cnames2.default)(_flexElement2.default, classes));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          component = _props.component,
	          innerRef = _props.innerRef,
	          style = _props.style,
	          onClick = _props.onClick;
	
	      var props = { ref: innerRef, style: style, className: this.getClassName(), onClick: onClick };
	
	      return _react2.default.createElement(component, props, children);
	    }
	  }]);
	  return FlexElement;
	}(_react2.default.PureComponent);
	
	FlexElement.propTypes = (0, _extends3.default)({}, _defaultProps2.default.propTypes, {
	  align: _react2.default.PropTypes.oneOf(['baseline', 'center', 'flex-end', 'flex-start', 'inherit', 'initial', 'stretch']),
	
	  column: _react2.default.PropTypes.bool,
	
	  full: _react2.default.PropTypes.bool,
	
	  justify: _react2.default.PropTypes.oneOf(['center', 'flex-end', 'flex-start', 'inherit', 'initial', 'space-around', 'space-between']),
	
	  row: _react2.default.PropTypes.bool,
	
	  onClick: _react2.default.PropTypes.func
	});
	FlexElement.defaultProps = (0, _extends3.default)({}, _defaultProps2.default.defaultProps);
	var _default = FlexElement;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(FlexElement, 'FlexElement', 'D:/repo.git/djalmajr/agencia-amiga/src/views/components/flex-element/flex-element.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/components/flex-element/flex-element.jsx');
	}();

	;

/***/ },

/***/ 65:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1);

/***/ },

/***/ "./src/helpers/cnames.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classnames = __webpack_require__(65);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _default = function _default(styles) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }
	
	  var result = [];
	
	  args.forEach(function (arg) {
	    var classes = (0, _classnames2.default)(arg);
	
	    classes.split(' ').forEach(function (cname) {
	      if (styles[cname]) {
	        result.push(styles[cname]);
	      }
	    });
	  });
	
	  return result.join(' ');
	};
	
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/helpers/cnames.js');
	}();

	;

/***/ },

/***/ "./src/views/components/flex-element/flex-element.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/components/flex-element/flex-element.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/components/flex-element/flex-element.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/components/flex-element/flex-element.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/components/flex-element/flex-element.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".flex-element__flex__3n1G9EvjaC {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  position: relative; }\n\n.flex-element__column__2xfc6QWVtl {\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column; }\n\n.flex-element__row__3lc3dZ14Z2 {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row; }\n\n.flex-element__wrap__2V0JOVU1jv {\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap; }\n\n.flex-element__full__15R8IXwt4M {\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1; }\n\n.flex-element__disabled__aInL-gj8h0 {\n  cursor: not-allowed;\n  opacity: 0.6; }\n\n.flex-element__align-baseline__3rcCPYPgcm {\n  -webkit-box-align: baseline;\n      -ms-flex-align: baseline;\n          align-items: baseline; }\n\n.flex-element__align-center__1V22hiUx2p {\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center; }\n\n.flex-element__align-flex-end__Rj4x2CHy5b {\n  -webkit-box-align: end;\n      -ms-flex-align: end;\n          align-items: flex-end; }\n\n.flex-element__align-flex-start__1WsAsZPCXD {\n  -webkit-box-align: start;\n      -ms-flex-align: start;\n          align-items: flex-start; }\n\n.flex-element__align-stretch__dImETF0cSm {\n  -webkit-box-align: stretch;\n      -ms-flex-align: stretch;\n          align-items: stretch; }\n\n.flex-element__justify-center__8giI8q8xE0 {\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center; }\n\n.flex-element__justify-flex-end__F77Cyn98eU {\n  -webkit-box-pack: end;\n      -ms-flex-pack: end;\n          justify-content: flex-end; }\n\n.flex-element__justify-flex-start__3xRqqiey-A {\n  -webkit-box-pack: start;\n      -ms-flex-pack: start;\n          justify-content: flex-start; }\n\n.flex-element__justify-space-around__9CzogNVT8b {\n  -ms-flex-pack: distribute;\n      justify-content: space-around; }\n\n.flex-element__justify-space-between__3p_nuQaUnH {\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between; }\n", "", {"version":3,"sources":["/./src/views/components/flex-element/src/views/components/flex-element/flex-element.scss"],"names":[],"mappings":"AAAA;EACE,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,mBAAmB,EACpB;;AAED;EACE,6BAAuB;EAAvB,8BAAuB;MAAvB,2BAAuB;UAAvB,uBAAuB,EACxB;;AAED;EACE,+BAAoB;EAApB,8BAAoB;MAApB,wBAAoB;UAApB,oBAAoB,EACrB;;AAED;EACE,oBAAgB;MAAhB,gBAAgB,EACjB;;AAED;EACE,oBAAQ;MAAR,YAAQ;UAAR,QAAQ,EACT;;AAED;EACE,oBAAoB;EACpB,aAAa,EACd;;AAED;EACE,4BAAsB;MAAtB,yBAAsB;UAAtB,sBAAsB,EACvB;;AAED;EACE,0BAAoB;MAApB,uBAAoB;UAApB,oBAAoB,EACrB;;AAED;EACE,uBAAsB;MAAtB,oBAAsB;UAAtB,sBAAsB,EACvB;;AAED;EACE,yBAAwB;MAAxB,sBAAwB;UAAxB,wBAAwB,EACzB;;AAED;EACE,2BAAqB;MAArB,wBAAqB;UAArB,qBAAqB,EACtB;;AAED;EACE,yBAAwB;MAAxB,sBAAwB;UAAxB,wBAAwB,EACzB;;AAED;EACE,sBAA0B;MAA1B,mBAA0B;UAA1B,0BAA0B,EAC3B;;AAED;EACE,wBAA4B;MAA5B,qBAA4B;UAA5B,4BAA4B,EAC7B;;AAED;EACE,0BAA8B;MAA9B,8BAA8B,EAC/B;;AAED;EACE,0BAA+B;MAA/B,uBAA+B;UAA/B,+BAA+B,EAChC","file":"flex-element.scss","sourcesContent":[".flex {\n  display: flex;\n  position: relative;\n}\n\n.column {\n  flex-direction: column;\n}\n\n.row {\n  flex-direction: row;\n}\n\n.wrap {\n  flex-wrap: wrap;\n}\n\n.full {\n  flex: 1;\n}\n\n.disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n.align-baseline {\n  align-items: baseline;\n}\n\n.align-center {\n  align-items: center;\n}\n\n.align-flex-end {\n  align-items: flex-end;\n}\n\n.align-flex-start {\n  align-items: flex-start;\n}\n\n.align-stretch {\n  align-items: stretch;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.justify-flex-end {\n  justify-content: flex-end;\n}\n\n.justify-flex-start {\n  justify-content: flex-start;\n}\n\n.justify-space-around {\n  justify-content: space-around;\n}\n\n.justify-space-between {\n  justify-content: space-between;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"flex": "flex-element__flex__3n1G9EvjaC",
		"column": "flex-element__column__2xfc6QWVtl",
		"row": "flex-element__row__3lc3dZ14Z2",
		"wrap": "flex-element__wrap__2V0JOVU1jv",
		"full": "flex-element__full__15R8IXwt4M",
		"disabled": "flex-element__disabled__aInL-gj8h0",
		"align-baseline": "flex-element__align-baseline__3rcCPYPgcm",
		"align-center": "flex-element__align-center__1V22hiUx2p",
		"align-flex-end": "flex-element__align-flex-end__Rj4x2CHy5b",
		"align-flex-start": "flex-element__align-flex-start__1WsAsZPCXD",
		"align-stretch": "flex-element__align-stretch__dImETF0cSm",
		"justify-center": "flex-element__justify-center__8giI8q8xE0",
		"justify-flex-end": "flex-element__justify-flex-end__F77Cyn98eU",
		"justify-flex-start": "flex-element__justify-flex-start__3xRqqiey-A",
		"justify-space-around": "flex-element__justify-space-around__9CzogNVT8b",
		"justify-space-between": "flex-element__justify-space-between__3p_nuQaUnH"
	};

/***/ },

/***/ "./src/views/components/default-props.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _elementType = __webpack_require__(66);
	
	var _elementType2 = _interopRequireDefault(_elementType);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DefaultProps = function DefaultProps() {
	  return _react2.default.createElement('noscript', null);
	};
	
	DefaultProps.propTypes = {
	  children: _react2.default.PropTypes.node,
	
	  className: _react2.default.PropTypes.string,
	
	  component: _elementType2.default,
	
	  style: _react2.default.PropTypes.object
	};
	
	DefaultProps.defaultProps = {
	  className: '',
	  component: 'div',
	  style: {}
	};
	
	var _default = DefaultProps;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(DefaultProps, 'DefaultProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/components/default-props.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/components/default-props.jsx');
	}();

	;

/***/ },

/***/ 66:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1343);

/***/ },

/***/ "./src/views/content/feed/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _objectWithoutProperties2 = __webpack_require__(52);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _organization = __webpack_require__("./src/views/content/feed/organization/index.js");
	
	var _organization2 = _interopRequireDefault(_organization);
	
	var _volunteer = __webpack_require__("./src/views/content/feed/volunteer/index.js");
	
	var _volunteer2 = _interopRequireDefault(_volunteer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Feed = function Feed(_ref) {
	  var user = _ref.user,
	      props = (0, _objectWithoutProperties3.default)(_ref, ['user']);
	  return user.type === 'organization' ? _react2.default.createElement(_organization2.default, props) : _react2.default.createElement(_volunteer2.default, props);
	};
	
	Feed.propTypes = {
	  user: _react2.default.PropTypes.object
	};
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    user: _selectors2.default.getUser(state)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(Feed);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Feed, 'Feed', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/index.js');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _threeColumns = __webpack_require__("./src/views/components/three-columns.jsx");
	
	var _threeColumns2 = _interopRequireDefault(_threeColumns);
	
	var _panel = __webpack_require__("./src/views/content/feed/organization/panel.jsx");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	var _details = __webpack_require__("./src/views/content/feed/organization/details.jsx");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Usuario = function Usuario(props) {
	  return _react2.default.createElement(_threeColumns2.default, {
	    panel: _react2.default.createElement(_panel2.default, props),
	    content: _react2.default.createElement(_details2.default, props)
	  });
	};
	
	var _default = Usuario;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Usuario, 'Usuario', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/index.js');
	}();

	;

/***/ },

/***/ "./src/views/components/three-columns.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ThreeColumns = function ThreeColumns(_ref) {
	  var content = _ref.content,
	      panel = _ref.panel,
	      related = _ref.related;
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { full: true },
	    _react2.default.createElement(
	      _flexElement2.default,
	      { column: true },
	      panel
	    ),
	    _react2.default.createElement(
	      _flexElement2.default,
	      { column: true, full: true },
	      content
	    ),
	    _react2.default.createElement(
	      _flexElement2.default,
	      { column: true },
	      related
	    )
	  );
	};
	
	ThreeColumns.propTypes = {
	  content: _react2.default.PropTypes.node,
	  panel: _react2.default.PropTypes.node,
	  related: _react2.default.PropTypes.node
	};
	
	var _default = ThreeColumns;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(ThreeColumns, 'ThreeColumns', 'D:/repo.git/djalmajr/agencia-amiga/src/views/components/three-columns.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/components/three-columns.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/panel.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var style = {
	  fontSize: '1rem',
	  marginRight: '0.8em',
	  width: '16em'
	};
	
	var Panel = function Panel() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, style: style },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      _react2.default.createElement(
	        _semanticUiReact.Header,
	        { as: 'h5', style: { fontSize: '0.95em' } },
	        'PEDIDOS DE VOLUNT\xC1RIOS'
	      ),
	      _react2.default.createElement(
	        _semanticUiReact.Header,
	        { as: 'h5', style: { fontSize: '0.95em' } },
	        'SERVI\xC7OS ABERTOS'
	      )
	    )
	  );
	};
	
	Panel.propTypes = {
	  skills: _react2.default.PropTypes.object,
	  user: _react2.default.PropTypes.object
	};
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    user: _selectors2.default.getUser(state),
	    skills: _selectors2.default.getEntities(state, 'skills')
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(Panel);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(style, 'style', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(Panel, 'Panel', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/panel.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/details.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _timeline = __webpack_require__("./src/views/content/feed/organization/tabs/timeline.jsx");
	
	var _timeline2 = _interopRequireDefault(_timeline);
	
	var _campaigns = __webpack_require__("./src/views/content/feed/organization/tabs/campaigns/index.js");
	
	var _campaigns2 = _interopRequireDefault(_campaigns);
	
	var _services = __webpack_require__("./src/views/content/feed/organization/tabs/services/index.js");
	
	var _services2 = _interopRequireDefault(_services);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var views = {
	  timeline: {
	    description: 'Feed',
	    component: _timeline2.default
	  },
	  campaigns: {
	    description: 'Campanhas',
	    component: _campaigns2.default
	  },
	  services: {
	    description: 'Serviços',
	    component: _services2.default
	  }
	};
	
	var Details = function Details(_ref) {
	  var active = _ref.active,
	      onTabClick = _ref.onTabClick;
	
	  var Component = views[active].component;
	
	  return _react2.default.createElement(
	    _semanticUiReact.Container,
	    { fluid: true, style: { fontSize: '1rem' } },
	    _react2.default.createElement(
	      _semanticUiReact.Menu,
	      { attached: 'top', tabular: true },
	      _lodash2.default.map(views, function (val, key) {
	        return _react2.default.createElement(
	          _semanticUiReact.Menu.Item,
	          {
	            key: key,
	            name: key,
	            active: active === key,
	            onClick: onTabClick
	          },
	          val.description
	        );
	      })
	    ),
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      { attached: 'bottom' },
	      _react2.default.createElement(Component, null)
	    )
	  );
	};
	
	Details.propTypes = {
	  active: _react2.default.PropTypes.string,
	  onTabClick: _react2.default.PropTypes.func
	};
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    active: _selectors2.default.getCurrentTabFeed(state)
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    onTabClick: function onTabClick(evt, _ref2) {
	      var name = _ref2.name;
	      return dispatch(actionCreators.updateTabFeed(name));
	    }
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Details);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(views, 'views', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/details.jsx');
	
	  __REACT_HOT_LOADER__.register(Details, 'Details', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/details.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/details.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/details.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/details.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/timeline.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _moment = __webpack_require__(7);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var styles = {
	  emptyContainer: { height: 300, fontSize: '1rem' },
	  emptyContent: { maxWidth: 350 },
	  emptyIcon: { color: 'rgba(0,0,0,0.1)', fontSize: '6em' },
	  emptyText: { color: 'rgba(0,0,0,0.5)', marginTop: '1em', textAlign: 'center' }
	};
	
	var Timeline = function Timeline(_ref) {
	  var feed = _ref.feed;
	
	  if (_lodash2.default.isEmpty(feed)) {
	    return _react2.default.createElement(
	      _flexElement2.default,
	      { column: true, align: 'center', justify: 'center', style: styles.emptyContainer },
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, align: 'center', justify: 'center', style: styles.emptyContent },
	        _react2.default.createElement(_semanticUiReact.Icon, { name: 'cloud', style: styles.emptyIcon }),
	        _react2.default.createElement(
	          'span',
	          { style: styles.emptyText },
	          'Est\xE1 meio parado por aqui... Que tal procurar por volunt\xE1rios, criar campanhas ou servi\xE7os?'
	        )
	      )
	    );
	  }
	
	  return _react2.default.createElement(
	    _semanticUiReact.Feed,
	    null,
	    _lodash2.default.keys(feed).sort().reverse().map(function (key) {
	      return _react2.default.createElement(
	        _semanticUiReact.Feed.Event,
	        { key: key, style: { borderBottom: '1px solid #eee' } },
	        _react2.default.createElement(
	          _semanticUiReact.Feed.Label,
	          null,
	          _react2.default.createElement(_semanticUiReact.Icon, { circular: true, name: feed[key].icon, style: { color: 'rgba(0,0,0,0.3)', fontSize: '1.4em' } })
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Feed.Content,
	          null,
	          _react2.default.createElement(_semanticUiReact.Feed.Date, { content: (0, _moment2.default)(parseInt(key, 10)).fromNow() }),
	          _react2.default.createElement(
	            _semanticUiReact.Feed.Summary,
	            null,
	            _react2.default.createElement(
	              'span',
	              { style: { fontWeight: 'normal' } },
	              feed[key].pretext
	            ),
	            ' ',
	            feed[key].text
	          )
	        )
	      );
	    })
	  );
	};
	
	Timeline.propTypes = {
	  feed: _react2.default.PropTypes.object
	};
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    feed: _selectors2.default.getFeed(state)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(Timeline);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(styles, 'styles', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/timeline.jsx');
	
	  __REACT_HOT_LOADER__.register(Timeline, 'Timeline', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/timeline.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/timeline.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/timeline.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/campaigns/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _campaigns = __webpack_require__("./src/views/content/feed/organization/tabs/campaigns/campaigns.jsx");
	
	var _campaigns2 = _interopRequireDefault(_campaigns);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _default = _campaigns2.default;
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/campaigns/campaigns.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _redux = __webpack_require__(12);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _campaign = __webpack_require__("./src/views/content/feed/organization/tabs/campaigns/campaign.jsx");
	
	var _campaign2 = _interopRequireDefault(_campaign);
	
	var _modal = __webpack_require__("./src/views/content/feed/organization/tabs/campaigns/modal.jsx");
	
	var _modal2 = _interopRequireDefault(_modal);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var styles = {
	  emptyContainer: { height: 300, fontSize: '1rem' },
	  emptyIcon: { color: 'rgba(0,0,0,0.1)', fontSize: '6em' },
	  emptyText: { color: 'rgba(0,0,0,0.5)', marginTop: '1em', textAlign: 'center' }
	};
	
	var Campaigns = function (_React$Component) {
	  (0, _inherits3.default)(Campaigns, _React$Component);
	
	  function Campaigns() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, Campaigns);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Campaigns.__proto__ || (0, _getPrototypeOf2.default)(Campaigns)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      selectedId: null,
	      isModalOpen: false
	    }, _this.handleClose = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleClose__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleCreate = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleCreate__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleEdit = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleEdit__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _this.handleRemove = function () {
	      var _this5;
	
	      return (_this5 = _this).__handleRemove__REACT_HOT_LOADER__.apply(_this5, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(Campaigns, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	          actions = _props.actions,
	          hasCampaigns = _props.hasCampaigns,
	          isLogged = _props.isLogged,
	          isFetching = _props.isFetching;
	
	
	      if (!hasCampaigns && isLogged && !isFetching) {
	        actions.read({ entity: 'campaigns' });
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(_ref2) {
	      var actions = _ref2.actions,
	          campaigns = _ref2.user.campaigns;
	
	      var oldCampaigns = this.props.user.campaigns;
	
	      if (campaigns !== oldCampaigns) {
	        var newLen = _lodash2.default.keys(campaigns).length;
	        var oldLen = _lodash2.default.keys(oldCampaigns).length;
	        var operation = newLen > oldLen && 'criada' || newLen < oldLen && 'removida' || 'editada';
	
	        this.handleClose();
	
	        actions.notify('Campanha ' + operation + ' com sucesso!');
	      }
	    }
	  }, {
	    key: '__handleClose__REACT_HOT_LOADER__',
	    value: function __handleClose__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: false });
	    }
	  }, {
	    key: '__handleCreate__REACT_HOT_LOADER__',
	    value: function __handleCreate__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: true, selectedId: null });
	    }
	  }, {
	    key: '__handleEdit__REACT_HOT_LOADER__',
	    value: function __handleEdit__REACT_HOT_LOADER__(selectedId) {
	      this.setState({ isOpen: true, selectedId: selectedId });
	    }
	  }, {
	    key: '__handleRemove__REACT_HOT_LOADER__',
	    value: function __handleRemove__REACT_HOT_LOADER__(uid) {
	      this.props.actions.remove({ entity: 'campaigns', uid: uid });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this6 = this;
	
	      var _state = this.state,
	          isOpen = _state.isOpen,
	          selectedId = _state.selectedId;
	      var _props2 = this.props,
	          isFetching = _props2.isFetching,
	          user = _props2.user;
	
	
	      return _react2.default.createElement(
	        _flexElement2.default,
	        { column: true },
	        _react2.default.createElement(
	          _flexElement2.default,
	          { justify: 'flex-end' },
	          _react2.default.createElement(_semanticUiReact.Button, {
	            compact: true,
	            primary: true,
	            icon: 'plus',
	            size: 'small',
	            content: 'Campanha',
	            onClick: this.handleCreate
	          })
	        ),
	        _react2.default.createElement(_modal2.default, { isOpen: isOpen, uid: selectedId, onClose: this.handleClose }),
	        _react2.default.createElement(_semanticUiReact.Divider, { style: { marginBottom: 0 } }),
	        isFetching && !_lodash2.default.isEmpty(user.campaigns) && _react2.default.createElement(
	          _flexElement2.default,
	          { column: true, align: 'center', justify: 'center', style: styles.emptyContainer },
	          _react2.default.createElement(
	            _semanticUiReact.Loader,
	            { active: true },
	            _react2.default.createElement(
	              'span',
	              { style: { color: 'rgba(0,0,0, 0.45)' } },
	              'Carregando campanhas...'
	            )
	          )
	        ),
	        !isFetching && _lodash2.default.isEmpty(user.campaigns) && _react2.default.createElement(
	          _flexElement2.default,
	          { column: true, align: 'center', justify: 'center', style: styles.emptyContainer },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'bullhorn', style: styles.emptyIcon }),
	          _react2.default.createElement(
	            'span',
	            { style: styles.emptyText },
	            'Clique no bot\xE3o acima para adicionar um campanha.'
	          )
	        ),
	        !isFetching && !_lodash2.default.isEmpty(user.campaigns) && _react2.default.createElement(
	          _semanticUiReact.Table,
	          { basic: 'very', style: { margin: 0 } },
	          _react2.default.createElement(
	            _semanticUiReact.Table.Body,
	            null,
	            _lodash2.default.map(user.campaigns, function (uid) {
	              return _react2.default.createElement(_campaign2.default, {
	                key: uid,
	                uid: uid,
	                onEdit: _this6.handleEdit,
	                onRemove: _this6.handleRemove
	              });
	            })
	          )
	        )
	      );
	    }
	  }]);
	  return Campaigns;
	}(_react2.default.Component);
	
	Campaigns.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  isFetching: _react2.default.PropTypes.bool,
	  isLogged: _react2.default.PropTypes.bool,
	  hasCampaigns: _react2.default.PropTypes.bool,
	  user: _react2.default.PropTypes.object
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    user: _selectors2.default.getUser(state),
	    isLogged: _selectors2.default.isAuthenticated(state),
	    isFetching: _selectors2.default.isFetching(state, 'campaigns'),
	    hasCampaigns: !_lodash2.default.isEmpty(_selectors2.default.getEntities(state, 'campaigns'))
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Campaigns);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(styles, 'styles', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaigns.jsx');
	
	  __REACT_HOT_LOADER__.register(Campaigns, 'Campaigns', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaigns.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaigns.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaigns.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaigns.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/campaigns/campaign.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var styles = {
	  edit: { marginRight: 10 },
	  remove: { marginTop: -1 },
	  loader: { marginLeft: 8, marginRight: 5, position: 'relative' }
	};
	
	var Campaign = function (_React$Component) {
	  (0, _inherits3.default)(Campaign, _React$Component);
	
	  function Campaign() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, Campaign);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Campaign.__proto__ || (0, _getPrototypeOf2.default)(Campaign)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isOpen: false
	    }, _this.handleClose = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleClose__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleOpen = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleOpen__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleRemove = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleRemove__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(Campaign, [{
	    key: '__handleClose__REACT_HOT_LOADER__',
	    value: function __handleClose__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: false });
	    }
	  }, {
	    key: '__handleOpen__REACT_HOT_LOADER__',
	    value: function __handleOpen__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: true });
	    }
	  }, {
	    key: '__handleRemove__REACT_HOT_LOADER__',
	    value: function __handleRemove__REACT_HOT_LOADER__() {
	      var _this5 = this;
	
	      this.setState({ isOpen: false }, function () {
	        _this5.props.onRemove(_this5.props.uid);
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var isOpen = this.state.isOpen;
	      var _props = this.props,
	          isRemoving = _props.isRemoving,
	          campaign = _props.campaign,
	          onEdit = _props.onEdit;
	
	      var trigger = isRemoving ? _react2.default.createElement(
	        'span',
	        { style: styles.loader },
	        _react2.default.createElement(_semanticUiReact.Loader, { active: true, size: 'mini' })
	      ) : _react2.default.createElement(_semanticUiReact.Icon, { link: true, name: 'trash outline', style: styles.remove, onClick: this.handleOpen });
	
	      return _react2.default.createElement(
	        _semanticUiReact.Table.Row,
	        null,
	        _react2.default.createElement(
	          _semanticUiReact.Table.Cell,
	          null,
	          _react2.default.createElement(
	            _semanticUiReact.Header,
	            { as: 'h4', image: true },
	            _react2.default.createElement(_semanticUiReact.Icon, { name: 'bullhorn' }),
	            _react2.default.createElement(
	              _semanticUiReact.Header.Content,
	              null,
	              campaign.name,
	              _react2.default.createElement(
	                _semanticUiReact.Header.Subheader,
	                null,
	                (campaign.details || '').length > 200 ? campaign.details.substr(0, 200) + '...' : campaign.details
	              )
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Table.Cell,
	          { collapsing: true },
	          _react2.default.createElement(_semanticUiReact.Icon, {
	            link: true,
	            name: 'edit',
	            style: styles.edit,
	            onClick: function onClick() {
	              return onEdit(campaign.uid);
	            }
	          }),
	          _react2.default.createElement(
	            _semanticUiReact.Modal,
	            {
	              size: 'small',
	              open: isOpen,
	              trigger: trigger,
	              closeOnEscape: false,
	              closeOnRootNodeClick: false
	            },
	            _react2.default.createElement(_semanticUiReact.Header, { size: 'mini', content: 'Remover Campanha' }),
	            _react2.default.createElement(
	              _semanticUiReact.Modal.Content,
	              null,
	              'Confirmar a remo\xE7\xE3o de ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                campaign.name
	              ),
	              '?'
	            ),
	            _react2.default.createElement(
	              _semanticUiReact.Modal.Actions,
	              null,
	              _react2.default.createElement(
	                _semanticUiReact.Button,
	                { onClick: this.handleClose },
	                _react2.default.createElement(_semanticUiReact.Icon, { name: 'remove' }),
	                ' N\xE3o'
	              ),
	              _react2.default.createElement(
	                _semanticUiReact.Button,
	                { color: 'red', onClick: this.handleRemove },
	                _react2.default.createElement(_semanticUiReact.Icon, { name: 'trash outline' }),
	                ' Sim'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);
	  return Campaign;
	}(_react2.default.Component);
	
	Campaign.propTypes = {
	  isRemoving: _react2.default.PropTypes.bool,
	  campaign: _react2.default.PropTypes.object,
	  uid: _react2.default.PropTypes.string,
	  onEdit: _react2.default.PropTypes.func,
	  onRemove: _react2.default.PropTypes.func
	};
	
	
	var mapStateToProps = function mapStateToProps(state, _ref2) {
	  var uid = _ref2.uid;
	  return {
	    campaign: _selectors2.default.getEntities(state, 'campaigns', uid),
	    isRemoving: _selectors2.default.isRemoving(state, 'campaigns', uid)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(Campaign);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(styles, 'styles', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaign.jsx');
	
	  __REACT_HOT_LOADER__.register(Campaign, 'Campaign', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaign.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaign.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/campaign.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/campaigns/modal.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _redux = __webpack_require__(12);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var initialState = {
	  formData: {
	    name: '',
	    details: ''
	  }
	};
	
	var ModalCampaign = function (_React$Component) {
	  (0, _inherits3.default)(ModalCampaign, _React$Component);
	
	  function ModalCampaign() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, ModalCampaign);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ModalCampaign.__proto__ || (0, _getPrototypeOf2.default)(ModalCampaign)).call.apply(_ref, [this].concat(args))), _this), _this.state = initialState, _this.handleClose = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleClose__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleOpen = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleOpen__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleChange = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleChange__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _this.handleSubmit = function () {
	      var _this5;
	
	      return (_this5 = _this).__handleSubmit__REACT_HOT_LOADER__.apply(_this5, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(ModalCampaign, [{
	    key: '__handleClose__REACT_HOT_LOADER__',
	    value: function __handleClose__REACT_HOT_LOADER__() {
	      this.props.onClose();
	    }
	  }, {
	    key: '__handleOpen__REACT_HOT_LOADER__',
	    value: function __handleOpen__REACT_HOT_LOADER__() {
	      var campaign = this.props.campaign;
	
	
	      this.setState({
	        formData: {
	          name: campaign.name || '',
	          details: campaign.details || ''
	        }
	      });
	    }
	  }, {
	    key: '__handleChange__REACT_HOT_LOADER__',
	    value: function __handleChange__REACT_HOT_LOADER__(e) {
	      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	      var formData = _lodash2.default.merge({}, this.state.formData);
	      var name = data.name || e.currentTarget.name;
	      var value = data.value || e.currentTarget.value;
	
	      formData[name] = value;
	
	      this.setState({ formData: formData });
	    }
	  }, {
	    key: '__handleSubmit__REACT_HOT_LOADER__',
	    value: function __handleSubmit__REACT_HOT_LOADER__(evt) {
	      var formData = this.state.formData;
	      var _props = this.props,
	          actions = _props.actions,
	          campaign = _props.campaign;
	
	
	      evt.preventDefault();
	
	      if (this.isValid(formData)) {
	        actions.addToOrg({
	          entity: 'campaigns',
	          data: _lodash2.default.assign({}, campaign, formData)
	        });
	      }
	    }
	  }, {
	    key: 'isValid',
	    value: function isValid(data) {
	      var isValid = !['name', 'details'].map(function (attr) {
	        return data[attr];
	      }).some(function (val) {
	        return _lodash2.default.isEmpty(val);
	      });
	
	      if (!isValid) {
	        this.props.actions.notifyError('É necessário preencher os campos obrigatórios');
	      }
	
	      return isValid;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          isOpen = _props2.isOpen,
	          isSaving = _props2.isSaving,
	          campaign = _props2.campaign;
	      var formData = this.state.formData;
	
	
	      return _react2.default.createElement(
	        _semanticUiReact.Modal,
	        {
	          open: isOpen,
	          closeOnEscape: false,
	          closeOnRootNodeClick: false,
	          onMount: this.handleOpen,
	          onClose: this.handleClose
	        },
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Header,
	          null,
	          campaign.uid ? 'Editar Campanha' : 'Nova Campanha'
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Content,
	          { as: _semanticUiReact.Form, onSubmit: this.handleSubmit },
	          _react2.default.createElement(_semanticUiReact.Form.Input, {
	            required: true,
	            name: 'name',
	            label: 'Nome',
	            placeholder: 'Nome que ser\xE1 exibido nos resultados da pesquisa',
	            disabled: isSaving,
	            value: formData.name,
	            onChange: this.handleChange
	          }),
	          _react2.default.createElement(_semanticUiReact.Form.TextArea, {
	            required: true,
	            rows: '6',
	            name: 'details',
	            label: 'Detalhes',
	            placeholder: 'Do que se trata esta campanha?',
	            disabled: isSaving,
	            value: formData.details,
	            onChange: this.handleChange
	          })
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Actions,
	          { as: _flexElement2.default, justify: 'flex-end' },
	          _react2.default.createElement(_semanticUiReact.Button, {
	            content: 'Fechar',
	            disabled: isSaving,
	            onClick: this.handleClose
	          }),
	          _react2.default.createElement(_semanticUiReact.Button, {
	            primary: true,
	            icon: 'save',
	            content: 'Salvar',
	            loading: isSaving,
	            disabled: isSaving,
	            onClick: this.handleSubmit
	          })
	        )
	      );
	    }
	  }]);
	  return ModalCampaign;
	}(_react2.default.Component);
	
	ModalCampaign.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  campaign: _react2.default.PropTypes.object,
	  isOpen: _react2.default.PropTypes.bool,
	  isSaving: _react2.default.PropTypes.bool,
	  onClose: _react2.default.PropTypes.func
	};
	ModalCampaign.defaultProps = {
	  campaign: {}
	};
	
	
	var mapStateToProps = function mapStateToProps(state, _ref2) {
	  var uid = _ref2.uid;
	  return {
	    user: _selectors2.default.getUser(state),
	    campaign: _selectors2.default.getEntities(state, 'campaigns', uid),
	    isSaving: _selectors2.default.isFetching(state, 'campaigns') || _selectors2.default.isFetching(state, 'users')
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ModalCampaign);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(initialState, 'initialState', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(ModalCampaign, 'ModalCampaign', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/campaigns/modal.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/services/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _services = __webpack_require__("./src/views/content/feed/organization/tabs/services/services.jsx");
	
	var _services2 = _interopRequireDefault(_services);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var _default = _services2.default;
	exports.default = _default;
	;

	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }

	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/services/services.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _redux = __webpack_require__(12);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _service = __webpack_require__("./src/views/content/feed/organization/tabs/services/service.jsx");
	
	var _service2 = _interopRequireDefault(_service);
	
	var _modal = __webpack_require__("./src/views/content/feed/organization/tabs/services/modal.jsx");
	
	var _modal2 = _interopRequireDefault(_modal);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var styles = {
	  emptyContainer: { height: 300, fontSize: '1rem' },
	  emptyIcon: { color: 'rgba(0,0,0,0.1)', fontSize: '6em' },
	  emptyText: { color: 'rgba(0,0,0,0.5)', marginTop: '1em', textAlign: 'center' }
	};
	
	var Services = function (_React$Component) {
	  (0, _inherits3.default)(Services, _React$Component);
	
	  function Services() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, Services);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Services.__proto__ || (0, _getPrototypeOf2.default)(Services)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      selectedId: null,
	      isModalOpen: false
	    }, _this.handleClose = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleClose__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleCreate = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleCreate__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleEdit = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleEdit__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _this.handleRemove = function () {
	      var _this5;
	
	      return (_this5 = _this).__handleRemove__REACT_HOT_LOADER__.apply(_this5, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(Services, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	          actions = _props.actions,
	          hasServices = _props.hasServices,
	          isLogged = _props.isLogged,
	          isFetching = _props.isFetching;
	
	
	      if (!hasServices && isLogged && !isFetching) {
	        actions.read({ entity: 'services' });
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(_ref2) {
	      var actions = _ref2.actions,
	          services = _ref2.user.services;
	
	      var oldServices = this.props.user.services;
	
	      if (services !== oldServices) {
	        var newLen = _lodash2.default.keys(services).length;
	        var oldLen = _lodash2.default.keys(oldServices).length;
	        var operation = newLen > oldLen && 'criado' || newLen < oldLen && 'removido' || 'editado';
	
	        this.handleClose();
	
	        actions.notify('Servi\xE7o ' + operation + ' com sucesso!');
	      }
	    }
	  }, {
	    key: '__handleClose__REACT_HOT_LOADER__',
	    value: function __handleClose__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: false });
	    }
	  }, {
	    key: '__handleCreate__REACT_HOT_LOADER__',
	    value: function __handleCreate__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: true, selectedId: null });
	    }
	  }, {
	    key: '__handleEdit__REACT_HOT_LOADER__',
	    value: function __handleEdit__REACT_HOT_LOADER__(selectedId) {
	      this.setState({ isOpen: true, selectedId: selectedId });
	    }
	  }, {
	    key: '__handleRemove__REACT_HOT_LOADER__',
	    value: function __handleRemove__REACT_HOT_LOADER__(uid) {
	      this.props.actions.remove({ entity: 'services', uid: uid });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this6 = this;
	
	      var _state = this.state,
	          isOpen = _state.isOpen,
	          selectedId = _state.selectedId;
	      var _props2 = this.props,
	          isFetching = _props2.isFetching,
	          user = _props2.user;
	
	
	      return _react2.default.createElement(
	        _flexElement2.default,
	        { column: true },
	        _react2.default.createElement(
	          _flexElement2.default,
	          { justify: 'flex-end' },
	          _react2.default.createElement(_semanticUiReact.Button, {
	            compact: true,
	            primary: true,
	            icon: 'plus',
	            size: 'small',
	            content: 'Servi\xE7o',
	            onClick: this.handleCreate
	          })
	        ),
	        _react2.default.createElement(_modal2.default, { isOpen: isOpen, uid: selectedId, onClose: this.handleClose }),
	        _react2.default.createElement(_semanticUiReact.Divider, { style: { marginBottom: 0 } }),
	        isFetching && !_lodash2.default.isEmpty(user.services) && _react2.default.createElement(
	          _flexElement2.default,
	          { column: true, align: 'center', justify: 'center', style: styles.emptyContainer },
	          _react2.default.createElement(
	            _semanticUiReact.Loader,
	            { active: true },
	            _react2.default.createElement(
	              'span',
	              { style: { color: 'rgba(0,0,0, 0.45)' } },
	              'Carregando servi\xE7os...'
	            )
	          )
	        ),
	        !isFetching && _lodash2.default.isEmpty(user.services) && _react2.default.createElement(
	          _flexElement2.default,
	          { column: true, align: 'center', justify: 'center', style: styles.emptyContainer },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'wrench', style: styles.emptyIcon }),
	          _react2.default.createElement(
	            'span',
	            { style: styles.emptyText },
	            'Clique no bot\xE3o acima para adicionar um servi\xE7o.'
	          )
	        ),
	        !isFetching && !_lodash2.default.isEmpty(user.services) && _react2.default.createElement(
	          _semanticUiReact.Table,
	          { basic: 'very', style: { margin: 0 } },
	          _react2.default.createElement(
	            _semanticUiReact.Table.Body,
	            null,
	            _lodash2.default.map(user.services, function (uid) {
	              return _react2.default.createElement(_service2.default, {
	                key: uid,
	                uid: uid,
	                onEdit: _this6.handleEdit,
	                onRemove: _this6.handleRemove
	              });
	            })
	          )
	        )
	      );
	    }
	  }]);
	  return Services;
	}(_react2.default.Component);
	
	Services.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  isFetching: _react2.default.PropTypes.bool,
	  isLogged: _react2.default.PropTypes.bool,
	  hasServices: _react2.default.PropTypes.bool,
	  user: _react2.default.PropTypes.object
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    user: _selectors2.default.getUser(state),
	    isLogged: _selectors2.default.isAuthenticated(state),
	    isFetching: _selectors2.default.isFetching(state, 'services'),
	    hasServices: !_lodash2.default.isEmpty(_selectors2.default.getEntities(state, 'services'))
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Services);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(styles, 'styles', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/services.jsx');
	
	  __REACT_HOT_LOADER__.register(Services, 'Services', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/services.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/services.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/services.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/services.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/services/service.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var styles = {
	  edit: { marginRight: 10 },
	  remove: { marginTop: -1 },
	  loader: { marginLeft: 8, marginRight: 5, position: 'relative' }
	};
	
	var Service = function (_React$Component) {
	  (0, _inherits3.default)(Service, _React$Component);
	
	  function Service() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, Service);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Service.__proto__ || (0, _getPrototypeOf2.default)(Service)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isOpen: false
	    }, _this.handleClose = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleClose__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleOpen = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleOpen__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleRemove = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleRemove__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(Service, [{
	    key: '__handleClose__REACT_HOT_LOADER__',
	    value: function __handleClose__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: false });
	    }
	  }, {
	    key: '__handleOpen__REACT_HOT_LOADER__',
	    value: function __handleOpen__REACT_HOT_LOADER__() {
	      this.setState({ isOpen: true });
	    }
	  }, {
	    key: '__handleRemove__REACT_HOT_LOADER__',
	    value: function __handleRemove__REACT_HOT_LOADER__() {
	      var _this5 = this;
	
	      this.setState({ isOpen: false }, function () {
	        _this5.props.onRemove(_this5.props.uid);
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var isOpen = this.state.isOpen;
	      var _props = this.props,
	          isRemoving = _props.isRemoving,
	          service = _props.service,
	          onEdit = _props.onEdit;
	
	      var trigger = isRemoving ? _react2.default.createElement(
	        'span',
	        { style: styles.loader },
	        _react2.default.createElement(_semanticUiReact.Loader, { active: true, size: 'mini' })
	      ) : _react2.default.createElement(_semanticUiReact.Icon, { link: true, name: 'trash outline', style: styles.remove, onClick: this.handleOpen });
	
	      return _react2.default.createElement(
	        _semanticUiReact.Table.Row,
	        null,
	        _react2.default.createElement(
	          _semanticUiReact.Table.Cell,
	          null,
	          _react2.default.createElement(
	            _semanticUiReact.Header,
	            { as: 'h4', image: true },
	            _react2.default.createElement(_semanticUiReact.Icon, { name: 'wrench' }),
	            _react2.default.createElement(
	              _semanticUiReact.Header.Content,
	              null,
	              service.name,
	              _react2.default.createElement(
	                _semanticUiReact.Header.Subheader,
	                null,
	                (service.details || '').length > 200 ? service.details.substr(0, 200) + '...' : service.details
	              )
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Table.Cell,
	          { collapsing: true },
	          _react2.default.createElement(_semanticUiReact.Icon, {
	            link: true,
	            name: 'edit',
	            style: styles.edit,
	            onClick: function onClick() {
	              return onEdit(service.uid);
	            }
	          }),
	          _react2.default.createElement(
	            _semanticUiReact.Modal,
	            {
	              size: 'small',
	              open: isOpen,
	              trigger: trigger,
	              closeOnEscape: false,
	              closeOnRootNodeClick: false
	            },
	            _react2.default.createElement(_semanticUiReact.Header, { size: 'mini', content: 'Remover Servi\xE7o' }),
	            _react2.default.createElement(
	              _semanticUiReact.Modal.Content,
	              null,
	              'Confirmar a remo\xE7\xE3o de ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                service.name
	              ),
	              '?'
	            ),
	            _react2.default.createElement(
	              _semanticUiReact.Modal.Actions,
	              null,
	              _react2.default.createElement(
	                _semanticUiReact.Button,
	                { onClick: this.handleClose },
	                _react2.default.createElement(_semanticUiReact.Icon, { name: 'remove' }),
	                ' N\xE3o'
	              ),
	              _react2.default.createElement(
	                _semanticUiReact.Button,
	                { color: 'red', onClick: this.handleRemove },
	                _react2.default.createElement(_semanticUiReact.Icon, { name: 'trash outline' }),
	                ' Sim'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);
	  return Service;
	}(_react2.default.Component);
	
	Service.propTypes = {
	  isRemoving: _react2.default.PropTypes.bool,
	  service: _react2.default.PropTypes.object,
	  uid: _react2.default.PropTypes.string,
	  onEdit: _react2.default.PropTypes.func,
	  onRemove: _react2.default.PropTypes.func
	};
	
	
	var mapStateToProps = function mapStateToProps(state, _ref2) {
	  var uid = _ref2.uid;
	  return {
	    service: _selectors2.default.getEntities(state, 'services', uid),
	    isRemoving: _selectors2.default.isRemoving(state, 'services', uid)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(Service);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(styles, 'styles', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/service.jsx');
	
	  __REACT_HOT_LOADER__.register(Service, 'Service', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/service.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/service.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/service.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/organization/tabs/services/modal.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _redux = __webpack_require__(12);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _genUid = __webpack_require__("./src/helpers/gen-uid.js");
	
	var _genUid2 = _interopRequireDefault(_genUid);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var initialState = {
	  isCreatingSkill: false,
	  skills: {},
	  options: [],
	  formData: {
	    name: '',
	    details: '',
	    qtyAvailable: '',
	    skills: []
	  }
	};
	
	var ModalService = function (_React$Component) {
	  (0, _inherits3.default)(ModalService, _React$Component);
	
	  function ModalService() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, ModalService);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ModalService.__proto__ || (0, _getPrototypeOf2.default)(ModalService)).call.apply(_ref, [this].concat(args))), _this), _this.state = initialState, _this.handleClose = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleClose__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleOpen = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleOpen__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleChange = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleChange__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _this.handleSubmit = function () {
	      var _this5;
	
	      return (_this5 = _this).__handleSubmit__REACT_HOT_LOADER__.apply(_this5, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(ModalService, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(_ref2) {
	      var skills = _ref2.skills;
	
	      if (skills !== this.props.skills) {
	        this.setState({ isCreatingSkill: false });
	      }
	    }
	  }, {
	    key: '__handleClose__REACT_HOT_LOADER__',
	    value: function __handleClose__REACT_HOT_LOADER__() {
	      this.props.onClose();
	    }
	  }, {
	    key: '__handleOpen__REACT_HOT_LOADER__',
	    value: function __handleOpen__REACT_HOT_LOADER__() {
	      var _props = this.props,
	          skills = _props.skills,
	          service = _props.service;
	
	
	      this.setState({
	        isCreatingSkill: false,
	        skills: _lodash2.default.merge({}, skills),
	        options: _lodash2.default.values(skills).map(function (_ref3) {
	          var uid = _ref3.uid,
	              name = _ref3.name;
	          return {
	            text: name,
	            value: uid
	          };
	        }),
	        formData: {
	          name: service.name || '',
	          details: service.details || '',
	          qtyAvailable: service.qtyAvailable || '',
	          skills: service.skills || []
	        }
	      });
	    }
	  }, {
	    key: '__handleChange__REACT_HOT_LOADER__',
	    value: function __handleChange__REACT_HOT_LOADER__(e) {
	      var _this6 = this;
	
	      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var _state = this.state,
	          skills = _state.skills,
	          options = _state.options;
	
	      var formData = _lodash2.default.merge({}, this.state.formData);
	      var name = data.name || e.currentTarget.name;
	      var value = data.value || e.currentTarget.value;
	
	      if (name === 'skills') {
	        (function () {
	          var newValue = {};
	          var newSkill = _lodash2.default.remove(value, function (attr) {
	            return !skills[attr];
	          })[0];
	
	          if (newSkill) {
	            (function () {
	              var uid = (0, _genUid2.default)('skills');
	
	              skills[uid] = { uid: uid, name: newSkill };
	
	              options.push({ text: newSkill, value: uid });
	
	              _this6.setState({ options: options, skills: skills }, function () {
	                _this6.props.actions.save('skills', skills[uid]);
	              });
	
	              newValue[uid] = uid;
	            })();
	          }
	
	          value.forEach(function (uid) {
	            return newValue[uid] = uid;
	          });
	
	          formData[name] = newValue;
	        })();
	      } else {
	        formData[name] = value;
	      }
	
	      this.setState({ formData: formData });
	    }
	  }, {
	    key: '__handleSubmit__REACT_HOT_LOADER__',
	    value: function __handleSubmit__REACT_HOT_LOADER__(evt) {
	      var formData = this.state.formData;
	      var _props2 = this.props,
	          actions = _props2.actions,
	          service = _props2.service;
	
	
	      evt.preventDefault();
	
	      if (this.isValid(formData)) {
	        actions.addToOrg({
	          entity: 'services',
	          data: _lodash2.default.assign({}, service, formData)
	        });
	      }
	    }
	  }, {
	    key: 'isValid',
	    value: function isValid(data) {
	      var isValid = !['name', 'qtyAvailable', 'details', 'skills'].map(function (attr) {
	        return data[attr];
	      }).some(function (val) {
	        return _lodash2.default.isEmpty(val);
	      });
	
	      if (!isValid) {
	        this.props.actions.notifyError('É necessário preencher os campos obrigatórios');
	      }
	
	      return isValid;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          isOpen = _props3.isOpen,
	          isSaving = _props3.isSaving,
	          service = _props3.service;
	      var _state2 = this.state,
	          formData = _state2.formData,
	          options = _state2.options,
	          isCreatingSkill = _state2.isCreatingSkill;
	
	
	      return _react2.default.createElement(
	        _semanticUiReact.Modal,
	        {
	          open: isOpen,
	          closeOnEscape: false,
	          closeOnRootNodeClick: false,
	          onMount: this.handleOpen,
	          onClose: this.handleClose
	        },
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Header,
	          null,
	          service.uid ? 'Editar Serviço' : 'Novo Serviço'
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Content,
	          { as: _semanticUiReact.Form, onSubmit: this.handleSubmit },
	          _react2.default.createElement(
	            _semanticUiReact.Form.Group,
	            { widths: 'equal' },
	            _react2.default.createElement(_semanticUiReact.Form.Input, {
	              required: true,
	              name: 'name',
	              label: 'Nome',
	              placeholder: 'Nome que ser\xE1 exibido nos resultados da pesquisa',
	              disabled: isSaving,
	              value: formData.name,
	              onChange: this.handleChange
	            }),
	            _react2.default.createElement(_semanticUiReact.Form.Input, {
	              required: true,
	              name: 'qtyAvailable',
	              label: 'Vagas dispon\xEDveis',
	              placeholder: 'N\xFAmero de vagas dispon\xEDveis',
	              disabled: isSaving,
	              value: formData.qtyAvailable,
	              onChange: this.handleChange
	            })
	          ),
	          _react2.default.createElement(_semanticUiReact.Form.Select, {
	            fluid: true,
	            search: true,
	            required: true,
	            multiple: true,
	            selection: true,
	            allowAdditions: true,
	            name: 'skills',
	            label: 'Habilidades',
	            additionLabel: 'Adicionar: ',
	            placeholder: 'Digite as habilidades necess\xE1rias para este servi\xE7o',
	            noResultsMessage: 'Nenhum resultado encontrado',
	            options: options,
	            disabled: isSaving,
	            loading: isCreatingSkill,
	            value: _lodash2.default.keys(formData.skills),
	            onChange: this.handleChange
	          }),
	          _react2.default.createElement(_semanticUiReact.Form.TextArea, {
	            required: true,
	            rows: '6',
	            name: 'details',
	            label: 'Detalhes',
	            placeholder: 'Do que se trata este servi\xE7o?',
	            disabled: isSaving,
	            value: formData.details,
	            onChange: this.handleChange
	          })
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Actions,
	          { as: _flexElement2.default, justify: 'flex-end' },
	          _react2.default.createElement(_semanticUiReact.Button, {
	            content: 'Fechar',
	            disabled: isSaving,
	            onClick: this.handleClose
	          }),
	          _react2.default.createElement(_semanticUiReact.Button, {
	            primary: true,
	            icon: 'save',
	            content: 'Salvar',
	            loading: isSaving,
	            disabled: isSaving,
	            onClick: this.handleSubmit
	          })
	        )
	      );
	    }
	  }]);
	  return ModalService;
	}(_react2.default.Component);
	
	ModalService.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  service: _react2.default.PropTypes.object,
	  isOpen: _react2.default.PropTypes.bool,
	  isSaving: _react2.default.PropTypes.bool,
	  skills: _react2.default.PropTypes.object,
	  onClose: _react2.default.PropTypes.func
	};
	ModalService.defaultProps = {
	  service: {}
	};
	
	
	var mapStateToProps = function mapStateToProps(state, _ref4) {
	  var uid = _ref4.uid;
	  return {
	    user: _selectors2.default.getUser(state),
	    skills: _selectors2.default.getEntities(state, 'skills'),
	    service: _selectors2.default.getEntities(state, 'services', uid),
	    isSaving: _selectors2.default.isFetching(state, 'services') || _selectors2.default.isFetching(state, 'users')
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ModalService);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(initialState, 'initialState', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(ModalService, 'ModalService', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/modal.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/organization/tabs/services/modal.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/volunteer/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _threeColumns = __webpack_require__("./src/views/components/three-columns.jsx");
	
	var _threeColumns2 = _interopRequireDefault(_threeColumns);
	
	var _panel = __webpack_require__("./src/views/content/feed/volunteer/panel.jsx");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	var _details = __webpack_require__("./src/views/content/feed/volunteer/details.jsx");
	
	var _details2 = _interopRequireDefault(_details);
	
	var _related = __webpack_require__("./src/views/content/feed/volunteer/related.jsx");
	
	var _related2 = _interopRequireDefault(_related);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Usuario = function Usuario(props) {
	  return _react2.default.createElement(_threeColumns2.default, {
	    panel: _react2.default.createElement(_panel2.default, props),
	    content: _react2.default.createElement(_details2.default, props),
	    related: _react2.default.createElement(_related2.default, props)
	  });
	};
	
	var _default = Usuario;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Usuario, 'Usuario', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/volunteer/panel.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var style = {
	  fontSize: '1rem',
	  marginRight: '0.8em',
	  width: '16em'
	};
	
	var Panel = function Panel(_ref) {
	  var skills = _ref.skills,
	      user = _ref.user;
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, style: style },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      _react2.default.createElement(
	        _semanticUiReact.Header,
	        { as: 'h5', style: { fontSize: '0.95em' } },
	        'MINHAS HABILIDADES'
	      ),
	      _lodash2.default.keys(user.skills, function (key) {
	        return _react2.default.createElement(
	          _semanticUiReact.Label,
	          { key: key },
	          skills[key].name
	        );
	      }),
	      _react2.default.createElement(
	        _semanticUiReact.Header,
	        { as: 'h5', style: { fontSize: '0.95em' } },
	        'PROPOSTAS DE SERVI\xC7OS'
	      ),
	      _react2.default.createElement(
	        _semanticUiReact.Header,
	        { as: 'h5', style: { fontSize: '0.95em' } },
	        'SERVI\xC7OS REALIZADOS'
	      )
	    )
	  );
	};
	
	Panel.propTypes = {
	  skills: _react2.default.PropTypes.object,
	  user: _react2.default.PropTypes.object
	};
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    user: _selectors2.default.getUser(state),
	    skills: _selectors2.default.getEntities(state, 'skills')
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(Panel);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(style, 'style', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(Panel, 'Panel', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/panel.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/feed/volunteer/details.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _faker = __webpack_require__(67);
	
	var _faker2 = _interopRequireDefault(_faker);
	
	var _redux = __webpack_require__(12);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var srcImg = 'http://xpenology.org/wp-content/themes/qaengine/img/default-thumbnail.jpg';
	
	var style = {
	  fontSize: '1rem'
	};
	
	var Details = function Details() {
	  return _react2.default.createElement(
	    _semanticUiReact.Container,
	    { fluid: true, style: style },
	    _react2.default.createElement(
	      _semanticUiReact.Card,
	      { fluid: true },
	      _react2.default.createElement(
	        _semanticUiReact.Card.Content,
	        null,
	        _react2.default.createElement(_semanticUiReact.Image, { floated: 'left', size: 'small', src: srcImg }),
	        _react2.default.createElement(
	          _semanticUiReact.Card.Header,
	          { style: { fontSize: '1em', marginBottom: '0.3em' } },
	          'NOME DA CAMPANHA'
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Card.Meta,
	          null,
	          _faker2.default.lorem.paragraph(4)
	        )
	      )
	    ),
	    _react2.default.createElement(
	      _semanticUiReact.Card,
	      { fluid: true },
	      _react2.default.createElement(
	        _semanticUiReact.Card.Content,
	        null,
	        _react2.default.createElement(
	          _semanticUiReact.Card.Header,
	          { style: { fontSize: '1em' } },
	          'FEED DE NOT\xCDCIAS'
	        )
	      ),
	      _react2.default.createElement(
	        _semanticUiReact.Card.Content,
	        null,
	        _react2.default.createElement(
	          _semanticUiReact.Feed,
	          null,
	          _react2.default.createElement(
	            _semanticUiReact.Feed.Event,
	            null,
	            _react2.default.createElement(_semanticUiReact.Feed.Label, { image: 'http://semantic-ui.com/images/avatar/small/jenny.jpg' }),
	            _react2.default.createElement(
	              _semanticUiReact.Feed.Content,
	              null,
	              _react2.default.createElement(_semanticUiReact.Feed.Date, { content: '1 day ago' }),
	              _react2.default.createElement(
	                _semanticUiReact.Feed.Summary,
	                null,
	                'You added ',
	                _react2.default.createElement(
	                  'a',
	                  null,
	                  'Jenny Hess'
	                ),
	                ' to your ',
	                _react2.default.createElement(
	                  'a',
	                  null,
	                  'coworker'
	                ),
	                ' group.'
	              )
	            )
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Feed.Event,
	            null,
	            _react2.default.createElement(_semanticUiReact.Feed.Label, { image: 'http://semantic-ui.com/images/avatar2/small/molly.png' }),
	            _react2.default.createElement(
	              _semanticUiReact.Feed.Content,
	              null,
	              _react2.default.createElement(_semanticUiReact.Feed.Date, { content: '3 days ago' }),
	              _react2.default.createElement(
	                _semanticUiReact.Feed.Summary,
	                null,
	                'You added ',
	                _react2.default.createElement(
	                  'a',
	                  null,
	                  'Molly Malone'
	                ),
	                ' as a friend.'
	              )
	            )
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Feed.Event,
	            null,
	            _react2.default.createElement(_semanticUiReact.Feed.Label, { image: 'http://semantic-ui.com/images/avatar/small/elliot.jpg' }),
	            _react2.default.createElement(
	              _semanticUiReact.Feed.Content,
	              null,
	              _react2.default.createElement(_semanticUiReact.Feed.Date, { content: '4 days ago' }),
	              _react2.default.createElement(
	                _semanticUiReact.Feed.Summary,
	                null,
	                'You added ',
	                _react2.default.createElement(
	                  'a',
	                  null,
	                  'Elliot Baker'
	                ),
	                ' to your ',
	                _react2.default.createElement(
	                  'a',
	                  null,
	                  'musicians'
	                ),
	                ' group.'
	              )
	            )
	          )
	        )
	      )
	    )
	  );
	};
	
	var mapStateToProps = function mapStateToProps(state, _ref) {
	  var id = _ref.params.id;
	  return {
	    user: _selectors2.default.getEntities(state, 'users', id),
	    skills: _selectors2.default.getEntities(state, 'skills')
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Details);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(srcImg, 'srcImg', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/details.jsx');
	
	  __REACT_HOT_LOADER__.register(style, 'style', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/details.jsx');
	
	  __REACT_HOT_LOADER__.register(Details, 'Details', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/details.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/details.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/details.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/details.jsx');
	}();

	;

/***/ },

/***/ 67:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(2);

/***/ },

/***/ "./src/views/content/feed/volunteer/related.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Related = function Related() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, style: { marginLeft: '0.8em', width: '16em' } },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      _react2.default.createElement(
	        _semanticUiReact.Header,
	        { as: 'h5', style: { fontSize: '0.95em' } },
	        'SERVI\xC7OS DE INTERESSE'
	      )
	    )
	  );
	};
	
	Related.propTypes = {
	  skills: _react2.default.PropTypes.object,
	  user: _react2.default.PropTypes.object
	};
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    user: _selectors2.default.getUser(state),
	    skills: _selectors2.default.getEntities(state, 'skills')
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(Related);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Related, 'Related', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/related.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/related.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/feed/volunteer/related.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/buscar/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _threeColumns = __webpack_require__("./src/views/components/three-columns.jsx");
	
	var _threeColumns2 = _interopRequireDefault(_threeColumns);
	
	var _filters = __webpack_require__("./src/views/content/buscar/filters.jsx");
	
	var _filters2 = _interopRequireDefault(_filters);
	
	var _results = __webpack_require__("./src/views/content/buscar/results.jsx");
	
	var _results2 = _interopRequireDefault(_results);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Buscar = function Buscar(props) {
	  return _react2.default.createElement(_threeColumns2.default, {
	    panel: _react2.default.createElement(_filters2.default, props),
	    content: _react2.default.createElement(_results2.default, props)
	  });
	};
	
	var _default = Buscar;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Buscar, 'Buscar', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/buscar/filters.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _classnames = __webpack_require__(65);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _latinize = __webpack_require__(51);
	
	var _latinize2 = _interopRequireDefault(_latinize);
	
	var _lodash = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(57);
	
	var _redux = __webpack_require__(12);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _constants = __webpack_require__("./src/constants.js");
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _filters = __webpack_require__("./src/views/content/buscar/filters.scss");
	
	var _filters2 = _interopRequireDefault(_filters);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Filters = function (_React$Component) {
	  (0, _inherits3.default)(Filters, _React$Component);
	
	  function Filters() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, Filters);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Filters.__proto__ || (0, _getPrototypeOf2.default)(Filters)).call.apply(_ref, [this].concat(args))), _this), _this.handleClear = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleClear__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleSearch = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleSearch__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleFilterClick = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleFilterClick__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(Filters, [{
	    key: '__handleClear__REACT_HOT_LOADER__',
	    value: function __handleClear__REACT_HOT_LOADER__() {
	      this.dropdown.setValue('');
	      this.props.actions.updateFilter({ skills: null });
	    }
	  }, {
	    key: '__handleSearch__REACT_HOT_LOADER__',
	    value: function __handleSearch__REACT_HOT_LOADER__() {
	      var skills = this.dropdown.state.value;
	
	      this.props.actions.updateFilter({ skills: skills });
	
	      this.applySearch(this.props.appliedFilter.filter);
	    }
	  }, {
	    key: '__handleFilterClick__REACT_HOT_LOADER__',
	    value: function __handleFilterClick__REACT_HOT_LOADER__(value) {
	      var transitionTo = this.context.router.transitionTo;
	      var actions = this.props.actions;
	
	      var _find = (0, _lodash.find)(_constants.Filter.OPTIONS, { value: value }),
	          text = _find.text;
	
	      var slug = (0, _latinize2.default)(text).toLowerCase();
	
	      transitionTo({
	        pathname: '/buscar',
	        query: value === 'all' ? null : { filtro: slug }
	      });
	
	      actions.updateFilter({ filter: value });
	      this.applySearch(value);
	    }
	  }, {
	    key: 'applySearch',
	    value: function applySearch(entity) {
	      this.props.actions.read({ entity: entity });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this5 = this;
	
	      var _props = this.props,
	          isFiltering = _props.isFiltering,
	          appliedFilter = _props.appliedFilter,
	          skills = _props.skills;
	
	
	      return _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, className: _filters2.default.wrapper },
	        _react2.default.createElement(
	          _semanticUiReact.Segment,
	          null,
	          _react2.default.createElement(
	            _flexElement2.default,
	            { column: true, className: _filters2.default.menu },
	            _constants.Filter.OPTIONS.map(function (option) {
	              return _react2.default.createElement(
	                _flexElement2.default,
	                {
	                  align: 'center',
	                  key: option.value,
	                  className: (0, _classnames2.default)(_filters2.default.menuItem, (0, _defineProperty3.default)({}, _filters2.default.selected, option.value === appliedFilter.filter)),
	                  onClick: function onClick() {
	                    return _this5.handleFilterClick(option.value);
	                  }
	                },
	                _react2.default.createElement(_semanticUiReact.Icon, { name: option.icon }),
	                _react2.default.createElement(
	                  'span',
	                  { style: { marginLeft: '0.5em' } },
	                  option.text
	                )
	              );
	            })
	          ),
	          _react2.default.createElement(_semanticUiReact.Divider, null),
	          _react2.default.createElement(
	            _flexElement2.default,
	            { column: true },
	            _react2.default.createElement(
	              _semanticUiReact.Header,
	              { as: 'h5' },
	              'Filtrar por:'
	            ),
	            _react2.default.createElement(
	              _semanticUiReact.Form,
	              { className: _filters2.default.searchForm, onSubmit: this.handleSearch },
	              _react2.default.createElement(_semanticUiReact.Dropdown, {
	                fluid: true,
	                search: true,
	                multiple: true,
	                selection: true,
	                disabled: isFiltering,
	                ref: function ref(el) {
	                  return _this5.dropdown = el;
	                },
	                noResultsMessage: 'Nenhum registro encontrado',
	                options: (0, _lodash.values)(skills).map(function (_ref2) {
	                  var name = _ref2.name,
	                      uid = _ref2.uid;
	                  return { text: name, value: uid };
	                }),
	                placeholder: 'Habilidades...'
	              })
	            ),
	            _react2.default.createElement(
	              _flexElement2.default,
	              { justify: 'space-between', style: { marginTop: '1em' } },
	              _react2.default.createElement(
	                _semanticUiReact.Button,
	                {
	                  primary: true,
	                  size: 'small',
	                  type: 'submit',
	                  disabled: isFiltering,
	                  onClick: this.handleSearch
	                },
	                'Buscar'
	              ),
	              _react2.default.createElement(
	                _semanticUiReact.Button,
	                { size: 'small', disabled: isFiltering, onClick: this.handleClear },
	                'Limpar'
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);
	  return Filters;
	}(_react2.default.Component);
	
	Filters.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  isFiltering: _react2.default.PropTypes.bool,
	  appliedFilter: _react2.default.PropTypes.object,
	  skills: _react2.default.PropTypes.object
	};
	Filters.contextTypes = {
	  router: _react2.default.PropTypes.object.isRequired
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    appliedFilter: _selectors2.default.getAppliedFilter(state),
	    isFiltering: _selectors2.default.isFiltering(state),
	    skills: _selectors2.default.getEntities(state, 'skills')
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Filters);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Filters, 'Filters', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/filters.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/filters.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/filters.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/filters.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/buscar/filters.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/filters.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/filters.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/filters.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/filters.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".filters__wrapper__ha_-DdT2XM {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em; }\n\n.filters__menu__3X6dScawmO {\n  margin: -0.5em -1em 1em; }\n\n.filters__menuItem__2UwRF8dCiA {\n  border-bottom: 1px solid transparent;\n  border-left: 5px solid transparent;\n  border-top: 1px solid transparent;\n  cursor: pointer;\n  padding: .5em .7em; }\n  .filters__menuItem__2UwRF8dCiA.filters__selected__2aAMMDJvPk {\n    background-color: #f0f0f0;\n    border-bottom-color: #ddd;\n    border-top-color: #ddd;\n    border-left-color: #2987CD; }\n  .filters__menuItem__2UwRF8dCiA:hover {\n    background-color: #f0f0f0; }\n", "", {"version":3,"sources":["/./src/views/content/buscar/src/views/content/buscar/filters.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,YAAY,EACb;;AAED;EACE,wBAAwB,EACzB;;AAED;EACE,qCAAqC;EACrC,mCAAmC;EACnC,kCAAkC;EAClC,gBAAgB;EAChB,mBAAmB,EAYpB;EAjBD;IAQI,0BAA0B;IAC1B,0BAA0B;IAC1B,uBAAuB;IACvB,2BAA2B,EAC5B;EAZH;IAeI,0BAA0B,EAC3B","file":"filters.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em;\n}\n\n.menu {\n  margin: -0.5em -1em 1em;\n}\n\n.menuItem {\n  border-bottom: 1px solid transparent;\n  border-left: 5px solid transparent;\n  border-top: 1px solid transparent;\n  cursor: pointer;\n  padding: .5em .7em;\n\n  &.selected {\n    background-color: #f0f0f0;\n    border-bottom-color: #ddd;\n    border-top-color: #ddd;\n    border-left-color: #2987CD;\n  }\n\n  &:hover {\n    background-color: #f0f0f0;\n  }\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "filters__wrapper__ha_-DdT2XM",
		"menu": "filters__menu__3X6dScawmO",
		"menuItem": "filters__menuItem__2UwRF8dCiA",
		"selected": "filters__selected__2aAMMDJvPk"
	};

/***/ },

/***/ "./src/views/content/buscar/results.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _latinize = __webpack_require__(51);
	
	var _latinize2 = _interopRequireDefault(_latinize);
	
	var _moment = __webpack_require__(7);
	
	var _moment2 = _interopRequireDefault(_moment);
	
	var _lodash = __webpack_require__(11);
	
	var _redux = __webpack_require__(12);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _constants = __webpack_require__("./src/constants.js");
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _results = __webpack_require__("./src/views/content/buscar/results.scss");
	
	var _results2 = _interopRequireDefault(_results);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Results = function (_React$Component) {
	  (0, _inherits3.default)(Results, _React$Component);
	
	  function Results() {
	    (0, _classCallCheck3.default)(this, Results);
	    return (0, _possibleConstructorReturn3.default)(this, (Results.__proto__ || (0, _getPrototypeOf2.default)(Results)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(Results, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var actions = this.props.actions;
	
	      var filter = this.getFilter();
	
	      if (filter) {
	        actions.updateFilter({ filter: filter });
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {}
	  }, {
	    key: 'getFilter',
	    value: function getFilter() {
	      var _ref = this.props.location.query || {},
	          filtro = _ref.filtro;
	
	      if (filtro) {
	        var comparator = function comparator(option) {
	          return filtro === (0, _latinize2.default)(option.text).toLowerCase();
	        };
	
	        var _ref2 = (0, _lodash.find)(_constants.Filter.OPTIONS, comparator) || {},
	            value = _ref2.value;
	
	        return value;
	      }
	
	      return null;
	    }
	  }, {
	    key: 'navigateTo',
	    value: function navigateTo(entity, id) {
	      var transitionTo = this.context.router.transitionTo;
	
	      var _find = (0, _lodash.find)(_constants.Filter.OPTIONS, { value: entity }),
	          text = _find.text;
	
	      var slug = (0, _latinize2.default)(text).toLowerCase();
	
	      transitionTo('/' + slug + '/' + id);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _props = this.props,
	          records = _props.records,
	          isFiltering = _props.isFiltering;
	
	
	      if (isFiltering) {
	        return _react2.default.createElement(
	          _semanticUiReact.Segment,
	          { basic: true, style: { height: '100%', width: '100%' } },
	          _react2.default.createElement(_semanticUiReact.Loader, { active: true, size: 'small' })
	        );
	      }
	
	      if (!isFiltering && (0, _lodash.isEmpty)(records)) {
	        return _react2.default.createElement(
	          _flexElement2.default,
	          { column: true, full: true, align: 'center', justify: 'center', className: _results2.default.wrapper },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'cloud', size: 'massive', style: { color: 'rgba(0,0,0, 0.1)' } }),
	          _react2.default.createElement(
	            'span',
	            { style: { color: 'rgba(0,0,0, 0.45)' } },
	            'Nenhum resultado encontrado :('
	          )
	        );
	      }
	
	      return _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, full: true, className: _results2.default.wrapper },
	        _react2.default.createElement(
	          _semanticUiReact.Card.Group,
	          { itemsPerRow: 4, className: _results2.default.cards },
	          (0, _lodash.map)(records, function (record, key) {
	            var date = (0, _moment2.default)(record.created_at);
	
	            var _find2 = (0, _lodash.find)(_constants.Filter.OPTIONS, { value: record.entity }),
	                icon = _find2.icon;
	
	            return _react2.default.createElement(
	              _semanticUiReact.Card,
	              {
	                key: key,
	                className: _results2.default.card,
	                onClick: function onClick() {
	                  return _this2.navigateTo(record.entity, record.id);
	                }
	              },
	              _react2.default.createElement(
	                _semanticUiReact.Card.Content,
	                null,
	                record.image ? _react2.default.createElement(_semanticUiReact.Image, { floated: 'left', size: 'mini', src: record.image }) : _react2.default.createElement(_semanticUiReact.Icon, { className: _results2.default.cardIcon, name: icon, color: 'black' }),
	                _react2.default.createElement(
	                  _semanticUiReact.Card.Header,
	                  null,
	                  record.title
	                ),
	                _react2.default.createElement(
	                  _semanticUiReact.Card.Meta,
	                  null,
	                  record.meta
	                ),
	                _react2.default.createElement(
	                  _semanticUiReact.Card.Description,
	                  null,
	                  record.description.length - 3 > 100 ? record.description.slice(0, 100) + '...' : record.description
	                )
	              ),
	              _react2.default.createElement(
	                _semanticUiReact.Card.Content,
	                { extra: true },
	                _react2.default.createElement(
	                  _flexElement2.default,
	                  { column: true, align: 'flex-end' },
	                  _react2.default.createElement(
	                    'span',
	                    null,
	                    date.isValid() && date.fromNow()
	                  )
	                )
	              )
	            );
	          })
	        )
	      );
	    }
	  }]);
	  return Results;
	}(_react2.default.Component);
	
	Results.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  isFiltering: _react2.default.PropTypes.bool,
	
	  location: _react2.default.PropTypes.object,
	  records: _react2.default.PropTypes.array
	};
	Results.contextTypes = {
	  router: _react2.default.PropTypes.object.isRequired
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    isLogged: _selectors2.default.isAuthenticated(state),
	    isFiltering: _selectors2.default.isFiltering(state),
	    appliedFilter: _selectors2.default.getAppliedFilter(state),
	    records: _selectors2.default.getSearchResults(state)
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Results);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Results, 'Results', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/results.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/results.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/results.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/buscar/results.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/buscar/results.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/results.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/results.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/results.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/buscar/results.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".results__wrapper__2d0lG8noCt {\n  font-size: 1rem; }\n\n.results__sorting__1o9FoAkp_r {\n  padding: .5em .5em 1.5em; }\n  .results__sorting__1o9FoAkp_r a.results__selected__1ZoN-8AnAQ {\n    font-weight: bold;\n    text-decoration: underline; }\n  .results__sorting__1o9FoAkp_r strong {\n    margin-right: .5em; }\n  .results__sorting__1o9FoAkp_r span {\n    margin: 0 .5em; }\n\n.results__cards__DVKGeb4-8s {\n  margin-left: -0.3em !important;\n  margin-right: -0.5em !important; }\n\n.results__card__3ArhkmpO4m {\n  cursor: pointer; }\n  .results__card__3ArhkmpO4m:hover {\n    box-shadow: 0 0 0 1px #D4D4D5, 0 2px 4px 0 rgba(34, 36, 38, 0.12), 0 2px 10px 0 rgba(34, 36, 38, 0.15) !important; }\n\n.results__cardIcon__1aDKwe3Ll3 {\n  float: left !important;\n  height: auto !important;\n  width: 35px !important;\n  font-size: 2em !important;\n  margin-bottom: 10px !important;\n  margin-right: 10px !important;\n  margin-top: 5px !important; }\n", "", {"version":3,"sources":["/./src/views/content/buscar/src/views/content/buscar/results.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB,EACjB;;AAED;EACE,yBAAyB,EAc1B;EAfD;IAII,kBAAkB;IAClB,2BAA2B,EAC5B;EANH;IASI,mBAAmB,EACpB;EAVH;IAaI,eAAe,EAChB;;AAGH;EACE,+BAA+B;EAC/B,gCAAgC,EACjC;;AAED;EACE,gBAAgB,EAQjB;EATD;IAII,kHAG4C,EAC7C;;AAGH;EACE,uBAAuB;EACvB,wBAAwB;EACxB,uBAAuB;EACvB,0BAA0B;EAC1B,+BAA+B;EAC/B,8BAA8B;EAC9B,2BAA2B,EAC5B","file":"results.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n}\n\n.sorting {\n  padding: .5em .5em 1.5em;\n\n  a.selected {\n    font-weight: bold;\n    text-decoration: underline;\n  }\n\n  strong {\n    margin-right: .5em;\n  }\n\n  span {\n    margin: 0 .5em;\n  }\n}\n\n.cards {\n  margin-left: -0.3em !important;\n  margin-right: -0.5em !important;\n}\n\n.card {\n  cursor: pointer;\n\n  &:hover {\n    box-shadow:\n      0 0 0 1px #D4D4D5,\n      0 2px 4px 0 rgba(34,36,38,.12),\n      0 2px 10px 0 rgba(34,36,38,.15) !important;\n  }\n}\n\n.cardIcon {\n  float: left !important;\n  height: auto !important;\n  width: 35px !important;\n  font-size: 2em !important;\n  margin-bottom: 10px !important;\n  margin-right: 10px !important;\n  margin-top: 5px !important;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "results__wrapper__2d0lG8noCt",
		"sorting": "results__sorting__1o9FoAkp_r",
		"selected": "results__selected__1ZoN-8AnAQ",
		"cards": "results__cards__DVKGeb4-8s",
		"card": "results__card__3ArhkmpO4m",
		"cardIcon": "results__cardIcon__1aDKwe3Ll3"
	};

/***/ },

/***/ "./src/views/content/campanha/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _threeColumns = __webpack_require__("./src/views/components/three-columns.jsx");
	
	var _threeColumns2 = _interopRequireDefault(_threeColumns);
	
	var _panel = __webpack_require__("./src/views/content/campanha/panel.jsx");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	var _details = __webpack_require__("./src/views/content/campanha/details.jsx");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Campanha = function Campanha(props) {
	  return _react2.default.createElement(_threeColumns2.default, {
	    panel: _react2.default.createElement(_panel2.default, props),
	    content: _react2.default.createElement(_details2.default, props)
	  });
	};
	
	var _default = Campanha;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Campanha, 'Campanha', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/campanha/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/campanha/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/campanha/panel.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _panel = __webpack_require__("./src/views/content/campanha/panel.scss");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Panel = function Panel() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, className: _panel2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      'Campanha'
	    )
	  );
	};
	
	var _default = Panel;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Panel, 'Panel', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/campanha/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/campanha/panel.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/campanha/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/panel.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/panel.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/panel.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".panel__wrapper__1kh_1kRRlF {\n  font-size: 1rem;\n  margin-right: 0.8em;\n  width: 15em; }\n", "", {"version":3,"sources":["/./src/views/content/campanha/src/views/content/campanha/panel.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,oBAAoB;EACpB,YAAY,EACb","file":"panel.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n  margin-right: 0.8em;\n  width: 15em;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "panel__wrapper__1kh_1kRRlF"
	};

/***/ },

/***/ "./src/views/content/campanha/details.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _faker = __webpack_require__(67);
	
	var _faker2 = _interopRequireDefault(_faker);
	
	var _times = __webpack_require__(68);
	
	var _times2 = _interopRequireDefault(_times);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _details = __webpack_require__("./src/views/content/campanha/details.scss");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Details = function Details() {
	  return _react2.default.createElement(
	    _semanticUiReact.Segment,
	    { className: _details2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Container,
	      { fluid: true },
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, style: { marginBottom: 30 } },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'clipboard' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'SERVI\xC7O'
	          )
	        ),
	        _react2.default.createElement(
	          'p',
	          null,
	          _faker2.default.lorem.sentence(20)
	        )
	      ),
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, style: { marginBottom: 30 } },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'lightbulb' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'HABILIDADES REQUERIDAS'
	          )
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Label.Group,
	          null,
	          _react2.default.createElement(
	            _semanticUiReact.Label,
	            null,
	            'Encanador'
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Label,
	            null,
	            'Eletricista'
	          )
	        )
	      ),
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'clipboard' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'DESCRI\xC7\xC3O'
	          )
	        ),
	        (0, _times2.default)(3).map(function (idx) {
	          return _react2.default.createElement(
	            'p',
	            { key: idx },
	            _faker2.default.lorem.paragraph(6)
	          );
	        })
	      )
	    )
	  );
	};
	
	var _default = Details;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Details, 'Details', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/campanha/details.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/campanha/details.jsx');
	}();

	;

/***/ },

/***/ 68:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1890);

/***/ },

/***/ "./src/views/content/campanha/details.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/details.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/details.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/details.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/campanha/details.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".details__wrapper__Pj9bK3uKvK {\n  font-size: 1rem; }\n", "", {"version":3,"sources":["/./src/views/content/campanha/src/views/content/campanha/details.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB,EACjB","file":"details.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "details__wrapper__Pj9bK3uKvK"
	};

/***/ },

/***/ "./src/views/content/organizacao/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _threeColumns = __webpack_require__("./src/views/components/three-columns.jsx");
	
	var _threeColumns2 = _interopRequireDefault(_threeColumns);
	
	var _panel = __webpack_require__("./src/views/content/organizacao/panel.jsx");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	var _details = __webpack_require__("./src/views/content/organizacao/details.jsx");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Organizacao = function Organizacao(props) {
	  return _react2.default.createElement(_threeColumns2.default, {
	    panel: _react2.default.createElement(_panel2.default, props),
	    content: _react2.default.createElement(_details2.default, props)
	  });
	};
	
	var _default = Organizacao;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Organizacao, 'Organizacao', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/organizacao/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/organizacao/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/organizacao/panel.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _panel = __webpack_require__("./src/views/content/organizacao/panel.scss");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Panel = function Panel() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, className: _panel2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      'Organizacao'
	    )
	  );
	};
	
	var _default = Panel;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Panel, 'Panel', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/organizacao/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/organizacao/panel.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/organizacao/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/panel.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/panel.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/panel.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".panel__wrapper__2tfiz0jVlS {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em; }\n", "", {"version":3,"sources":["/./src/views/content/organizacao/src/views/content/organizacao/panel.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,YAAY,EACb","file":"panel.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "panel__wrapper__2tfiz0jVlS"
	};

/***/ },

/***/ "./src/views/content/organizacao/details.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _faker = __webpack_require__(67);
	
	var _faker2 = _interopRequireDefault(_faker);
	
	var _times = __webpack_require__(68);
	
	var _times2 = _interopRequireDefault(_times);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _details = __webpack_require__("./src/views/content/organizacao/details.scss");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Details = function Details() {
	  return _react2.default.createElement(
	    _semanticUiReact.Segment,
	    { className: _details2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Container,
	      { fluid: true },
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, style: { marginBottom: 30 } },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'clipboard' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'SERVI\xC7O'
	          )
	        ),
	        _react2.default.createElement(
	          'p',
	          null,
	          _faker2.default.lorem.sentence(20)
	        )
	      ),
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, style: { marginBottom: 30 } },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'lightbulb' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'HABILIDADES REQUERIDAS'
	          )
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Label.Group,
	          null,
	          _react2.default.createElement(
	            _semanticUiReact.Label,
	            null,
	            'Encanador'
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Label,
	            null,
	            'Eletricista'
	          )
	        )
	      ),
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'clipboard' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'DESCRI\xC7\xC3O'
	          )
	        ),
	        (0, _times2.default)(3).map(function (idx) {
	          return _react2.default.createElement(
	            'p',
	            { key: idx },
	            _faker2.default.lorem.paragraph(6)
	          );
	        })
	      )
	    )
	  );
	};
	
	var _default = Details;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Details, 'Details', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/organizacao/details.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/organizacao/details.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/organizacao/details.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/details.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/details.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/details.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/organizacao/details.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".details__wrapper__1SL5uvq3wG {\n  font-size: 1rem; }\n", "", {"version":3,"sources":["/./src/views/content/organizacao/src/views/content/organizacao/details.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB,EACjB","file":"details.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "details__wrapper__1SL5uvq3wG"
	};

/***/ },

/***/ "./src/views/content/servico/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _threeColumns = __webpack_require__("./src/views/components/three-columns.jsx");
	
	var _threeColumns2 = _interopRequireDefault(_threeColumns);
	
	var _panel = __webpack_require__("./src/views/content/servico/panel.jsx");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	var _details = __webpack_require__("./src/views/content/servico/details.jsx");
	
	var _details2 = _interopRequireDefault(_details);
	
	var _related = __webpack_require__("./src/views/content/servico/related.jsx");
	
	var _related2 = _interopRequireDefault(_related);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Servico = function Servico(props) {
	  return _react2.default.createElement(_threeColumns2.default, {
	    panel: _react2.default.createElement(_panel2.default, props),
	    content: _react2.default.createElement(_details2.default, props),
	    related: _react2.default.createElement(_related2.default, props)
	  });
	};
	
	var _default = Servico;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Servico, 'Servico', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/servico/panel.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _panel = __webpack_require__("./src/views/content/servico/panel.scss");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Panel = function Panel() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, className: _panel2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      'Servico'
	    )
	  );
	};
	
	var _default = Panel;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Panel, 'Panel', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/panel.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/servico/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/panel.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/panel.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/panel.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".panel__wrapper__1Vf43xDGO2 {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em; }\n", "", {"version":3,"sources":["/./src/views/content/servico/src/views/content/servico/panel.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,YAAY,EACb","file":"panel.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "panel__wrapper__1Vf43xDGO2"
	};

/***/ },

/***/ "./src/views/content/servico/details.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _faker = __webpack_require__(67);
	
	var _faker2 = _interopRequireDefault(_faker);
	
	var _times = __webpack_require__(68);
	
	var _times2 = _interopRequireDefault(_times);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _details = __webpack_require__("./src/views/content/servico/details.scss");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Details = function Details() {
	  return _react2.default.createElement(
	    _semanticUiReact.Segment,
	    { className: _details2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Container,
	      { fluid: true },
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, style: { marginBottom: 30 } },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'clipboard' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'SERVI\xC7O'
	          )
	        ),
	        _react2.default.createElement(
	          'p',
	          null,
	          _faker2.default.lorem.sentence(20)
	        )
	      ),
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, style: { marginBottom: 30 } },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'lightbulb' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'HABILIDADES REQUERIDAS'
	          )
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Label.Group,
	          null,
	          _react2.default.createElement(
	            _semanticUiReact.Label,
	            null,
	            'Encanador'
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Label,
	            null,
	            'Eletricista'
	          )
	        )
	      ),
	      _react2.default.createElement(
	        _flexElement2.default,
	        { column: true },
	        _react2.default.createElement(
	          _semanticUiReact.Header,
	          { as: 'h5' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'clipboard' }),
	          _react2.default.createElement(
	            _semanticUiReact.Header.Content,
	            null,
	            'DESCRI\xC7\xC3O'
	          )
	        ),
	        (0, _times2.default)(3).map(function (idx) {
	          return _react2.default.createElement(
	            'p',
	            { key: idx },
	            _faker2.default.lorem.paragraph(6)
	          );
	        })
	      )
	    )
	  );
	};
	
	var _default = Details;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Details, 'Details', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/details.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/details.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/servico/details.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/details.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/details.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/details.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/details.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".details__wrapper__3nv26yCiLL {\n  font-size: 1rem; }\n", "", {"version":3,"sources":["/./src/views/content/servico/src/views/content/servico/details.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB,EACjB","file":"details.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "details__wrapper__3nv26yCiLL"
	};

/***/ },

/***/ "./src/views/content/servico/related.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _related = __webpack_require__("./src/views/content/servico/related.scss");
	
	var _related2 = _interopRequireDefault(_related);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Related = function Related() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, className: _related2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      'Pellentesque habitant morbi tristique senectus.'
	    ),
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      'Pellentesque habitant morbi tristique senectus.'
	    )
	  );
	};
	
	var _default = Related;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Related, 'Related', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/related.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/servico/related.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/servico/related.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/related.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/related.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/related.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/servico/related.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".related__wrapper__24ZbXKELIF {\n  font-size: 1rem;\n  margin-left: .8em;\n  width: 18em; }\n", "", {"version":3,"sources":["/./src/views/content/servico/src/views/content/servico/related.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,YAAY,EACb","file":"related.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n  margin-left: .8em;\n  width: 18em;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "related__wrapper__24ZbXKELIF"
	};

/***/ },

/***/ "./src/views/content/usuario/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _threeColumns = __webpack_require__("./src/views/components/three-columns.jsx");
	
	var _threeColumns2 = _interopRequireDefault(_threeColumns);
	
	var _panel = __webpack_require__("./src/views/content/usuario/panel.jsx");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	var _details = __webpack_require__("./src/views/content/usuario/details.jsx");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Usuario = function Usuario(props) {
	  return _react2.default.createElement(_threeColumns2.default, {
	    panel: _react2.default.createElement(_panel2.default, props),
	    content: _react2.default.createElement(_details2.default, props)
	  });
	};
	
	var _default = Usuario;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Usuario, 'Usuario', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/index.js');
	}();

	;

/***/ },

/***/ "./src/views/content/usuario/panel.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _panel = __webpack_require__("./src/views/content/usuario/panel.scss");
	
	var _panel2 = _interopRequireDefault(_panel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Panel = function Panel() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { column: true, className: _panel2.default.wrapper },
	    _react2.default.createElement(
	      _semanticUiReact.Segment,
	      null,
	      'Usuario'
	    )
	  );
	};
	
	var _default = Panel;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Panel, 'Panel', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/panel.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/panel.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/usuario/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/panel.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/panel.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/panel.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/panel.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".panel__wrapper__E6444UuFG3 {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em; }\n", "", {"version":3,"sources":["/./src/views/content/usuario/src/views/content/usuario/panel.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,YAAY,EACb","file":"panel.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n  margin-right: .8em;\n  width: 15em;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "panel__wrapper__E6444UuFG3"
	};

/***/ },

/***/ "./src/views/content/usuario/details.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _lodash = __webpack_require__(11);
	
	var _redux = __webpack_require__(12);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _details = __webpack_require__("./src/views/content/usuario/details.scss");
	
	var _details2 = _interopRequireDefault(_details);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Details = function (_React$Component) {
	  (0, _inherits3.default)(Details, _React$Component);
	
	  function Details() {
	    (0, _classCallCheck3.default)(this, Details);
	    return (0, _possibleConstructorReturn3.default)(this, (Details.__proto__ || (0, _getPrototypeOf2.default)(Details)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(Details, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.isLogged) {
	        this.props.actions.read({ entity: 'users' });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          user = _props.user,
	          skills = _props.skills;
	
	
	      return _react2.default.createElement(
	        _semanticUiReact.Segment,
	        { className: _details2.default.wrapper },
	        _react2.default.createElement(
	          _semanticUiReact.Container,
	          { fluid: true },
	          _react2.default.createElement(
	            _flexElement2.default,
	            { column: true, style: { marginBottom: 30 } },
	            _react2.default.createElement(
	              _semanticUiReact.Header,
	              { as: 'h5' },
	              _react2.default.createElement(_semanticUiReact.Icon, { name: 'clipboard' }),
	              _react2.default.createElement(
	                _semanticUiReact.Header.Content,
	                null,
	                'SOBRE MIM'
	              )
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              user.description
	            )
	          ),
	          _react2.default.createElement(
	            _flexElement2.default,
	            { column: true, style: { marginBottom: 30 } },
	            _react2.default.createElement(
	              _semanticUiReact.Header,
	              { as: 'h5' },
	              _react2.default.createElement(_semanticUiReact.Icon, { name: 'lightbulb' }),
	              _react2.default.createElement(
	                _semanticUiReact.Header.Content,
	                null,
	                'HABILIDADES'
	              )
	            ),
	            _react2.default.createElement(
	              _semanticUiReact.Label.Group,
	              null,
	              (0, _lodash.values)(user.skills).map(function (skillID) {
	                return _react2.default.createElement(
	                  _semanticUiReact.Label,
	                  { key: skillID },
	                  skills[skillID].name
	                );
	              })
	            )
	          )
	        )
	      );
	    }
	  }]);
	  return Details;
	}(_react2.default.Component);
	
	Details.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  isLogged: _react2.default.PropTypes.bool,
	  user: _react2.default.PropTypes.object,
	  skills: _react2.default.PropTypes.object
	};
	
	
	var mapStateToProps = function mapStateToProps(state, _ref) {
	  var id = _ref.params.id;
	  return {
	    isLogged: _selectors2.default.isAuthenticated(state),
	    user: _selectors2.default.getEntities(state, 'users', id),
	    skills: _selectors2.default.getEntities(state, 'skills')
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Details);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Details, 'Details', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/details.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/details.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/details.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/content/usuario/details.jsx');
	}();

	;

/***/ },

/***/ "./src/views/content/usuario/details.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/details.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/details.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/details.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/content/usuario/details.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".details__wrapper__y-ZrJIHt4e {\n  font-size: 1rem; }\n", "", {"version":3,"sources":["/./src/views/content/usuario/src/views/content/usuario/details.scss"],"names":[],"mappings":"AAAA;EACE,gBAAgB,EACjB","file":"details.scss","sourcesContent":[".wrapper {\n  font-size: 1rem;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"wrapper": "details__wrapper__y-ZrJIHt4e"
	};

/***/ },

/***/ "./src/views/containers/login.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__("./node_modules/babel-runtime/helpers/defineProperty.js");
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _redux = __webpack_require__(12);
	
	var _reactRedux = __webpack_require__(57);
	
	var _reactRouter = __webpack_require__(58);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Login = function (_React$Component) {
	  (0, _inherits3.default)(Login, _React$Component);
	
	  function Login() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, Login);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Login.__proto__ || (0, _getPrototypeOf2.default)(Login)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      type: 'volunteer'
	    }, _this.handleChange = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleChange__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleLogin = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleLogin__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _this.handleRegister = function () {
	      var _this4;
	
	      return (_this4 = _this).__handleRegister__REACT_HOT_LOADER__.apply(_this4, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(Login, [{
	    key: '__handleChange__REACT_HOT_LOADER__',
	    value: function __handleChange__REACT_HOT_LOADER__(evt, _ref2) {
	      var name = _ref2.name,
	          value = _ref2.value;
	
	      this.setState((0, _defineProperty3.default)({}, name, value));
	    }
	  }, {
	    key: '__handleLogin__REACT_HOT_LOADER__',
	    value: function __handleLogin__REACT_HOT_LOADER__(evt, _ref3) {
	      var email = _ref3.email,
	          password = _ref3.password;
	
	      evt.preventDefault();
	
	      var type = this.state.type;
	      var _props = this.props,
	          actions = _props.actions,
	          isLogging = _props.isLogging,
	          isRegistering = _props.isRegistering;
	
	
	      if (isLogging || isRegistering) {
	        return;
	      }
	
	      if (email && password) {
	        actions.login({ email: email, password: password, type: type });
	      } else {
	        actions.notifyError('Por favor, preencha todos os campos.');
	      }
	    }
	  }, {
	    key: '__handleRegister__REACT_HOT_LOADER__',
	    value: function __handleRegister__REACT_HOT_LOADER__(evt) {
	      evt.preventDefault();
	
	      var type = this.state.type;
	      var _props2 = this.props,
	          actions = _props2.actions,
	          isLogging = _props2.isLogging,
	          isRegistering = _props2.isRegistering;
	
	
	      if (isRegistering || isLogging) {
	        return;
	      }
	
	      var email = this.el.querySelector('[name="email"]').value;
	      var password = this.el.querySelector('[name="password"]').value;
	
	      if (email && password) {
	        actions.register({ email: email, password: password, type: type });
	      } else {
	        actions.notifyError('Por favor, preencha todos os campos.');
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this5 = this;
	
	      var type = this.state.type;
	      var _props3 = this.props,
	          isLogged = _props3.isLogged,
	          isLogging = _props3.isLogging,
	          isRegistering = _props3.isRegistering,
	          location = _props3.location;
	
	      var _ref4 = location.state || {},
	          _ref4$redirect = _ref4.redirect,
	          redirect = _ref4$redirect === undefined ? { pathname: '/' } : _ref4$redirect;
	
	      if (isLogged) {
	        return _react2.default.createElement(_reactRouter.Redirect, { to: redirect });
	      }
	
	      return _react2.default.createElement(
	        _flexElement2.default,
	        { column: true, full: true, align: 'center', justify: 'center', innerRef: function innerRef(el) {
	            return _this5.el = el;
	          } },
	        _react2.default.createElement(
	          _flexElement2.default,
	          { column: true, align: 'center' },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: 'travel', color: 'blue', style: { fontSize: '6em' } }),
	          _react2.default.createElement(
	            'span',
	            { style: { color: 'rgba(0,0,0,0.5)', fontSize: '1.3em' } },
	            'Ag\xEAncia Amiga'
	          )
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Segment,
	          { column: true, align: 'center', as: _flexElement2.default, style: { marginTop: 30, width: 300 } },
	          _react2.default.createElement(
	            _semanticUiReact.Form,
	            { style: { marginBottom: '1em', width: '100%' }, onSubmit: this.handleLogin },
	            _react2.default.createElement(
	              _semanticUiReact.Form.Field,
	              null,
	              _react2.default.createElement(
	                'label',
	                { htmlFor: true },
	                'Login'
	              )
	            ),
	            _react2.default.createElement(_semanticUiReact.Form.Input, {
	              type: 'text',
	              name: 'email',
	              disabled: isLogging || isRegistering,
	              placeholder: 'Email'
	            }),
	            _react2.default.createElement(_semanticUiReact.Form.Input, {
	              type: 'password',
	              name: 'password',
	              placeholder: 'Senha',
	              disabled: isLogging || isRegistering
	            }),
	            _react2.default.createElement(
	              _semanticUiReact.Button,
	              {
	                primary: true,
	                fluid: true,
	                size: 'large',
	                type: 'submit',
	                style: { margin: 0 },
	                loading: isLogging,
	                disabled: isLogging || isRegistering
	              },
	              _react2.default.createElement(
	                _flexElement2.default,
	                { align: 'center', justify: 'space-between' },
	                _react2.default.createElement(
	                  'span',
	                  null,
	                  isLogging ? 'Autenticando...' : 'Entrar'
	                ),
	                _react2.default.createElement(_semanticUiReact.Icon, { name: 'sign in' })
	              )
	            )
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Divider,
	            { horizontal: true, style: { width: '100%' } },
	            'ou'
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Form,
	            { style: { marginTop: '1em', width: '100%' } },
	            _react2.default.createElement(
	              _semanticUiReact.Form.Field,
	              null,
	              _react2.default.createElement(
	                'label',
	                { htmlFor: true },
	                'Cadastre-se como:'
	              )
	            ),
	            _react2.default.createElement(
	              _semanticUiReact.Form.Group,
	              { widths: 'equal' },
	              _react2.default.createElement(_semanticUiReact.Form.Checkbox, {
	                radio: true,
	                name: 'type',
	                label: 'Volunt\xE1rio',
	                value: 'volunteer',
	                checked: type === 'volunteer',
	                disabled: isLogging || isRegistering,
	                onChange: this.handleChange
	              }),
	              _react2.default.createElement(_semanticUiReact.Form.Checkbox, {
	                radio: true,
	                name: 'type',
	                label: 'Organiza\xE7\xE3o',
	                value: 'organization',
	                checked: type === 'organization',
	                disabled: isLogging || isRegistering,
	                onChange: this.handleChange
	              })
	            )
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Button,
	            {
	              fluid: true,
	              size: 'large',
	              style: { margin: 0, marginTop: 10 },
	              loading: isRegistering,
	              disabled: isLogging || isRegistering,
	              onClick: this.handleRegister
	            },
	            _react2.default.createElement(
	              _flexElement2.default,
	              { align: 'center', justify: 'space-between' },
	              _react2.default.createElement(
	                'span',
	                null,
	                isRegistering ? 'Registrando...' : 'Registrar'
	              ),
	              _react2.default.createElement(_semanticUiReact.Icon, { name: 'signup', style: { margin: 0 } })
	            )
	          )
	        )
	      );
	    }
	  }]);
	  return Login;
	}(_react2.default.Component);
	
	Login.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  isLogged: _react2.default.PropTypes.bool,
	  isLogging: _react2.default.PropTypes.bool,
	  isRegistering: _react2.default.PropTypes.bool,
	  location: _react2.default.PropTypes.object
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    isLogged: _selectors2.default.isAuthenticated(state),
	    isLogging: _selectors2.default.isAuthenticating(state),
	    isRegistering: _selectors2.default.isRegistering(state)
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Login);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Login, 'Login', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/login.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/login.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/login.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/login.jsx');
	}();

	;

/***/ },

/***/ "./src/views/containers/notification.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactNotificationSystem = __webpack_require__(69);
	
	var _reactNotificationSystem2 = _interopRequireDefault(_reactNotificationSystem);
	
	var _reactRedux = __webpack_require__(57);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var NotificationContainer = function (_React$PureComponent) {
	  (0, _inherits3.default)(NotificationContainer, _React$PureComponent);
	
	  function NotificationContainer() {
	    (0, _classCallCheck3.default)(this, NotificationContainer);
	    return (0, _possibleConstructorReturn3.default)(this, (NotificationContainer.__proto__ || (0, _getPrototypeOf2.default)(NotificationContainer)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(NotificationContainer, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(_ref) {
	      var notification = _ref.notification;
	
	      if (notification.level) {
	        this.el.addNotification(notification);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      return _react2.default.createElement(_reactNotificationSystem2.default, { ref: function ref(el) {
	          return _this2.el = el;
	        } });
	    }
	  }]);
	  return NotificationContainer;
	}(_react2.default.PureComponent);
	
	NotificationContainer.propTypes = {
	  notification: _react2.default.PropTypes.object
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    notification: _selectors2.default.getNotification(state)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps)(NotificationContainer);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(NotificationContainer, 'NotificationContainer', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/notification.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/notification.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/notification.jsx');
	}();

	;

/***/ },

/***/ 69:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1331);

/***/ },

/***/ "./src/views/containers/topbar/index.js":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(58);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _search = __webpack_require__("./src/views/containers/topbar/search.jsx");
	
	var _search2 = _interopRequireDefault(_search);
	
	var _user = __webpack_require__("./src/views/containers/topbar/user.jsx");
	
	var _user2 = _interopRequireDefault(_user);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var styles = {
	  topBar: {
	    backgroundColor: '#2987CD',
	    color: 'white',
	    fontSize: '1rem',
	    padding: '0.4em 0.4em 0.5em 1em',
	    width: '100%'
	  },
	  logo: {
	    fontSize: '1.3em',
	    marginRight: '0.5em',
	    marginTop: '0.1em'
	  }
	};
	
	var TopBar = function TopBar() {
	  return _react2.default.createElement(
	    _flexElement2.default,
	    { style: styles.topBar },
	    _react2.default.createElement(
	      _flexElement2.default,
	      { column: true, align: 'center', style: { fontSize: '1.2em' } },
	      _react2.default.createElement(_semanticUiReact.Icon, { name: 'travel', style: styles.logo }),
	      _react2.default.createElement(
	        _reactRouter.Link,
	        { to: '/', style: { color: 'white' } },
	        'Ag\xEAncia Amiga'
	      )
	    ),
	    _react2.default.createElement(
	      _flexElement2.default,
	      { full: true, column: true, align: 'center' },
	      _react2.default.createElement(_search2.default, null)
	    ),
	    _react2.default.createElement(
	      _flexElement2.default,
	      { column: true, align: 'center' },
	      _react2.default.createElement(_user2.default, null)
	    )
	  );
	};
	
	var _default = TopBar;
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(styles, 'styles', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/index.js');
	
	  __REACT_HOT_LOADER__.register(TopBar, 'TopBar', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/index.js');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/index.js');
	}();

	;

/***/ },

/***/ "./src/views/containers/topbar/search.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _latinize = __webpack_require__(51);
	
	var _latinize2 = _interopRequireDefault(_latinize);
	
	var _lodash = __webpack_require__(11);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _constants = __webpack_require__("./src/constants.js");
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _search = __webpack_require__("./src/views/containers/topbar/search.scss");
	
	var _search2 = _interopRequireDefault(_search);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TopBarSearch = function (_React$Component) {
	  (0, _inherits3.default)(TopBarSearch, _React$Component);
	
	  function TopBarSearch() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, TopBarSearch);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TopBarSearch.__proto__ || (0, _getPrototypeOf2.default)(TopBarSearch)).call.apply(_ref, [this].concat(args))), _this), _this.handleFilterClick = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleFilterClick__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleSearch = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleSearch__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(TopBarSearch, [{
	    key: '__handleFilterClick__REACT_HOT_LOADER__',
	    value: function __handleFilterClick__REACT_HOT_LOADER__(evt, _ref2) {
	      var value = _ref2.value;
	
	      evt.preventDefault();
	
	      this.props.onUpdateFilter({ filter: value });
	    }
	  }, {
	    key: '__handleSearch__REACT_HOT_LOADER__',
	    value: function __handleSearch__REACT_HOT_LOADER__(evt, _ref3) {
	      var query = _ref3.query;
	      var _props = this.props,
	          entity = _props.entity,
	          onFilter = _props.onFilter;
	
	      var _find = (0, _lodash.find)(_constants.Filter.OPTIONS, { value: entity }),
	          text = _find.text;
	
	      var slug = (0, _latinize2.default)(text).toLowerCase();
	
	      evt.preventDefault();
	
	      onFilter({ query: query });
	
	      this.context.router.transitionTo({
	        pathname: '/buscar',
	        query: { filtro: slug }
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;
	
	      var _props2 = this.props,
	          entity = _props2.entity,
	          query = _props2.query,
	          isFiltering = _props2.isFiltering;
	
	      var selected = (0, _lodash.find)(_constants.Filter.OPTIONS, { value: entity });
	
	      return _react2.default.createElement(
	        _semanticUiReact.Form,
	        { className: _search2.default.searchForm, onSubmit: this.handleSearch },
	        _react2.default.createElement(
	          _semanticUiReact.Input,
	          { action: true, focus: false, className: _search2.default.searchInput },
	          _react2.default.createElement(_semanticUiReact.Icon, { name: selected.icon }),
	          _react2.default.createElement('input', { name: 'query', defaultValue: query, placeholder: 'Buscar ' + selected.text }),
	          _react2.default.createElement(
	            _semanticUiReact.Dropdown,
	            { pointing: 'top left', icon: 'sliders', className: _search2.default.filters },
	            _react2.default.createElement(
	              _semanticUiReact.Dropdown.Menu,
	              null,
	              _constants.Filter.OPTIONS.map(function (option) {
	                return _react2.default.createElement(_semanticUiReact.Dropdown.Item, {
	                  key: option.value,
	                  selected: entity === option.value,
	                  icon: option.icon,
	                  value: option.value,
	                  text: option.text,
	                  onClick: _this4.handleFilterClick
	                });
	              })
	            )
	          ),
	          _react2.default.createElement(
	            _semanticUiReact.Button,
	            { type: 'submit', className: _search2.default.filterButton, disabled: isFiltering },
	            'Buscar'
	          )
	        )
	      );
	    }
	  }]);
	  return TopBarSearch;
	}(_react2.default.Component);
	
	TopBarSearch.propTypes = {
	  entity: _react2.default.PropTypes.string,
	  isFiltering: _react2.default.PropTypes.bool,
	  query: _react2.default.PropTypes.string,
	  onFilter: _react2.default.PropTypes.func,
	  onUpdateFilter: _react2.default.PropTypes.func
	};
	TopBarSearch.contextTypes = {
	  router: _react2.default.PropTypes.object.isRequired
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    isFiltering: _selectors2.default.isFiltering(state),
	    entity: _selectors2.default.getEntityFilter(state),
	    query: _selectors2.default.getQueryFilter(state)
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    onFilter: function onFilter() {
	      return dispatch(actionCreators.filter());
	    },
	    onUpdateFilter: function onUpdateFilter(updates) {
	      return dispatch(actionCreators.updateFilter(updates));
	    }
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(TopBarSearch);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(TopBarSearch, 'TopBarSearch', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/search.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/search.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/search.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/search.jsx');
	}();

	;

/***/ },

/***/ "./src/views/containers/topbar/search.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/topbar/search.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/topbar/search.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/topbar/search.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ "./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/topbar/search.scss":
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")();
	// imports
	
	
	// module
	exports.push([module.id, ".search__searchForm__JpHByftYa3 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  font-size: 1rem;\n  margin: 0 .5em; }\n\n.search__searchInput__1vgOId3m8T {\n  -webkit-box-align: stretch;\n      -ms-flex-align: stretch;\n          align-items: stretch;\n  color: rgba(0, 0, 0, 0.3);\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  margin: auto;\n  z-index: 1; }\n  .search__searchInput__1vgOId3m8T > i {\n    color: rgba(0, 0, 0, 0.4);\n    font-size: 0.9em;\n    margin: auto -2em auto auto;\n    z-index: 1; }\n  .search__searchInput__1vgOId3m8T > input {\n    border: none !important;\n    background: white !important;\n    padding-left: 2.4em !important;\n    width: 20em !important; }\n\n.search__filters__3Y5dXHizBH {\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  background-color: white;\n  padding: .5em .8em;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex; }\n  .search__filters__3Y5dXHizBH > i {\n    margin: 0 !important; }\n\n.search__filterButton__1RZ58KRFhW {\n  background-color: #1d6092 !important;\n  color: white !important; }\n", "", {"version":3,"sources":["/./src/views/containers/topbar/src/views/containers/topbar/search.scss"],"names":[],"mappings":"AAAA;EACE,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,oBAAQ;MAAR,YAAQ;UAAR,QAAQ;EACR,gBAAgB;EAChB,eAAe,EAChB;;AAED;EACE,2BAAqB;MAArB,wBAAqB;UAArB,qBAAqB;EACrB,0BAAW;EACX,qBAAc;EAAd,qBAAc;EAAd,cAAc;EACd,aAAa;EACb,WAAW,EAeZ;EApBD;IAQI,0BAAW;IACX,iBAAiB;IACjB,4BAA4B;IAC5B,WAAW,EACZ;EAZH;IAeI,wBAAwB;IACxB,6BAA6B;IAC7B,+BAA+B;IAC/B,uBAAuB,EACxB;;AAGH;EACE,0BAAoB;MAApB,uBAAoB;UAApB,oBAAoB;EACpB,wBAAwB;EACxB,mBAAmB;EACnB,qBAAc;EAAd,qBAAc;EAAd,cAAc,EAKf;EATD;IAOI,qBAAqB,EACtB;;AAGH;EACE,qCAAiD;EACjD,wBAAwB,EACzB","file":"search.scss","sourcesContent":[".searchForm {\n  display: flex;\n  flex: 1;\n  font-size: 1rem;\n  margin: 0 .5em;\n}\n\n.searchInput {\n  align-items: stretch;\n  color: rgba(0,0,0,0.3);\n  display: flex;\n  margin: auto;\n  z-index: 1;\n\n  & > i {\n    color: rgba(0,0,0, 0.4);\n    font-size: 0.9em;\n    margin: auto -2em auto auto;\n    z-index: 1;\n  }\n\n  & > input {\n    border: none !important;\n    background: white !important;\n    padding-left: 2.4em !important;\n    width: 20em !important;\n  }\n}\n\n.filters {\n  align-items: center;\n  background-color: white;\n  padding: .5em .8em;\n  display: flex;\n\n  & > i {\n    margin: 0 !important;\n  }\n}\n\n.filterButton {\n  background-color: darken(#2987CD, 14%) !important;\n  color: white !important;\n}\n"],"sourceRoot":"webpack://"}]);
	
	// exports
	exports.locals = {
		"searchForm": "search__searchForm__JpHByftYa3",
		"searchInput": "search__searchInput__1vgOId3m8T",
		"filters": "search__filters__3Y5dXHizBH",
		"filterButton": "search__filterButton__1RZ58KRFhW"
	};

/***/ },

/***/ "./src/views/containers/topbar/user.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _lodash = __webpack_require__(11);
	
	var _redux = __webpack_require__(12);
	
	var _reactRedux = __webpack_require__(57);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	var _user = __webpack_require__("./src/views/containers/topbar/user.png");
	
	var _user2 = _interopRequireDefault(_user);
	
	var _settings = __webpack_require__("./src/views/containers/topbar/settings.jsx");
	
	var _settings2 = _interopRequireDefault(_settings);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TopBarUser = function (_React$Component) {
	  (0, _inherits3.default)(TopBarUser, _React$Component);
	
	  function TopBarUser() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, TopBarUser);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TopBarUser.__proto__ || (0, _getPrototypeOf2.default)(TopBarUser)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isModalVisible: false
	    }, _this.handleSettingsToggle = function () {
	      var _this2;
	
	      return (_this2 = _this).__handleSettingsToggle__REACT_HOT_LOADER__.apply(_this2, arguments);
	    }, _this.handleLogout = function () {
	      var _this3;
	
	      return (_this3 = _this).__handleLogout__REACT_HOT_LOADER__.apply(_this3, arguments);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(TopBarUser, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.validateUserFields(this.props);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      this.validateUserFields(props);
	    }
	  }, {
	    key: '__handleSettingsToggle__REACT_HOT_LOADER__',
	    value: function __handleSettingsToggle__REACT_HOT_LOADER__() {
	      this.setState({ isModalVisible: !this.state.isModalVisible });
	    }
	  }, {
	    key: '__handleLogout__REACT_HOT_LOADER__',
	    value: function __handleLogout__REACT_HOT_LOADER__(evt) {
	      evt.preventDefault();
	
	      this.props.actions.logout();
	    }
	  }, {
	    key: 'validateUserFields',
	    value: function validateUserFields(props) {
	      var _this4 = this;
	
	      this.requiredFields = props.user.type === 'volunteer' ? ['name', 'state', 'city', 'skills'] : ['name', 'state', 'city'];
	
	      setTimeout(function () {
	        _this4.setState({
	          isModalVisible: _this4.requiredFields.map(function (attr) {
	            return props.user[attr];
	          }).some(function (val) {
	            return (0, _lodash.isEmpty)(val);
	          })
	        });
	      }, 1);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var settingsProps = {
	        user: this.props.user,
	        requiredFields: this.requiredFields,
	        isOpen: this.state.isModalVisible,
	        onClose: this.handleSettingsToggle
	      };
	
	      var trigger = _react2.default.createElement(
	        _flexElement2.default,
	        { align: 'center', justify: 'center' },
	        _react2.default.createElement(_semanticUiReact.Image, { avatar: true, src: _user2.default }),
	        _react2.default.createElement(_semanticUiReact.Icon, { name: 'caret down', style: { marginLeft: '0.3em' } })
	      );
	
	      return _react2.default.createElement(
	        _flexElement2.default,
	        { align: 'center', justify: 'flex-end', style: { marginLeft: 'auto' } },
	        _react2.default.createElement(
	          _semanticUiReact.Dropdown,
	          { icon: null, trigger: trigger, pointing: 'top right' },
	          _react2.default.createElement(
	            _semanticUiReact.Dropdown.Menu,
	            null,
	            _react2.default.createElement(_semanticUiReact.Dropdown.Item, { text: 'Configura\xE7\xF5es', icon: 'settings', onClick: this.handleSettingsToggle }),
	            _react2.default.createElement(_semanticUiReact.Dropdown.Item, { text: 'Sair', icon: 'sign out', onClick: this.handleLogout })
	          )
	        ),
	        _react2.default.createElement(_settings2.default, settingsProps)
	      );
	    }
	  }]);
	  return TopBarUser;
	}(_react2.default.Component);
	
	TopBarUser.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  user: _react2.default.PropTypes.object
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    user: _selectors2.default.getUser(state)
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(TopBarUser);
	
	exports.default = _default;
	;
	
	var _temp2 = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(TopBarUser, 'TopBarUser', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/user.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/user.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/user.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/user.jsx');
	}();

	;

/***/ },

/***/ "./src/views/containers/topbar/user.png":
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "user.png";

/***/ },

/***/ "./src/views/containers/topbar/settings.jsx":
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(59);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(60);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(61);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(62);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(63);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _lodash = __webpack_require__(11);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(57);
	
	var _redux = __webpack_require__(12);
	
	var _semanticUiReact = __webpack_require__(64);
	
	var _genUid = __webpack_require__("./src/helpers/gen-uid.js");
	
	var _genUid2 = _interopRequireDefault(_genUid);
	
	var _actions = __webpack_require__("./src/store/actions.js");
	
	var actionCreators = _interopRequireWildcard(_actions);
	
	var _selectors = __webpack_require__("./src/store/selectors/index.js");
	
	var _selectors2 = _interopRequireDefault(_selectors);
	
	var _flexElement = __webpack_require__("./src/views/components/flex-element/index.js");
	
	var _flexElement2 = _interopRequireDefault(_flexElement);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Settings = function (_React$PureComponent) {
	  (0, _inherits3.default)(Settings, _React$PureComponent);
	
	  function Settings(props) {
	    (0, _classCallCheck3.default)(this, Settings);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, (Settings.__proto__ || (0, _getPrototypeOf2.default)(Settings)).call(this, props));
	
	    _this.handleChange = function () {
	      return _this.__handleChange__REACT_HOT_LOADER__.apply(_this, arguments);
	    };
	
	    _this.handleClose = function () {
	      return _this.__handleClose__REACT_HOT_LOADER__.apply(_this, arguments);
	    };
	
	    _this.handleSubmit = function () {
	      return _this.__handleSubmit__REACT_HOT_LOADER__.apply(_this, arguments);
	    };
	
	    _this.state = _this.initialState;
	    return _this;
	  }
	
	  (0, _createClass3.default)(Settings, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.skills !== this.state.skills) {
	        this.setState({
	          isCreatingSkill: false,
	          skills: _lodash2.default.merge({}, nextProps.skills)
	        });
	      }
	    }
	  }, {
	    key: '__handleChange__REACT_HOT_LOADER__',
	    value: function __handleChange__REACT_HOT_LOADER__(e, _ref) {
	      var _this2 = this;
	
	      var name = _ref.name,
	          value = _ref.value;
	      var skills = this.state.skills;
	
	      var formData = _lodash2.default.merge({}, this.state.formData);
	
	      if (name === 'skills') {
	        (function () {
	          var newValue = {};
	          var newSkill = _lodash2.default.remove(value, function (attr) {
	            return !skills[attr];
	          })[0];
	
	          if (newSkill) {
	            (function () {
	              var uid = (0, _genUid2.default)('skills');
	
	              skills[uid] = { uid: uid, name: newSkill };
	
	              _this2.setState({ skills: skills }, function () {
	                _this2.props.actions.save('skills', skills[uid]);
	              });
	
	              newValue[uid] = uid;
	            })();
	          }
	
	          value.forEach(function (uid) {
	            return newValue[uid] = uid;
	          });
	          value = newValue;
	        })();
	      }
	
	      formData[name] = value;
	
	      this.setState({ formData: formData });
	    }
	  }, {
	    key: '__handleClose__REACT_HOT_LOADER__',
	    value: function __handleClose__REACT_HOT_LOADER__() {
	      var _props = this.props,
	          user = _props.user,
	          onClose = _props.onClose;
	
	
	      if (this.isValid(user)) {
	        this.setState(this.initialState, onClose);
	      }
	    }
	  }, {
	    key: '__handleSubmit__REACT_HOT_LOADER__',
	    value: function __handleSubmit__REACT_HOT_LOADER__(evt) {
	      var formData = this.state.formData;
	      var _props2 = this.props,
	          actions = _props2.actions,
	          user = _props2.user;
	
	
	      evt.preventDefault();
	
	      if (this.isValid(formData)) {
	        actions.updateProfile(_lodash2.default.merge({}, user, formData));
	      }
	    }
	  }, {
	    key: 'isValid',
	    value: function isValid(data) {
	      var isValid = !this.props.requiredFields.map(function (attr) {
	        return data[attr];
	      }).some(function (val) {
	        return _lodash2.default.isEmpty(val);
	      });
	
	      if (!isValid) {
	        this.props.actions.notifyError(data.uid ? 'É necessário completar os seus dados antes de continuar' : 'É necessário preencher os campos obrigatórios');
	      }
	
	      if (data.password && data.password !== data.password2) {
	        this.props.actions.notifyError('As senhas não conferem.');
	      }
	
	      return isValid;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;
	
	      var _props3 = this.props,
	          isOpen = _props3.isOpen,
	          isUpdating = _props3.isUpdating,
	          user = _props3.user;
	      var _state = this.state,
	          formData = _state.formData,
	          skills = _state.skills,
	          isCreatingSkill = _state.isCreatingSkill;
	
	      var options = _lodash2.default.values(skills).map(function (_ref2) {
	        var uid = _ref2.uid,
	            name = _ref2.name;
	        return { text: name, value: uid };
	      });
	
	      return _react2.default.createElement(
	        _semanticUiReact.Modal,
	        { open: isOpen, closeOnRootNodeClick: false, onClose: this.handleClose },
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Header,
	          null,
	          'Configura\xE7\xF5es'
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Content,
	          {
	            as: _semanticUiReact.Form,
	            ref: function ref(el) {
	              return _this3.form = el;
	            },
	            onSubmit: this.handleSubmit
	          },
	          _react2.default.createElement(_semanticUiReact.Form.Input, {
	            required: true,
	            name: 'name',
	            label: 'Nome Completo',
	            placeholder: 'Ex.: Jos\xE9 C\xEDcero',
	            disabled: isUpdating,
	            value: formData.name,
	            onChange: this.handleChange
	          }),
	          user.type === 'volunteer' && _react2.default.createElement(_semanticUiReact.Form.Select, {
	            fluid: true,
	            search: true,
	            required: true,
	            multiple: true,
	            selection: true,
	            allowAdditions: true,
	            name: 'skills',
	            label: 'Habilidades',
	            placeholder: 'Digite suas habilidades',
	            noResultsMessage: 'Nenhum resultado encontrado',
	            disabled: isUpdating,
	            loading: isCreatingSkill,
	            value: _lodash2.default.keys(formData.skills),
	            options: options,
	            onChange: this.handleChange
	          }),
	          _react2.default.createElement(
	            _semanticUiReact.Form.Group,
	            { widths: 'equal' },
	            _react2.default.createElement(_semanticUiReact.Form.Input, {
	              required: true,
	              name: 'state',
	              label: 'Estado',
	              placeholder: 'Ex.: Alagoas',
	              disabled: isUpdating,
	              value: formData.state,
	              onChange: this.handleChange
	            }),
	            _react2.default.createElement(_semanticUiReact.Form.Input, {
	              required: true,
	              name: 'city',
	              label: 'Cidade',
	              placeholder: 'Ex.: Macei\xF3',
	              disabled: isUpdating,
	              value: formData.city,
	              onChange: this.handleChange
	            })
	          )
	        ),
	        _react2.default.createElement(
	          _semanticUiReact.Modal.Actions,
	          { as: _flexElement2.default, justify: 'flex-end' },
	          _react2.default.createElement(_semanticUiReact.Button, {
	            content: 'Fechar',
	            disabled: isUpdating,
	            onClick: this.handleClose
	          }),
	          _react2.default.createElement(_semanticUiReact.Button, {
	            primary: true,
	            content: 'Salvar',
	            icon: 'save',
	            loading: isUpdating,
	            disabled: isUpdating,
	            onClick: this.handleSubmit
	          })
	        )
	      );
	    }
	  }, {
	    key: 'initialState',
	    get: function get() {
	      var _props4 = this.props,
	          skills = _props4.skills,
	          user = _props4.user;
	
	
	      return {
	        isCreatingSkill: false,
	        skills: _lodash2.default.merge({}, skills),
	        formData: {
	          name: user.name || '',
	          state: user.state || '',
	          city: user.city || '',
	          skills: user.skills || []
	        }
	      };
	    }
	  }]);
	  return Settings;
	}(_react2.default.PureComponent);
	
	Settings.propTypes = {
	  actions: _react2.default.PropTypes.object,
	  isOpen: _react2.default.PropTypes.bool,
	  isUpdating: _react2.default.PropTypes.bool,
	  requiredFields: _react2.default.PropTypes.array,
	  skills: _react2.default.PropTypes.object,
	  user: _react2.default.PropTypes.object,
	  onClose: _react2.default.PropTypes.func
	};
	
	
	var mapStateToProps = function mapStateToProps(state) {
	  return {
	    isUpdating: _selectors2.default.isUpdatingProfile(state),
	    skills: _selectors2.default.getEntities(state, 'skills')
	  };
	};
	
	var mapDispatchToProps = function mapDispatchToProps(dispatch) {
	  return {
	    actions: (0, _redux.bindActionCreators)(actionCreators, dispatch)
	  };
	};
	
	var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Settings);
	
	exports.default = _default;
	;
	
	var _temp = function () {
	  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
	    return;
	  }
	
	  __REACT_HOT_LOADER__.register(Settings, 'Settings', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/settings.jsx');
	
	  __REACT_HOT_LOADER__.register(mapStateToProps, 'mapStateToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/settings.jsx');
	
	  __REACT_HOT_LOADER__.register(mapDispatchToProps, 'mapDispatchToProps', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/settings.jsx');
	
	  __REACT_HOT_LOADER__.register(_default, 'default', 'D:/repo.git/djalmajr/agencia-amiga/src/views/containers/topbar/settings.jsx');
	}();

	;

/***/ },

/***/ "./src/views/containers/main.scss":
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/main.scss");
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__("./node_modules/style-loader/addStyles.js")(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/main.scss", function() {
				var newContent = __webpack_require__("./node_modules/css-loader/index.js?sourceMap&modules&localIdentName=[name]__[local]__[hash:base64:10]!./node_modules/postcss-loader/index.js!./node_modules/sass-loader/index.js?sourceMap!./src/views/containers/main.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },

/***/ 27:
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(2))(1652);

/***/ }

/******/ })
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,